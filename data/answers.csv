Body,Score,ParentId
"<p>Use the <code>toArray()</code> method of the ArrayList class and pass it into the constructor of the <code>JComboBox</code></p>

<p>See the <a href=""http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/JComboBox.html#JComboBox(java.lang.Object[])"" rel=""noreferrer"">JavaDoc</a> and <a href=""http://java.sun.com/docs/books/tutorial/uiswing/components/combobox.html"" rel=""noreferrer"">tutorial</a> for more info.</p>
","23","1291704"
"<p>If you don't want duplicates in a <code>Collection</code>, you should consider why you're using a <code>Collection</code> that allows duplicates. The easiest way to remove repeated elements is to add the contents to a <code>Set</code> (which will not allow duplicates) and then add the <code>Set</code> back to the <code>ArrayList</code>:</p>

<pre><code>Set&lt;String&gt; set = new HashSet&lt;&gt;(yourList);
yourList.clear();
yourList.addAll(set);
</code></pre>

<p>Of course, this destroys the ordering of the elements in the <code>ArrayList</code>.</p>
","1011","203984"
"<p>If you want the array of items to expand (i.e. if you don't know what the size of the list will be beforehand), a List will be beneficial. However, if you want performance, you would generally use an array.</p>
","0","1589813"
"<p>If you don't want duplicates, use a <a href=""http://java.sun.com/javase/6/docs/api/java/util/Set.html"" rel=""noreferrer"">Set</a> instead of a <code>List</code>. To convert a <code>List</code> to a <code>Set</code> you can use the following code:</p>

<pre><code>// list is some List of Strings
Set&lt;String&gt; s = new HashSet&lt;String&gt;(list);
</code></pre>

<p>If really necessary you can use the same construction to convert a <code>Set</code> back into a <code>List</code>.</p>
","53","203984"
"<p>Pretty much always prefer a list. Lists have much more functionality, particularly iterator support. You can convert a list to an array at any time with the toArray() method.</p>
","7","1589813"
"<p>It depends on what kind of List.</p>

<p>It's better to use a LinkedList if you know you'll be inserting many elements in positions other than the end. LinkedList is not suitable for random access (getting the i'th element).</p>

<p>It's better to use an ArrayList if you don't know, in advance, how many elements there are going to be. The ArrayList correctly amortizes the cost of growing the backing array as you add more elements to it, and is suitable for random access once the elements are in place. An ArrayList can be efficiently sorted.</p>
","1","1589813"
"<p>Although converting the <code>ArrayList</code> to a <code>HashSet</code> effectively removes duplicates, if you need to preserve insertion order, I'd rather suggest you to use this variant</p>

<pre><code>// list is some List of Strings
Set&lt;String&gt; s = new LinkedHashSet&lt;&gt;(list);
</code></pre>

<p>Then, if you need to get back a <code>List</code> reference, you can use again the conversion constructor.</p>
","293","203984"
"<p>I see the question as being the opposite- </p>

<p>When should you use an Array over a List? </p>

<p>Only you have a specific reason to do so (eg: Project Constraints, Memory Concerns (not really a good reason), etc.)</p>

<p>Lists are much easier to use (imo), and have much more functionality. </p>

<p>Note: You should also consider whether or not something like a Set, or another datastructure is a better fit than a List for what you are trying to do.</p>

<p>Each datastructure, and implmentation, has different pros/cons. Pick the ones that excel at the things that you need to do.</p>

<p>If you need get() to be O(1) for any item? Likely use an ArrayList, Need O(1) insert()? Possibly a Linked List. Need O(1) contains()? Possibly a Hashset.</p>

<p><strong>TLDR: Each data structure is good at some things, and bad at others. Look at your objectives and choose the data structure that best fits the given problem.</strong></p>

<p>Edit: </p>

<blockquote>
  <p>One thing not noted is that you're
  better off declaring the variable as
  its interface (i.e. List or Queue)
  rather than its implementing class.
  This way, you can change the
  implementation at some later date
  without changing anything else in the
  code. </p>
  
  <p>As an example: </p>
</blockquote>

<pre><code>List&lt;String&gt; myList = new ArrayList&lt;String&gt;(); 
</code></pre>

<blockquote>
  <p>vs</p>
</blockquote>

<pre><code>List&lt;String&gt; myList = new LinkedList&lt;String&gt;(); 
</code></pre>

<blockquote>
  <p>Note that myList is a List in both examples.
  --<strong>R. Bemrose</strong></p>
</blockquote>
","41","1589813"
"<p>As said before, you should use a class implementing the Set interface instead of List to be sure of the unicity of elements. If you have to keep the order of elements, the SortedSet interface can then be used; the TreeSet class implements that interface.</p>
","1","203984"
"<p>In many cases the type of collection used is an implementation detail which shouldn't be exposed to the outside world. The more generic your returntype is the more flexibility you have changing the implementation afterwards.</p>

<p>Arrays (primitive type, ie. new int[10]) are not generic, you won't be able to change you implementation without an internal conversion or altering the client code. You might want to consider Iterable as a returntype.</p>
","0","1589813"
"<p>If you know how many things you'll be holding, you'll want an array.  My screen is 1024x768, and a buffer of pixels for that isn't going to change in size <em>ever</em> during runtime.</p>

<p>If you know you'll need to access specific indexes (go get item #763!), use an array or array-backed list.</p>

<p>If you need to add or remove items from the group regularly, use a linked list.</p>

<p><strong><em>In general, dealing with hardware, arrays, dealing with users, lists.</em></strong></p>
","2","1589813"
"<p>Probably a bit overkill, but I enjoy this kind of isolated problem. :)</p>

<p>This code uses a temporary Set (for the uniqueness check) but removes elements directly inside the original list. Since element removal inside an ArrayList can induce a huge amount of array copying, the remove(int)-method is avoided.</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(ArrayList&lt;T&gt; list) {
    int size = list.size();
    int out = 0;
    {
        final Set&lt;T&gt; encountered = new HashSet&lt;T&gt;();
        for (int in = 0; in &lt; size; in++) {
            final T t = list.get(in);
            final boolean first = encountered.add(t);
            if (first) {
                list.set(out++, t);
            }
        }
    }
    while (out &lt; size) {
        list.remove(--size);
    }
}
</code></pre>

<p>While we're at it, here's a version for LinkedList (a lot nicer!):</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(LinkedList&lt;T&gt; list) {
    final Set&lt;T&gt; encountered = new HashSet&lt;T&gt;();
    for (Iterator&lt;T&gt; iter = list.iterator(); iter.hasNext(); ) {
        final T t = iter.next();
        final boolean first = encountered.add(t);
        if (!first) {
            iter.remove();
        }
    }
}
</code></pre>

<p>Use the marker interface to present a unified solution for List:</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(List&lt;T&gt; list) {
    if (list instanceof RandomAccess) {
        // use first version here
    } else {
        // use other version here
    }
}
</code></pre>

<p>EDIT: I guess the generics-stuff doesn't really add any value here.. Oh well. :)</p>
","12","203984"
"<p>Rules of thumb:</p>

<ul>
<li>Use a <code>List</code> for reference types.</li>
<li>Use arrays for primitives.</li>
<li>If you have to deal with an API that is using arrays, it might be useful to use arrays. OTOH, it may be useful to enforce defensive copying with the type system by using <code>List</code>s.</li>
<li>If you are doing a lot of <code>List</code> type operations on the sequence and it is not in a performance/memory critical section, then use <code>List</code>.</li>
<li>Low-level optimisations may use arrays. Expect nastiness with low-level optimisations.</li>
</ul>
","17","1589813"
"<p>Always prefer lists. </p>

<p>Arrays when </p>

<ol>
<li>Varargs for a method ( I guess you are forced to use Arrays here ).</li>
<li>When you want your collections to be covariant ( arrays of reference types are covariant ).</li>
<li>Performance critical code. </li>
</ol>
","4","1589813"
"<p>Most people have answered it already.</p>

<p>There are almost no good reason to use an array instead of List. The main exception being the primitive array (like <code>int[]</code>). You cannot create a primitive list (must have <code>List&lt;Integer&gt;</code>).</p>

<p>The most important difference is that when using List you can decide what implementation will be used. The most obvious is to chose LinkedList or ArrayList. </p>

<p>I would like to point out in this answer that choosing the implementation gives you very fine grained control over the data that is simply not available to array:</p>

<ol>
<li>You can prevent client from modifying your list by wrapping your list in a <code>Collection.unmodifiableList</code></li>
<li>You can synchronize a list for multithreading using <code>Collection.synchronizedList</code></li>
<li>You can create a fixed length queue with implementation of <code>LinkedBlockingQueue</code></li>
<li>... etc</li>
</ol>

<p>In any case, even if you don't want (now) any extra feature of the list. Just use an ArrayList and size it with the size of the array you would have created. It will use an Array in the back-end and the performance difference with a real array will be negligible. (except for primitive arrays) </p>
","10","1589813"
"<p>You can't remove an element from the basic Java array. Take a look at various Collections and ArrayList instead.</p>
","39","642897"
"<p>Sure, create another array :)</p>
","-5","642897"
"<p>The same way you do for String  and Int , you just place different types inside: </p>

<pre><code>Date [] dates = {
    new Date(), 
    new Date()
 };
</code></pre>

<p>Declared an array of size two with two dates.</p>

<p>You can also initialize with null values:</p>

<pre><code> Date [] dates = new Date[2];
</code></pre>

<p>Or add more significant values:</p>

<pre><code> Date [] dates = {
    getDateFromString(""25/11/2009""), 
    getDateFromString(""24/12/2009"")
 };

.... 
public Date getDateFromString( String s ) {
    Date result = ...// parse the string set the value etc. 
    return result;
}
</code></pre>

<p><strong>EDIT</strong></p>

<blockquote>
  <p><em>...but is there anyway you can finish up what you were doing in the getDateFromString method?</em></p>
</blockquote>

<p>Sure, I didn't initially because my point was to show, that you could put anything that is of type ""Date"" there. </p>

<p>You just have to use the <a href=""http://java.sun.com/javase/6/docs/api/java/text/DateFormat.html#parse(java.lang.String)"" rel=""noreferrer"">SimpleDateFormate.parse()</a> method ( inherited from DateFormat class ) </p>

<pre><code>  simpleDateFormatInstance.parse( ""24/12/2009"" ); // returns christmas 2009.
</code></pre>

<p>Here's a complete working sample: </p>

<pre><code>import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import static java.lang.System.out;

public class DateArrayTest {

    private static final SimpleDateFormat dateFormat 
                   = new SimpleDateFormat(""dd/MM/yyyy"");
    private static final Date invalidDate = new Date(0);


    // test creating a date from a string.
    public static void main( String [] args ) { 
        Date [] randomDates = {
            fromString(""01/01/2010""), // new year
            fromString(""16/09/2010""), // 200 yrs Mex indepence 
            fromString(""21/03/2010""), // uhhmm next spring?
            fromString(""this/should/fail""), // invalid date.
        };

        for( Date date: randomDates ) {
            print( date );
        }
    }

    /**
     * Creates a date from the given string spec. 
     * The date format must be dd/MM/yyyy ie. 
     * 24 december 2009 would be: 24/12/2009
     * @return invalidDate if the format is invalid.
     */
    private static final Date fromString( String spec ) {
        try {
            return dateFormat.parse( spec );
        } catch( ParseException dfe ) {
            return invalidDate;
        }
    }
    private static final void print( Date date ) {
        if( date == invalidDate ) {
            out.println(""Invalid date"");
        } else {
            out.println( dateFormat.format( date ) );
        }
    }
}
</code></pre>
","22","1801044"
"<p>Nice looking solution would be to use a List instead of array in the first place.</p>

<pre><code>List.remove(index)
</code></pre>

<p>If you <em>have</em> to use arrays, two calls to <code>System.arraycopy</code> will most likely be the fastest.</p>

<pre><code>Foo[] result = new Foo[source.length - 1];
System.arraycopy(source, 0, result, 0, index);
if (source.length != index) {
    System.arraycopy(source, index + 1, result, index, source.length - index - 1);
}
</code></pre>

<p>(<code>Arrays.asList</code> is also a good candidate for working with arrays, but it doesn't seem to support <code>remove</code>.)</p>
","15","642897"
"<p>you can use an array of <code>java.util.Date</code> (API docs are <a href=""http://java.sun.com/javase/6/docs/api/java/util/Date.html"" rel=""nofollow noreferrer"">here</a>)</p>

<pre><code>Date[] dates = new Date[] {
    new Date(),
    new Date(),
};
</code></pre>

<p>You can create an array of any object type in java - all reference and primitive types</p>
","4","1801044"
"<p>Use an <code>ArrayList</code>:</p>

<pre><code>alist.remove(1); //removes the element at position 1
</code></pre>
","-4","642897"
"<p>There is no such thing as an ""empty"" element in a Java array. If the array's length is at least six, then element 5 exists and it has a value. If you have not assigned anything else to that location, then it will have the value zero, just like an object's uninitialized field would have.</p>

<p>If it is an array of <code>Object</code> descendants, then you can check whether the element is equal to <code>null</code>.</p>
","8","286161"
"<p><code>Iterable &lt;T&gt;</code></p>
","4","362367"
"<p>Or you could use the Collections API and Calendar class,</p>

<pre><code>import java.util.*;

List&lt;Calendar&gt; dates = new ArrayList&lt;Calendar&gt;(5); // initial size
dates.add( Calendar.getInstance() );
</code></pre>
","1","1801044"
"<p>I hope you use the java collection / java commons collections!</p>

<p>With an java.util.ArrayList you can do things like the following: </p>

<pre><code>yourArrayList.remove(someObject);

yourArrayList.add(someObject);
</code></pre>
","0","642897"
"<p>You can consider (and this is not reality, but it sort of works this way) that primitives are something like this (I do get to reality later on... so keep reading):</p>

<p>int.7, int.42 (won't compile) where int is a class (it is not) and 7 and 42 are public static final variables (they are not).</p>

<p>and that Strings are something like this:</p>

<p>String.""Hello"", String.""world"" (won't compile) where String is a class (it is) and ""Hello"" and ""world"" are public static final variables (they are not).</p>

<p>If my fake reality were true you would have to have something like:</p>

<pre><code>// again, won't compile.
public class int
{
    public static final int 7 = new int(7);
    public static final int 42 = new int(42);
    private final ??? data;

    public int(??? val)
    {
        data = val;
    }
}
</code></pre>

<p>and </p>

<pre><code>// also will not compile
public class String
{
    public final String ""Hello"" = new String(""Hello);
    public final String ""world"" = new String(""world);
    private final ??? data;

    public String(final ??? val)
    {
        data = val;
    }
}
</code></pre>

<p>now you make a an array like (still won't compile):</p>

<pre><code>int[] array = new int[] { int.7, int.42 };
String[] array = new String[] {String.""Hello"", String.""world"" };
</code></pre>

<p>In the case of String my alternate reality would be very silly since it is impossible for the String class to know in advance every single possible String (for int it is possible).</p>

<p>So we would get rid of the public static final variables in String and do this instead:</p>

<pre><code>String[] array = new String[] { new String(""Hello""), new String(""world"") };
</code></pre>

<p>Now to reality:</p>

<p>When the java compiler, when it sees ""Hello"" or ""world"" it does something similar to ""new String(""Hello"")"" - it is a bit smarter so that if you have ""Hello"" 20 times in a file that there is only one copy (and some other things too).</p>

<p>When you say:</p>

<pre><code>new int[100]; you get an array of 100 ints all set to 0.
new String[100]; you get an array of 100 Strings all pointing to null.
new Data[100]; you get 100 Dates all pointing to null.
</code></pre>

<p>Since the String and the Date ones are pointing to null you need to allocate a new object for each one.  The reason that you don't have to say ""new"" with String is that the compiler treats is specially.  The reason you do not have to say ""new"" with int is that it is a primitive instead of an object.</p>

<p>So, the easy answer to your question is, you have to allocate a new Date for each element of the array :-)</p>
","0","1801044"
"<p>Are you looking for <code>Iterable&lt;String&gt;</code>?</p>

<pre><code>Iterable&lt;T&gt; &lt;=&gt; IEnumerable&lt;T&gt;
Iterator&lt;T&gt; &lt;=&gt; IEnumerator&lt;T&gt;
</code></pre>
","9","362367"
"<p>Elements in primitive arrays can't be empty.  They'll always get initialized to something (usually <code>0</code> for <code>int</code> arrays, but depends on how you declare the array).</p>

<p>If you declare the array like so (for example):</p>

<pre><code>int [] myArray ;
myArray = new int[7] ;
</code></pre>

<p>then all of the elements will default to <code>0</code>.</p>

<p>An alternative syntax for declaring arrays is</p>

<pre><code>int[] myArray = { 12, 7, 32, 15, 113, 0, 7 };
</code></pre>

<p>where the initial values for an array (of size seven in this case) are given in the curly braces <code>{}</code>.</p>
","21","286161"
"<p>I believe the Java equivalent is <code>Iterable&lt;String&gt;</code>. Although <code>String[]</code> doesn't implement it, you can loop over the elements anyway:</p>

<pre><code>String[] strings = new String[]{""this"", ""that""};
for (String s : strings) {
    // do something
}
</code></pre>

<p>If you really need something that implements <code>Iterable&lt;String&gt;</code>, you can do this:</p>

<pre><code>String[] strings = new String[]{""this"", ""that""};
Iterable&lt;String&gt; stringIterable = Arrays.asList(strings);
</code></pre>
","2","362367"
"<p>So that they get all the benefits thereof:</p>

<ul>
<li>getHashCode()</li>
<li>toString()</li>
</ul>

<p>etc.</p>

<p>And arrays aren't 'primitive', so if they can't be primitive, they must be objects.</p>
","0","2009210"
"<p><a href=""http://java.sun.com/j2se/1.5.0/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)"" rel=""nofollow noreferrer"">Copy</a> your original array into another array, without the element to be removed.</p>

<p>A simplier way to do that is to use a List, Set... and use the remove() method.</p>
","0","642897"
"<p>You have to define what you mean by empty. Depending on the datatype of the array you can decide on the semantics of empty. For example, if you have an array of ints you can decide that 0 is empty. Or if the array is of reference types then you can decide that null is empty. Then you simply check by comparing array[5] == null or array[5] == 0 etc.</p>
","3","286161"
"<p>I'm not sure about the official reason.</p>

<p>However, it makes sense to me that they are objects because operations can be performed on them (such as taking the length) and it made more sense to support these operations as member functions rather than introduce new keywords. Other operations include clone(), the inherited operations of object, etc. Arrays are also hashable and potentially comparable. </p>

<p>This is different from C (and native arrays in C++), where your arrays are essentially pointers to a memory offset. </p>
","0","2009210"
"<p><code>Iterable&lt;String&gt;</code> is the equivalent of <code>IEnumerable&lt;string&gt;</code>.</p>

<p>It would be an odditity in the type system if arrays implemented <code>Iterable</code>. <code>String[]</code> is an instance of <code>Object[]</code>, but <code>Iterable&lt;String&gt;</code> is not an <code>Iterable&lt;Object&gt;</code>. Classes and interfaces cannot multiply implement the same generic interface with different generic arguments.</p>

<p><code>String[]</code> will work just like an <code>Iterable</code> in the enhanced for loop.</p>

<p><code>String[]</code> can easily be turned into an <code>Iterable</code>:</p>

<pre><code>Iterable&lt;String&gt; strs = java.util.Arrays.asList(strArray);
</code></pre>

<p>Prefer collections over arrays (for non-primitives anyway). Arrays of reference types are a bit odd, and are rarely needed since Java 1.5.</p>
","49","362367"
"<p>Swap the item to be removed with the last item, if resizing the array down is not an interest.</p>
","0","642897"
"<p>Primitive arrays (int, float, char, etc) are never ""empty"" (by which I assume you mean ""null""), because primitive array elements can never be null.</p>

<p>By default, an int array usually contains 0 when allocated.  However, I never rely on this (spent too much time writing C code, I guess).</p>

<p>One way is to pick a value that you want to treat as ""uninitialized"".  It could be 0, or -1, or some other value that you're not going to use as a valid value.  Initialize your array to that value after allocating it.</p>

<p>Object arrays (String[] and any array of objects that extend Object), <em>can</em> have null elements, so you could create an Integer[] array and initialize it to nulls. I think I like that idea better than using a magic value as described above.</p>
","2","286161"
"<p>Having arrays be objects means that you can do operations with them (e.g., someArray.count('foo')) instead of just doing it against them (e.g., count(someArray, 'foo')), which leads to more natural syntax.</p>
","3","2009210"
"<p>Another point is that objects are mutable and are passed by reference. In arrays there aren't any fields/methods that you can use to change ""properties"" of the array, but you sure can mutate the element values. And the benefits of passing arrays by reference are pretty obvious (though functional programmers probably wish Java had immutable lists passed by value). </p>

<p>Edit: forgot to mention. In the period before autoboxing, it was helpful to be able to store arrays in collections, write them to ObjectStreams etc.</p>
","1","2009210"
"<p>Create a constant to define the empty value, eg:</p>

<pre><code>private static final int EMPTY = -1;
</code></pre>

<p>then create the array like this:</p>

<pre><code>int[] myArray = new int[size];
Arrays.fill(myArray, EMPTY);
</code></pre>

<p>then to check if an element is 'empty', do this:</p>

<pre><code>if (myArray[i] == EMPTY)
{
   //element i is empty
}
</code></pre>
","-1","286161"
"<p>okay, thx a lot
now i use sth like this:</p>

<pre><code>public static String[] removeElements(String[] input, String deleteMe) {
    if (input != null) {
        List&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(input));
        for (int i = 0; i &lt; list.size(); i++) {
            if (list.get(i).equals(deleteMe)) {
                list.remove(i);
            }
        }
        return list.toArray(new String[0]);
    } else {
        return new String[0];
    }
}
</code></pre>
","2","642897"
"<p>this should do it:</p>

<pre><code>if (arrayList != null &amp;&amp; !arrayList.isEmpty()) {
  T item = arrayList.get(arrayList.size()-1);
}
</code></pre>
","188","687833"
"<p>Do you mean something like this?</p>

<pre><code>import java.util.*; 

public class Test {
    public static void main(String[] args) {
        String[][] data = new String[][] {
            { ""Foo"", ""Bar"" },
            { ""A"", ""B"" }
        };

        String[] flattened = flatten(data);

        for (String x : flattened) {
            System.out.println(x);
        }
    }

    public static &lt;T&gt; T[] flatten(T[][] source) {
        int size = 0;
        for (int i=0; i &lt; source.length; i++) {
            size += source[i].length;
        }

        // Use the first subarray to create the new big one
        T[] ret = Arrays.copyOf(source[0], size);
        int index = source[0].length;
        for (int i=1; i &lt; source.length; i++) {
            System.arraycopy(source[i], 0, ret, index, source[i].length);
            index += source[i].length;
        }
        return ret;
    }

}
</code></pre>

<p>If you want it for primitive types, you'll have to write an overload for each primitive type, but you can use <code>new int[size]</code> instead of <code>Arrays.copyOf</code> at that point.</p>
","2","663632"
"<p>If I remember correctly, the Arrays.sort(...) takes a Comparator&lt;> that it will use to do the sorting.  You can provide an implementation of it that looks at the extension part of the string.</p>
","4","440430"
"<p>You could use commons lang's ArrayUtils.</p>

<pre><code>array = ArrayUtils.removeElement(array, element)
</code></pre>

<p><a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/ArrayUtils.html"" rel=""noreferrer"">commons.apache.org library:Javadocs</a></p>
","247","642897"
"<p>The following is part of the <a href=""http://java.sun.com/javase/6/docs/api/java/util/List.html"" rel=""noreferrer""><code>List</code></a> interface (which ArrayList implements):</p>

<pre><code>E e = list.get(list.size() - 1);
</code></pre>

<p><code>E</code> is the element type. If the list is empty, <code>get</code> throws an <a href=""http://java.sun.com/javase/6/docs/api/java/lang/IndexOutOfBoundsException.html"" rel=""noreferrer""><code>IndexOutOfBoundsException</code></a>. You can find the whole API documentation <a href=""http://java.sun.com/javase/6/docs/api/"" rel=""noreferrer"">here</a>.</p>
","728","687833"
"<p>The <code>size()</code> method returns the number of elements in the ArrayList.  The index values of the elements are <code>0</code> through <code>(size()-1)</code>, so you would use <code>myArrayList.get(myArrayList.size()-1)</code> to retrieve the last element.</p>
","11","687833"
"<p>The best choice would be to use a collection, but if that is out for some reason, use <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#arraycopy(java.lang.Object,%20int,%20java.lang.Object,%20int,%20int)"" rel=""nofollow noreferrer""><code>arraycopy</code></a>. You can use it to copy from and to the same array at a slightly different offset.</p>

<p>For example:</p>

<pre><code>public void removeElement(Object[] arr, int removedIdx) {
    System.arraycopy(arr, removedIdx + 1, arr, removedIdx, arr.length - 1 - removedIdx);
}
</code></pre>

<hr>

<p>Edit in response to comment:</p>

<p>It's not another good way, it's really the only acceptable way--any tools that allow this functionality (like Java.ArrayList or the apache utils) will use this method under the covers.  Also, you REALLY should be using ArrayList (or linked list if you delete from the middle a lot) so this shouldn't even be an issue unless you are doing it as homework.</p>

<p>To allocate a collection (creates a new array), then delete an element (which the collection will do using arraycopy) then call toArray on it (creates a SECOND new array) for every delete brings us to the point where it's not an optimizing issue, it's criminally bad programming.</p>

<p>Suppose you had an array taking up, say, 100mb of ram. Now  you want to iterate over it and delete 20 elements.</p>

<p>Give it a try...  </p>

<p>I know you ASSUME that it's not going to be that big, or that if you were deleting that many at once you'd code it differently, but I've fixed an awful lot of code where someone made assumptions like that.</p>
","41","642897"
"<p>Probably because they wanted to get as close as possible to making everything an object. Native types are there for backward compatibility.</p>
","1","2009210"
"<p>You can implement a custom <a href=""http://java.sun.com/javase/6/docs/api/java/util/Comparator.html"" rel=""nofollow noreferrer"">Comparator</a> of Strings.  Make it sort them by the substring after the last index of <code>'.'</code>.  Then pass in the comparator and your array into </p>

<pre><code>Arrays.sort(stringArray, yourComparator);

//  An implementation of the compare method
public int compare(String o1, String o2) {
    return o1.substring(o1.lastIndexOf('.')).compareTo(o2.substring(o2.lastIndexOf('.'));
}
</code></pre>
","3","440430"
"<p>Use <a href=""http://java.sun.com/j2se/1.5.0/docs/api/java/util/Collection.html#containsAll(java.util.Collection)"" rel=""noreferrer"">Collection.containsAll()</a>:</p>

<pre><code>boolean isSubset = listA.containsAll(listB);
</code></pre>
","42","808394"
"<p>Your question isn't very clear. From your own answer, I can tell better what you are trying to do:</p>

<pre><code>public static String[] removeElements(String[] input, String deleteMe) {
    List result = new LinkedList();

    for(String item : input)
        if(!deleteMe.equals(item))
            result.add(item);

    return result.toArray(input);
}
</code></pre>

<p>NB: This is untested. Error checking is left as an exercise to the reader (I'd throw IllegalArgumentException if either input or deleteMe is null; an empty list on null list input doesn't make sense. Removing null Strings from the array might make sense, but I'll leave that as an exercise too; currently, it will throw an NPE when it tries to call equals on deleteMe if deleteMe is null.)</p>

<p>Choices I made here:</p>

<p>I used a LinkedList. Iteration should be just as fast, and you avoid any resizes, or allocating too big of a list if you end up deleting lots of elements. You could use an ArrayList, and set the initial size to the length of input. It likely wouldn't make much of a difference.</p>
","47","642897"
"<p>You'd have to write your own implementation of <code>Iterable&lt;Boolean&gt;</code> which took an array of bytes, and then created <code>Iterator&lt;Boolean&gt;</code> values which remembered the current index into the byte array <em>and</em> the current index within the current byte. Then a utility method like this would come in handy:</p>

<pre><code>private static Boolean isBitSet(byte b, int bit)
{
    return (b &amp; (1 &lt;&lt; bit)) != 0;
}
</code></pre>

<p>(where <code>bit</code> ranges from 0 to 7). Each time <code>next()</code> was called you'd have to increment your bit index within the current byte, and increment the byte index within byte array if you reached ""the 9th bit"".</p>

<p>It's not really <em>hard</em> - but a bit of a pain. Let me know if you'd like a sample implementation...</p>
","43","1034473"
"<p>Create a Comparator and compare the string extensions. Take a look at the following</p>

<p><a href=""http://java.sun.com/j2se/1.4.2/docs/api/java/util/Comparator.html"" rel=""nofollow noreferrer"">http://java.sun.com/j2se/1.4.2/docs/api/java/util/Comparator.html</a></p>

<p>Then pass in your List of strings to Arrays.sort(List, Comparator)</p>
","1","440430"
"<p>Because the Java Language Specification <a href=""http://java.sun.com/docs/books/jls/third_edition/html/arrays.html"" rel=""noreferrer"">says so</a> :) </p>

<blockquote>
  <p>In the Java programming language arrays are objects (§4.3.1), are dynamically created, and may be assigned to variables of type Object (§4.3.2). All methods of class Object may be invoked on an array.</p>
</blockquote>

<p>So, unlike C++, Java provides true arrays as first-class objects: </p>

<ul>
<li>There is a <code>length</code> member. </li>
<li>There is a <code>clone()</code> method which overrides the method of the same name in class <code>Object</code>.</li>
<li>Plus all the members of the class <code>Object</code>.</li>
<li>An exception is thrown if you attempt to access an array out of bounds.</li>
<li>Arrays are instanciated in dynamic memory.</li>
</ul>
","9","2009210"
"<p>Create your own <a href=""http://java.sun.com/j2se/1.4.2/docs/api/java/util/Comparator.html"" rel=""nofollow noreferrer"">Comparator</a> that treats the strings as filenames and compares them based on the extensions.  Then use <a href=""http://java.sun.com/j2se/1.4.2/docs/api/java/util/Arrays.html"" rel=""nofollow noreferrer"">Arrays.sort</a> with the Comparator argument.</p>
","1","440430"
"<p>You could use the <a href=""http://commons.apache.org/lang/api-release/org/apache/commons/lang3/ArrayUtils.html"" rel=""nofollow noreferrer"">ArrayUtils API</a> to remove it in a ""nice looking way"". It implements many operations (remove, find, add, contains,etc) on Arrays.<br>
Take a look. It has made my life simpler.</p>
","4","642897"
"<p>There is a containsAll method in all collections.</p>
","2","808394"
"<p>You can iterate through the byte array, and for each byte use the bitwise operators to iterate though its bits.</p>
","0","1034473"
"<p>This can only be done when the types of both key and value are the same.</p>

<p>Given:   </p>

<pre><code>HashMap&lt;String,String&gt; map;
</code></pre>

<p>I can create an array from this map with this simple loop:</p>

<pre><code>String[][] array = new String[map.size()][2];
int count = 0;
for(Map.Entry&lt;String,String&gt; entry : map.entrySet()){
    array[count][0] = entry.getKey();
    array[count][1] = entry.getValue();
    count++;
}
</code></pre>
","8","2265266"
"<p>Yes, you can access an array component directly.</p>

<p>For example:</p>

<pre><code>String[] test = new String[] { ""first"", ""second"" };
System.out.println(test[1]); // Prints second
</code></pre>

<p>(EDIT: For some reason I was sure this was about JavaScript not Java. Bizarre.)</p>
","3","705288"
"<p>Original:</p>

<pre><code>for (int i = 0; i &lt; byteArray.Length; i++)
{
   byte b = byteArray[i];
   byte mask = 0x01;
   for (int j = 0; j &lt; 8; j++)
   {
      bool value = b &amp; mask;
      mask &lt;&lt; 1;
   }
}
</code></pre>

<p>Or using Java idioms</p>

<pre><code>for (byte b : byteArray ) {
  for ( int mask = 0x01; mask != 0x100; mask &lt;&lt;= 1 ) {
      boolean value = ( b &amp; mask ) != 0;
  }
}
</code></pre>
","9","1034473"
"<p>Surely you can use args[1] too.</p>
","1","705288"
"<pre><code>Arrays.sort(filenames, new Comparator&lt;String&gt;() {
    @Override
    public int compare(String s1, String s2) {
        // the +1 is to avoid including the '.' in the extension and to avoid exceptions
        // EDIT:
        // We first need to make sure that either both files or neither file
        // has an extension (otherwise we'll end up comparing the extension of one
        // to the start of the other, or else throwing an exception)
        final int s1Dot = s1.lastIndexOf('.');
        final int s2Dot = s2.lastIndexOf('.');
        if ((s1Dot == -1) == (s2Dot == -1)) { // both or neither
            s1 = s1.substring(s1Dot + 1);
            s2 = s2.substring(s2Dot + 1);
            return s1.compareTo(s2);
        } else if (s1Dot == -1) { // only s2 has an extension, so s1 goes first
            return -1;
        } else { // only s1 has an extension, so s1 goes second
            return 1;
        }
    }
});
</code></pre>

<p>For completeness: <a href=""http://java.sun.com/javase/6/docs/api/java/util/Arrays.html"" rel=""noreferrer""><code>java.util.Arrays</code></a> and <a href=""http://java.sun.com/javase/6/docs/api/java/util/Comparator.html"" rel=""noreferrer""><code>java.util.Comparator</code></a>.</p>
","21","440430"
"<p>Iterate over your Map using <a href=""http://java.sun.com/javase/6/docs/api/java/util/Map.html#entrySet()"" rel=""nofollow noreferrer"">entrySet</a>, and fill your array record with the Entry object</p>
","-1","2265266"
"<p>I needed some bit streaming in my application. <a href=""http://code.google.com/p/open-ig/source/browse/trunk/open-ig/src/hu/openig/utils/IOUtils.java"" rel=""nofollow noreferrer"">Here</a> you can find my BitArray implementation. It is not a real iterator pattern but you can ask for 1-32 bits from the array in a streaming way. There is also an alternate implementation called BitReader later in the file.</p>
","1","1034473"
"<p>How about</p>

<pre><code>Object[][] array = new Object[][]{map.keySet.toArray(), map.entrySet.toArray()};
</code></pre>

<p>Or, to be more specific about the types, let's say they're <code>Strings</code>: <code>Set</code>'s <code>toArray</code> takes a hint argument, so that</p>

<pre><code>String[][] array = new String[][]{map.keySet.toArray(new String[0]), map.entrySet.toArray(new String[0])};
</code></pre>

<p><strong>Edit:</strong> I just realized a couple of days later that while this <em>may</em> work by chance, in general it shouldn't. The reason is the intermediate <code>Set</code>; although it is ""backed by the map"", there seems to be no explicit guarantee that it will iterate in any particular order. Thus the key- and entry-arrays might not be in the same order, which is a disaster for sure!</p>
","7","2265266"
"<p>If by ""variable length"" you mean that the size will change over time, then you probably want a LinkedList rather than an ArrayList:</p>

<pre><code>print(""List&lt;Foo&gt; fooList = new LinkedList&lt;Foo&gt;();"");
</code></pre>

<p>That way you get better performance when adding a bunch of elements.</p>
","1","374339"
"<p>An alternative would be to use a BitInputStream like the one you can find <a href=""http://wiki.forum.nokia.com/index.php/Bit_Input/Output_Stream_utility_classes_for_efficient_data_transfer"" rel=""nofollow noreferrer"">here</a> and write code like this:</p>

<pre><code>BitInputStream bin = new BitInputStream(new ByteArrayInputStream(bytes));
    while(true){
        int bit = bin.readBit();
        // do something
    }
bin.close();
</code></pre>

<p>(Note: Code doesn't contain EOFException or IOException handling for brevity.)</p>

<p>But I'd go with Jon Skeets variant and do it on my own.</p>
","2","1034473"
"<p>yes. You can do that, assuming args[1] exists, otherwise you'll get an ArrayIndexOutOfBoundsException.</p>
","5","705288"
"<p>If you just want to group the files by their extension and do not care about the actual alphabetical order, you can use this:</p>

<p>I think the simplest thing you can do that also works when the filenname does not have a ""."" is to just reverse the names and compare them.</p>

<pre><code>Arrays.sort(ary, new Comparator&lt;String&gt;() {
    @Override
    public int compare(String o1, String o2) {
        String r1 = new StringBuffer(o1).reverse().toString();
        String r2 = new StringBuffer(o2).reverse().toString();
        return r1.compareTo(r2);
    }
});
</code></pre>

<p>Its a shame that java's string does not even have a reverse().</p>
","-1","440430"
"<pre><code>HashMap map = new HashMap();
Object[][] arr = new Object[map.size()][2];
Set entries = map.entrySet();
Iterator entriesIterator = entries.iterator();

int i = 0;
while(entriesIterator.hasNext()){

    Map.Entry mapping = (Map.Entry) entriesIterator.next();

    arr[i][0] = mapping.getKey();
    arr[i][1] = mapping.getValue();

    i++;
}
</code></pre>
","14","2265266"
"<p>Comparators are often hard to get exactly right, and the comparison key has to be generated for every comparison which for most sorting algorithms mean O(n log n).  Another approach is to create (key, value) pairs for each item you need to sort, put them in a TreeMap, and then ask for the values as these are sorted according to the key.</p>

<p>For instance </p>

<pre><code>import java.util.Arrays;
import java.util.TreeMap;

public class Bar {

    public static void main(String[] args) {
        TreeMap&lt;String, String&gt; m2 = new TreeMap&lt;String, String&gt;();
        for (String string : Arrays.asList(new String[] { ""#3"", ""#2"", ""#1"" })) {
            String key = string.substring(string.length() - 1);
            String value = string;
            m2.put(key, value);
        }
        System.out.println(m2.values());
    }
}
</code></pre>

<p>prints out </p>

<pre>
[#1, #2, #3]
</pre>

<p>You should easily be able to adapt the key calculation to your problem.</p>

<p>This only calculates the key once per entry, hence O(n) - (but the sort is still O(n log n)).  If the key calculation is expensive or n is large this might be quite measurable.</p>
","3","440430"
"<p>I know, probably not the ""coolest"" way to do it, but you can extract each bit with the following code.</p>

<pre><code>    int n = 156;

String bin = Integer.toBinaryString(n);
System.out.println(bin);

char arr[] = bin.toCharArray();
for(int i = 0; i &lt; arr.length; ++i) {
    System.out.println(""Bit number "" + (i + 1) + "" = "" + arr[i]);
}
</code></pre>

<p>10011100</p>

<p>Bit number 1 = 1</p>

<p>Bit number 2 = 0</p>

<p>Bit number 3 = 0</p>

<p>Bit number 4 = 1</p>

<p>Bit number 5 = 1</p>

<p>Bit number 6 = 1</p>

<p>Bit number 7 = 0</p>

<p>Bit number 8 = 0</p>
","1","1034473"
"<p>What makes you think you can not?</p>
","1","705288"
"<p>It is ""easier"" (that is, more efficient) to remove them from a <code>LinkedList</code>, because removal from an <code>ArrayList</code> requires moving all subsequent elements to a new position in the list&mdash;all subsequent elements of the array must be assigned a new value. With a linked list, only one pointer (or two, with a doubly-linked list) must be re-assigned.</p>
","10","1035107"
"<pre><code>public class ByteArrayBitIterable implements Iterable&lt;Boolean&gt; {
    private final byte[] array;

    public ByteArrayBitIterable(byte[] array) {
        this.array = array;
    }

    public Iterator&lt;Boolean&gt; iterator() {
        return new Iterator&lt;Boolean&gt;() {
            private int bitIndex = 0;
            private int arrayIndex = 0;

            public boolean hasNext() {
                return (arrayIndex &lt; array.length) &amp;&amp; (bitIndex &lt; 8);
            }

            public Boolean next() {
                Boolean val = (array[arrayIndex] &gt;&gt; (7 - bitIndex) &amp; 1) == 1;
                bitIndex++;
                if (bitIndex == 8) {
                    bitIndex = 0;
                    arrayIndex++;
                }
                return val;
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }

    public static void main(String[] a) {
        ByteArrayBitIterable test = new ByteArrayBitIterable(
                   new byte[]{(byte)0xAA, (byte)0xAA});
        for (boolean b : test)
            System.out.println(b);
    }
}
</code></pre>
","18","1034473"
"<pre><code>double [] avg = new double[5];
for(int i=0; i&lt;5; i++)
   avg[i] = scan.nextDouble();
</code></pre>
","0","2795350"
"<pre class=""lang-java prettyprint-override""><code>hashMap.keySet().toArray(); // returns an array of keys
hashMap.values().toArray(); // returns an array of values
</code></pre>

<hr>

<h1>Edit</h1>

<p>It should be noted that the ordering of both arrays may not be the same,
See oxbow_lakes answer for a better approach for iteration when the pair key/values are needed.</p>
","200","1090556"
"<p>Use the <code>ArrayList</code> constructor that takes a collection.</p>

<pre><code>ArrayList&lt;Word&gt; arr = new ArrayList&lt;Word&gt;(hw.values());
</code></pre>

<p>Then every value that was in the <code>HashTable</code> will be in the new <code>ArrayList</code>.</p>

<p>You can find documentation about the constructor in <a href=""http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html"" rel=""noreferrer"">the javadocs</a>.</p>
","49","2915453"
"<p>You can get all the doubles with this code:</p>

<pre><code>List&lt;Double&gt; numbers = new ArrayList&lt;Double&gt;();
while (scan.hasNextDouble()) {
    numbers.add(scan.nextDouble());
}
</code></pre>
","8","2795350"
"<p>Well, removal of an element from a (doubly-linked-)list is O(1). But removal from an array will require that the remaining elements are shifted down one space in the array, which is O(n).</p>

<p>That said, getting a specific element in a list by index is O(n), while getting a specific element in an array by index is O(1).</p>

<p>So, the for actual removal, LinkedList will be better. There is more info on Array's versus LinkedList <a href=""https://stackoverflow.com/questions/166884/array-vs-linked-list"">here</a>.</p>
","5","1035107"
"<pre><code>ArrayList&lt;Word&gt; arr = new ArrayList&lt;Word&gt;( hw.values() );
</code></pre>
","10","2915453"
"<p>You could try something like this:</p>

<pre><code>public static void main (String[] args)
{
    Scanner input = new Scanner(System.in);
    double[] numbers = new double[5];

    for (int i = 0; i &lt; numbers.length; i++)
    {
        System.out.println(""Please enter number"");
        numbers[i] = input.nextDouble();
    }
}
</code></pre>

<p>It seems pretty basic stuff unless I am misunderstanding you</p>
","23","2795350"
"<p>I don't think this is possible because an array is a basic datatype. </p>

<p>But you can use a ArrayList to have something similar. In most of the cases using a collection of some kind pays of very well.</p>
","3","1114400"
"<p>If you want the keys and values, you can always do this via the <code>entrySet</code>:</p>

<pre><code>hashMap.entrySet().toArray(); // returns a Map.Entry&lt;K,V&gt;[]
</code></pre>

<p>From each entry you can (of course) get both the key <em>and</em> value via the <code>getKey</code> and <code>getValue</code> methods</p>
","68","1090556"
"<p>I think the question was asking for a solution <em>without</em> the use of the Collections API. One uses arrays either for low level details, where performance matters, or for a loosely coupled SOA integration. In the later, it is OK to convert them to Collections and pass them to the business logic as that.</p>

<p>For the low level performance stuff, it is usually already obfuscated by the quick-and-dirty imperative state-mingling by for loops, etc. In that case converting back and forth between Collections and arrays is cumbersome, unreadable, and even resource intensive.</p>

<p>By the way, TopCoder, anyone? Always those array parameters! So be prepared to be able to handle them when in the Arena.</p>

<p>Below is my interpretation of the problem, and a solution. It is different in functionality from both of the one given by <a href=""https://stackoverflow.com/a/644764/244935"">Bill K</a> and <a href=""https://stackoverflow.com/a/642913/244935"">jelovirt</a>. Also, it handles gracefully the case  when the element is not in the array.</p>

<p>Hope that helps!</p>

<pre><code>public char[] remove(char[] symbols, char c)
{
    for (int i = 0; i &lt; symbols.length; i++)
    {
        if (symbols[i] == c)
        {
            char[] copy = new char[symbols.length-1];
            System.arraycopy(symbols, 0, copy, 0, i);
            System.arraycopy(symbols, i+1, copy, i, symbols.length-i-1);
            return copy;
        }
    }
    return symbols;
}
</code></pre>
","11","642897"
"<p>use</p>

<pre><code>hw.values();
</code></pre>

<p>it will simply return the Collection (like a List) of <code>Word</code> objects. </p>

<hr>

<p>from javadocs</p>

<p><strong>values</strong></p>

<p>public Collection <strong>values()</strong> </p>

<blockquote>
  <p>Returns a Collection view of the
  values contained in this map. The
  collection is backed by the map, so
  changes to the map are reflected in
  the collection, and vice-versa. If the
  map is modified while an iteration
  over the collection is in progress
  (except through the iterator's own
  remove operation), the results of the
  iteration are undefined. The
  collection supports element removal,
  which removes the corresponding
  mapping from the map, via the
  Iterator.remove, Collection.remove,
  removeAll, retainAll and clear
  operations. It does not support the
  add or addAll operations.</p>
</blockquote>
","0","2915453"
"<p>A set stores each unique (as defined by .equals()) element in it only once, and you can use this to simplify the problem. Create a Set (I'd use a HashSet), iterate your array, adding each integer to the Set, then return .size() of the Set.</p>
","4","1482232"
"<pre><code>Set&lt;Integer&gt; s = new HashSet&lt;Integer&gt;();
for (int i : a) s.add(i);
int distinctCount = s.size();
</code></pre>
","13","1482232"
"<p>Yes, but in Java the type is <code>String[]</code>, not <code>string[]</code>. The case is important.</p>

<p>For example a method could look something like this:</p>

<pre><code>public String[] foo() {
    // ...
}
</code></pre>

<p>Here is a complete example:</p>

<pre><code>public class Program
{
    public static void main(String[] args) {
        Program program = new Program();
        String[] greeting = program.getGreeting();
        for (String word: greeting) {
            System.out.println(word);
        }
    }

    public String[] getGreeting() {
        return new String[] { ""hello"", ""world"" };
    }
}
</code></pre>

<p>Result:</p>

<pre>
hello
world
</pre>

<p><a href=""http://ideone.com/2eM2O"" rel=""noreferrer"">ideone</a></p>
","27","3867151"
"<p>Have a look at <a href=""http://www.angelikalanger.com/Articles/Papers/JavaGenerics/ArraysInJavaGenerics.htm"" rel=""nofollow noreferrer"">this site</a>. It should contain all generics related FAQs.</p>

<p>On a sidenote:</p>

<pre><code>class IntArrayList extends ArrayList&lt;Integer&gt; { }
IntArrayList[] iarray = new IntArrayList[5];
</code></pre>

<p>If you subclass a generic object with a concrete type, that new class can be used
as array type.</p>
","3","1114400"
"<p>Some more pre-conditions are needed for the ones written by Bill K and dadinn</p>

<pre><code>Object[] newArray = new Object[src.length - 1];
if (i &gt; 0){
    System.arraycopy(src, 0, newArray, 0, i);
}

if (newArray.length &gt; i){
    System.arraycopy(src, i + 1, newArray, i, newArray.length - i);
}

return newArray;
</code></pre>
","2","642897"
"<p>Yes.</p>

<pre><code>/** Returns a String array of length 5 */
public String[] createStringArray() {
    return new String[5];
}
</code></pre>
","6","3867151"
"<p>I think you want <a href=""http://download-llnw.oracle.com/javase/6/docs/api/java/util/Collections.html#shuffle%28java.util.List%29"" rel=""nofollow""><code>Collections.shuffle(List)</code></a>? If not that, you will need to give us more details about what you're trying to do.</p>
","6","3929258"
"<p>Yes:</p>

<pre><code>String[] dummyMethod()
{
    String[] s = new String[2];
    s[0] = ""hello"";
    s[1] = ""world"";
    return s;
}
</code></pre>
","5","3867151"
"<p>An efficient method: Sort the array with <code>Arrays.sort</code>. Write a simple loop to count up adjacent equal values.</p>
","3","1482232"
"<p>yes.</p>

<pre><code>public String[] returnStringArray()
{
    return new String[] { ""a"", ""b"", ""c"" };
}
</code></pre>

<p>Do you have a more specific need?</p>
","1","3867151"
"<p>No. Arrays must have a compile-time type.</p>
","3","1114400"
"<p>I don't know much Java, so there may be better way, but this'll do the trick nicely. </p>

<p><a href=""http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Example_implementations"" rel=""nofollow"">Fisher-Yates shuffle</a> from Wikipedia:</p>

<pre><code>static Random rng = new Random();
public static void shuffle(int[] array) {
    // i is the number of items remaining to be shuffled.
    for (int i = array.length; i &gt; 1; i--) {
        // Pick a random element to swap with the i-th element.
        int j = rng.nextInt(i);  // 0 &lt;= j &lt;= i-1 (0-based array)
        // Swap array elements.
        int tmp = array[j];
        array[j] = array[i-1];
        array[i-1] = tmp;
    }
}
</code></pre>
","1","3929258"
"<p>Sure</p>

<pre><code>public String [] getSomeStrings() {
    return new String [] { ""Hello"", ""World"" };
}
</code></pre>
","1","3867151"
"<p>Really depends on the numbers of elements in the array. If you're not dealing with a large amount of integers, a HashSet or a binary tree would probably be the best approach. On the other hand, if you have a large array of diverse integers (say, more than a billion) it might make sense to allocate a 2^32 / 2^8 = 512 MByte byte array in which each bit represents the existence or non-existence of an integer and then count the number of set bits in the end. </p>

<p>A binary tree approach would take n * log n time, while an array approach would take n time. Also, a binary tree requires two pointers per node, so your memory usage would be a lot higher as well. Similar consideration apply to hash tables as well.</p>

<p>Of course, if your set is small, then just use the inbuilt HashSet.</p>
","2","1482232"
"<p>You want to shuffle that array using <a href=""http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Example_implementations"" rel=""nofollow"">a good algorithm</a>.</p>

<p>I would trust <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html#shuffle%28java.util.List%29"" rel=""nofollow"">Collections#shuffle</a> to implement this properly. If you need it to work on the array directly, implement the algorithm in your own helper method.</p>
","2","3929258"
"<p>Arrays are already basic objects types, that is to say they're not a class that describes a collection of other objects like ArrayList or HashMap.</p>

<p>You cannot have an array of generified types either. The following is illegal in Java:</p>

<pre><code>List&lt;String&gt;[] lists = new List&lt;String&gt;[ 10 ];
</code></pre>

<p>This is because arrays must be typed properly by the compiler, and since Java's generics are subject to type erasure you cannot satisfy the compiler this way.</p>
","5","1114400"
"<p>Use <code>BitmapFactory</code> if you already have your byte array:</p>

<pre><code>Bitmap bitmap = BitmapFactory.decodeByteArray(yourByteArray, offset, length);
</code></pre>
","9","4097088"
"<p>Starting from <strong>Java8</strong> it is possible to use <code>String.join()</code>.</p>

<pre><code>String.join("", "", new String[]{""Hello"", ""World"", ""!""})
</code></pre>

<p>Generates:</p>

<pre><code>Hello, World, !
</code></pre>

<p>Otherwise, <a href=""http://commons.apache.org/lang/"" rel=""noreferrer"">Apache Commons Lang</a> has a <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html"" rel=""noreferrer""><code>StringUtils</code></a> class which has a <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/StringUtils.html#join(java.lang.Object[],%20java.lang.String)"" rel=""noreferrer""><code>join</code></a> function which will join arrays together to make a <code>String</code>.</p>

<p>For example:</p>

<pre><code>StringUtils.join(new String[] {""Hello"", ""World"", ""!""}, "", "")
</code></pre>

<p>Generates the following <code>String</code>:</p>

<pre><code>Hello, World, !
</code></pre>
","307","1515437"
"<p>It's possible, but far from pretty. In general, you're better of using the Collections framework instead.</p>

<p>See Sun's <a href=""http://java.sun.com/j2se/1.5/pdf/generics-tutorial.pdf"" rel=""nofollow noreferrer"">Generics tutorial</a>, page 15, for a detailed explanation.</p>
","0","1114400"
"<p>Not in core, no. A search for ""java array join string glue"" will give you some code snippets on how to achieve this though.</p>

<p>e.g.</p>

<pre><code>public static String join(Collection s, String delimiter) {
    StringBuffer buffer = new StringBuffer();
    Iterator iter = s.iterator();
    while (iter.hasNext()) {
        buffer.append(iter.next());
        if (iter.hasNext()) {
            buffer.append(delimiter);
        }
    }
    return buffer.toString();
}
</code></pre>
","8","1515437"
"<p><a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/lang/StackOverflowError.html"" rel=""nofollow""><code>StackOverflowError</code></a> occurs during endless recursive calls. It has nothing to do with arrays. <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html"" rel=""nofollow""><code>ArrayIndexOutOfBoundsException</code></a> occurs when when you try to use an index beyond the size of the array.</p>
","3","4427295"
"<p>Here's a way that doesn't affect your list ordering:</p>

<pre><code>ArrayList l1 = new ArrayList();
ArrayList l2 = new ArrayList();

Iterator iterator = l1.iterator();

while (iterator.hasNext()) {
    YourClass o = (YourClass) iterator.next();
    if(!l2.contains(o)) l2.add(o);
}
</code></pre>

<p>l1 is the original list, and l2 is the list without repeated items
(Make sure YourClass has the equals method according to what you want to stand for equality)</p>
","25","203984"
"<p>Nothing built-in that I know of.</p>

<p>Apache <a href=""http://commons.apache.org/lang/"" rel=""nofollow noreferrer"">Commons Lang</a> has a class called <a href=""http://commons.apache.org/lang/apidocs/org/apache/commons/lang/StringUtils.html"" rel=""nofollow noreferrer""><code>StringUtils</code></a> which contains many join functions.</p>
","4","1515437"
"<p>arrayindexoutofbounds : The exception that is thrown when an attempt is made to read beyond the bounds of an array.</p>

<p>stackoverflow : An error that is issued when a stack overflow occurs.</p>
","2","4427295"
"<p>Get the ASCII stream and then read from the stream into a byte array. <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/sql/Clob.html#getAsciiStream"" rel=""nofollow"">http://download.oracle.com/javase/1.4.2/docs/api/java/sql/Clob.html#getAsciiStream</a>()</p>
","1","5105065"
"<p>You could easily write such a function in about ten lines of code:</p>

<pre><code>String combine(String[] s, String glue)
{
  int k = s.length;
  if ( k == 0 )
  {
    return null;
  }
  StringBuilder out = new StringBuilder();
  out.append( s[0] );
  for ( int x=1; x &lt; k; ++x )
  {
    out.append(glue).append(s[x]);
  }
  return out.toString();
}
</code></pre>
","53","1515437"
"<p>Final means that the variable pointing to the arraylist can't change. But that does not mean that you can not call any method of the object, so you can perform insert, search and any other operation to the object</p>
","3","1672259"
"<p><strong>StackOverFlowError:</strong>
 Occurs when the JVM (<a href=""http://en.wikipedia.org/wiki/Java_Virtual_Machine"" rel=""nofollow"">Java Virtual Memory</a>) is running out of allocated heap space.</p>

<p><strong>ArrayIndexOutOfBoundsException:</strong> 
 Occurs when an application tries to access the array index which does not fall in declared range.</p>
","3","4427295"
"<pre><code>int length = clob.getLength();         
 byte[] array = new byte[length];       
 InputStream in = clob.getAsciiStream();       
 int offset = 0;        
 int n;        
 do      
    n = in.read(array, offset, length - offset);        
 while (n != -1);
</code></pre>

<p>Try the above snippet of code for reading a clob into Byte array. </p>
","2","5105065"
"<p>If you're talking about Java's ArrayList, then, yes you can. Final means just that you can't change which ArrayList instance your variable refers to.</p>
","0","1672259"
"<p>java.util.Arrays has an 'asList' method. Together with the java.util.List/ArrayList API this gives you all you need:;</p>

<pre><code>private static String[] join(String[] array1, String[] array2) {

    List&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(array1));
    list.addAll(Arrays.asList(array2));
    return list.toArray(new String[0]);
}
</code></pre>
","-3","1515437"
"<p><strong>Arrayindexoutofbounds:</strong> You limit your variable for example defining an array with size of 50 and if you want to use the 51. element of that array you get this exception.</p>

<p><strong>Stackoverflow:</strong> Think about that you didn't limit your variable for example; </p>

<pre><code>List myList = new List();
</code></pre>

<p>And you are adding elements to this list.</p>

<pre><code>myList.add(something);
</code></pre>

<p>If you add too much element that your heap memory can't allocate any more space to keep your variable it throws that exception.</p>

<p>At first your limit is 50, at 51 you get an exception, at second you don't get an exception at 51. element if your heap is free enough but you can get an exception when your heap not enough for you.</p>
","0","4427295"
"<p>These two are actually very different things. As the other guys have already mentioned, ArrayIndexOutOfBoundsException is an Exception that occurs when you are trying to access an array using an incorrect index. This could be caused by a very simple bug in programming logic.</p>

<p>StackOverflowError is something more low-level. It has nothing to do with arrays and, contrary to what the other guys said, has nothing to do with the heap either. Try doing that trick with a List and you'll get an OutOfMemoryError instead. Now it's an Error that is much more similar to StackOverflowError than ArrayIndexOutOfBoundsException. Both OutOfMemoryError and StackOverflowError indicate that you're running out of memory, only in different segments. Running out of stack memory almost always occurs due to infinite recursion (unless you have a ridiculously long chain of methods calling each other with lots of local variables in them), and running out of heap memory happens when you allocate too much and keep all those references so even the garbage collector can't free some memory for you.</p>

<p>So when ArrayIndexOutOfBoundsException is indeed ""sticking data where it shouldn't go"", StackOverflowError and OutOfMemoryError are better described as ""running out of memory to stick your data into"".</p>
","2","4427295"
"<p>Use a for loop.  There's nothing built into array.  Or switch to a java.util Collection class.</p>
","8","3384203"
"<p>e.g. or what do you mean</p>

<pre><code>int[][] a2d = new int[15][15];
int[][] b2d = new int[10][10];
List&lt;int[][]&gt; list2d = new ArrayList&lt;int[][]&gt;(10);
list2d.add(a2d);
list2d.add(b2d);
</code></pre>

<p>or do you mean you have a <code>Set&lt;int[][]&gt;</code> then you can simply do what tpierzina suggested</p>

<pre><code>List&lt;int[][]&gt; list2d = new ArrayList&lt;int[][]&gt;();
list2d.addAll(nameOfYourSetVariable);
</code></pre>

<p>or</p>

<pre><code>List&lt;int[][]&gt; list2d = new ArrayList&lt;int[][]&gt;(nameOfYourSetVariable);
</code></pre>
","1","1740136"
"<p>with commons-io</p>

<pre><code>byte[] data = IOUtils.toByteArray(clob.getAsciiStream());
</code></pre>
","7","5105065"
"<p>You might want to consider using a <code>Collection</code> implementation instead of a flat array.</p>

<p>The <code>Collection</code> interface defines a <code>contains(Object o)</code> method, which returns <code>true</code>/<code>false</code>.</p>

<p><code>ArrayList</code> implementation defines an <code>indexOf(Object o)</code>, which gives an index, but that method is not on all collection implementations.</p>

<p>Both these methods require proper implementations of the <code>equals()</code> method, and you probably want a properly implemented <code>hashCode()</code> method just in case you are using a hash based <code>Collection</code> (e.g. <code>HashSet</code>).</p>
","10","3384203"
"<p>You can use one of the many <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#binarySearch%28java.lang.Object[],%20java.lang.Object%29"" rel=""noreferrer""><code>Arrays.binarySearch()</code></a> methods.  Keep in mind that the array must be sorted first.</p>
","5","3384203"
"<pre><code>List&lt;String[][]&gt; myFunc( Set&lt;String[][]&gt; s ) {
  List&lt;String[][]&gt; l = new ArrayList&lt;String[][]&gt;( s.length() );
  l.addAll( s );
  return l;
}
</code></pre>
","1","1740136"
"<p>You can get the bit representation of a Java Float value using</p>

<pre><code>Float.floatToIntBits(float f);
</code></pre>

<p>Once you have done that you can test each bit of the resulting int in turn, starting with the highest, and find out if it set, writing a '1' if it is set and a '0' if not.</p>
","0","5157664"
"<p>There is a <code>contains</code> method for lists, so you should be able to do:</p>

<pre><code>Arrays.asList(yourArray).contains(yourObject);
</code></pre>

<p>Warning: this might not do what you (or I) expect, see Tom's comment below. </p>
","23","3384203"
"<p>Can't you just pass the set into a list like so:</p>

<pre><code>    int [][]a = new int[3][3];
    Set&lt;int[][]&gt; set = new HashSet&lt;int[][]&gt;();
    set.add(a);
    ArrayList&lt;int[][]&gt; list = new ArrayList&lt;int[][]&gt;(set);
</code></pre>

<p>Or am I not understanding your question.</p>
","1","1740136"
"<p>Skip the byte array if you want:
    Bitmap bitmap = BitmapFactory.decodeFile(filename);</p>
","45","4097088"
"<p>I'm not sure it is what you want, but here's a solution to have the binary representation of the IEEE 754 floating-point ""double format"" bit layout for a float (it is basically the memory representation of a float) :</p>

<pre><code>int intBits = Float.floatToIntBits(yourFloat); 
String binary = Integer.toBinaryString(intBits);
</code></pre>

<p>For the reverse procedure :</p>

<pre><code>int intBits = Integer.parseInt(myString, 2);
float myFloat = Float.intBitsToFloat(intBits);
</code></pre>
","15","5157664"
"<p>ArrayLists are useful when you don't know in advance the number of elements you will need. Simple Example: you are reading a text file and builing a list of all the words you find. You can just keep adding to your array list, it will grow.</p>

<p>Arrays you need to pre-declare their size.</p>
","5","1288237"
"<p>Internally an <code>ArrayList</code> uses an <code>Object[]</code>.</p>

<p>As you add items to an <code>ArrayList</code>, the list checks to see if the backing array has room left.  If there is room, the new item is just added at the next empty space.  If there is not room, a new, larger, array is created, and the old array is copied into the new one.</p>

<p>Now, there is more room left, and the new element is added in the next empty space.</p>

<p>Since people really like the source code:</p>

<pre><code>/**
 * The array buffer into which the elements of the ArrayList are stored.
 * The capacity of the ArrayList is the length of this array buffer.
 */
private transient Object[] elementData;
</code></pre>

<p>Straight out of the JDK.</p>
","66","3467965"
"<p>Working sample:</p>

<pre><code>class F { 
  public static void main( String ... args ) { 
    System.out.println(
          Integer.toBinaryString( 
             Float.floatToIntBits(12345.12346f)
          ) 
     );
  }
}
</code></pre>

<p>Output:</p>

<pre><code>1000110010000001110010001111110
</code></pre>
","3","5157664"
"<p><strong>No</strong> they don't have,as they aren't class.</p>

<p><strong>Primitive</strong>  : A primitive type is predefined by the language and is named by a reserved keyword. </p>

<p><strong>array</strong> : An array is a container object that holds a fixed number of values of a single type.</p>
","4","4737311"
"<p>It uses an <code>Object[]</code>, and makes a bigger array when the array gets full.</p>

<p>You can read the <a href=""http://www.grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/util/ArrayList.java#ArrayList"" rel=""noreferrer"">source code here</a>.</p>
","19","3467965"
"<p>Use <code>Arrays.sort()</code>. See the API documentation of class <code>java.util.Arrays</code>.</p>

<p>Example:</p>

<pre><code>import java.util.Arrays;

// ...

String[] arr = new String[] { ""one"", ""two"", ""three"" };
Arrays.sort(arr);
</code></pre>

<p><em>edit</em> - Ok, you've edited your question and added ""without using <code>Arrays.sort()</code>"". Is this homework? Are you supposed to implement your own sorting algorithm? Then just do some research on sorting algorithms and implement one yourself.</p>
","1","3279447"
"<p>An array has to be declared with a fixed size therefore you need to know the number of elements in advance.</p>

<p>An ArrayList is preferable when you don't know how many elements you will need in advance as it can grow as desired.</p>

<p>An ArrayList may also be preferable if you need to perform operations that are available in its API that would required manual implementation for an array. (e.g. indexOf)</p>
","3","1288237"
"<pre><code>List list = getList();
Object[] array = new Object[list.size()];
for (int i = 0; i &lt; list.size(); i++)
{
  array[i] = list.get(i);
}
</code></pre>

<p>Or just use <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html#toArray%28%29"" rel=""nofollow"">List#toArray()</a></p>
","0","5244268"
"<h2>Simple Answer</h2>

<p>Let's test:</p>

<pre><code>public static void main(final String[] args){
    System.out.println(long.class.getPackage());
    System.out.println(Object[].class.getPackage());
}
</code></pre>

<p>Output:</p>

<blockquote>
  <p>null<br>
  null  </p>
</blockquote>

<p>No they don't :-)</p>

<hr>

<h2>Primitive Types</h2>

<p>Primitive classes are special constructs that don't have a package. For reference, see the source of <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/Long.html#TYPE"" rel=""noreferrer""><code>Long.TYPE</code></a>, the alias for <code>long.class</code>:</p>

<pre><code>/**
 * The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type
 * &lt;code&gt;long&lt;/code&gt;.
 *
 * @since   JDK1.1
 */
public static final Class&lt;Long&gt; TYPE =
       (Class&lt;Long&gt;) Class.getPrimitiveClass(""long"");
</code></pre>

<p>As you can see, a primitive class is loaded through a package-private and native mechanism:</p>

<pre><code>static native Class getPrimitiveClass(String name);
</code></pre>

<p>and casted to <code>Class&lt;Long&gt;</code> (in order to enable auto-boxing, I guess)</p>

<h2>Wrapper Types and their Primitive Types</h2>

<p>BTW: every wrapper class has a static final field called <code>TYPE</code> that maps to the corresponding primitive class, as the following code shows:</p>

<pre><code>private static Class&lt;?&gt; getPrimitiveClass(final Class&lt;?&gt; wrapperClass){
    try{
        final Field field = wrapperClass.getDeclaredField(""TYPE"");
        final int modifiers = field.getModifiers();
        if(Modifier.isPublic(modifiers) &amp;&amp; Modifier.isStatic(modifiers)
            &amp;&amp; Modifier.isFinal(modifiers)
            &amp;&amp; Class.class.equals(field.getType())){
            return (Class&lt;?&gt;) field.get(null);
        } else{
            throw new IllegalArgumentException(""This is not a wrapper class: ""
                + wrapperClass);
        }
    } catch(final NoSuchFieldException e){
        throw new IllegalArgumentException(""This is not a wrapper class:""
            + wrapperClass + "", field TYPE doesn't exists."", e);
    } catch(final IllegalAccessException e){
        throw new IllegalArgumentException(""This is not a wrapper class:""
            + wrapperClass + "", field TYPE can't be accessed."", e);
    }
}

public static void main(final String[] args){
    final List&lt;Class&lt;?&gt;&gt; wrappers =
        Arrays.&lt;Class&lt;?&gt;&gt; asList(
            Byte.class, Long.class, Integer.class,
            Short.class, Boolean.class, Double.class
            // etc.
        );
    for(final Class&lt;?&gt; clazz : wrappers){
        System.out.println(""Wrapper type: "" + clazz.getName()
            + "", primitive type: ""
            + getPrimitiveClass(clazz).getCanonicalName());
    }

}
</code></pre>

<p><strong>Output:</strong></p>

<blockquote>
  <p>Wrapper type: java.lang.Byte, primitive type: byte<br>
  Wrapper type: java.lang.Long, primitive type: long<br>
  Wrapper type: java.lang.Integer, primitive type: int<br>
  Wrapper type: java.lang.Short, primitive type: short<br>
  Wrapper type: java.lang.Boolean, primitive type: boolean<br>
  Wrapper type: java.lang.Double, primitive type: double  </p>
</blockquote>

<hr>

<h2>Array Types</h2>

<p>Arrays can be created through <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class%2C%20int%29"" rel=""noreferrer""><code>Array.newInstance(type, length)</code></a>, which internally calls this method:</p>

<pre><code>private static native Object newArray(Class componentType, int length)
throws NegativeArraySizeException;
</code></pre>

<p>so again, the classes are special constructs created by native code (and they don't have a package, or else you could find them somewhere)</p>
","18","4737311"
"<p>It uses an array, and a couple of integers to indicate the first value - last value index</p>

<pre><code>private transient int firstIndex;

private transient int lastIndex;

private transient E[] array;
</code></pre>

<p><a href=""http://www.docjar.com/html/api/java/util/ArrayList.java.html"" rel=""nofollow noreferrer"">Here's</a> an example implementation.</p>
","0","3467965"
"<p>No, but there are objects to wrap primitive data types in the <code>java.lang</code> package. </p>

<p><a href=""http://download.oracle.com/javase/6/docs/api/java/lang/package-summary.html"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/api/java/lang/package-summary.html</a></p>
","1","4737311"
"<p>To add a little bit more to their answers above - as you mentioned ""sorting logically"", you can implement your own Comparator and use <a href=""http://download.oracle.com/docs/cd/E17476_01/javase/1.5.0/docs/api/java/util/Arrays.html#sort(T[],%20int,%20int,%20java.util.Comparator)"" rel=""nofollow noreferrer"">Arrays.sort(array, comparator)</a>.</p>

<p>Is there a specific reason you want to avoid <code>Arrays.sort()</code>?</p>
","0","3279447"
"<p>That depends on what you want:</p>

<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();
// add items to the list
</code></pre>

<p>Now if you want to store the list in an array, you can do one of these:</p>

<pre><code>Object[] arrOfObjects = new Object[]{list};
List&lt;?&gt;[] arrOfLists = new List&lt;?&gt;[]{list};
</code></pre>

<p>But if you want the list <em>items</em> in an array, do one of these:</p>

<pre><code>Object[] arrayOfObjects = list.toArray();
String[] arrayOfStrings = list.toArray(new String[list.size()]);
</code></pre>

<p><strong>Reference:</strong></p>

<ul>
<li><a href=""http://download.oracle.com/javase/6/docs/api/java/util/Collection.html#toArray%28%29"" rel=""noreferrer"" title=""Non-Generic version""><code>Collection.toArray()</code></a></li>
<li><a href=""http://download.oracle.com/javase/6/docs/api/java/util/Collection.html#toArray%28T%5B%5D%29"" rel=""noreferrer"" title=""Generic version, works only if you pass in an array of the target type""><code>Collection.toArray(T[])</code></a></li>
</ul>
","14","5244268"
"<p>Some differences:</p>

<ul>
<li>Arrays are immutable in their size, you cannot easly remove and element and remove the hole whereas using an ArrayList is straightforward</li>
<li>Arrays are fast (handled directly by the JVM as special objects) than an ArrayList and requires less memory </li>
<li>Arrays have a nice syntax for accessing elements (e.g. <code>a[i]</code> vs <code>a.get(i)</code>)</li>
<li>Arrays don't play well with generics (e.g. you cannot create a generic array)</li>
<li>Arrays cannot be easly wrapped as ArrayList (e.g. <a href=""http://java.sun.com/javase/6/docs/api/java/util/Collections.html"" rel=""nofollow noreferrer"">Collections</a> utils like <code>checkedList</code>, <code>synchronizedList</code> and <code>unmodifiableList</code>)</li>
<li>declaring the <code>ArrayList</code> as <code>List</code> you can easly swap implementation with a <code>LinkedList</code> when you need; this imho is the best advantage over plain arrays </li>
<li>Array's <code>toString</code>, <code>equals</code> and <code>hashCode</code> are weird and error-prone, you must use <a href=""http://java.sun.com/javase/6/docs/api/java/util/Arrays.html"" rel=""nofollow noreferrer"">Arrays</a> class utilities</li>
</ul>
","8","1288237"
"<p>Typically, structures like <code>ArrayLists</code> are implemented by a good old fashioned array defined within the class and not directly accessible outside the class. </p>

<p>A certain amount of space is initially allocated for the list, and when you add an element that exceeds the size of the array, the array will be reinitialized with a new capacity (which is typically some multiple of the current size, so the framework isn't constantly re-allocating arrays with each new entry added).</p>
","0","3467965"
"<p>Here is a nice selection including code examples for the various ways to sort arrays and/or collections: <a href=""http://rosettacode.org/wiki/Category:Sorting_Algorithms"" rel=""nofollow noreferrer"">Rosetta Code</a></p>
","4","3279447"
"<p>No since they are language constructs and not classes per-se. </p>

<p>You can however have a class representing a primitive type in the wrapper for instance:</p>

<p><a href=""http://download.oracle.com/javase/6/docs/api/java/lang/Integer.html#TYPE"" rel=""nofollow"">Integer.TYPE</a> et al. useful for reflection. </p>

<p>But you'll see that still those don't have a package ie.</p>

<pre><code>Integer.TYPE.getPackage()
</code></pre>

<p>Returns null</p>
","1","4737311"
"<pre><code>List&lt;Foo&gt; fooList = new ArrayList&lt;Foo&gt;();
Foo[] fooArray = fooList.toArray(new Foo[0]);
</code></pre>
","0","5244268"
"<p>The <a href=""http://download.java.net/jdk6/source/"" rel=""nofollow noreferrer"">Java platform source code</a> is freely available. Here's an extract:</p>

<pre><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;
  implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable
{
  /**
   * The array buffer into which the elements of the ArrayList are stored.
   * The capacity of the ArrayList is the length of this array buffer.
   */
  private transient E[] elementData;
  .
  .
  .
}
</code></pre>
","0","3467965"
"<pre><code>List list = new ArrayList();

list.add(""Blobbo"");

list.add(""Cracked"");

list.add(""Dumbo"");

// Convert a collection to Object[], which can store objects    

Object[] ol = list.toArray();
</code></pre>
","0","5244268"
"<p>Use <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/String.html#toCharArray%28%29""><code>String#toCharArray()</code></a>.</p>

<pre><code>char[] chars = ""some string"".toCharArray();
</code></pre>
","15","5804550"
"<p>ArrayLists use arrays to hold the data. Once the number of elements exceeds the allocated array it copies the data to another array, probably double the size.</p>

<p>A (minor) performance hit is taken when copying the array, it's therefore possible to set the size of the internal array in the constructor of the array list.</p>

<p>Furthermore it implements <code>java.util.Collection</code> and and <code>java.util.list</code>, and it's is therefore possible to get the element at a specified index, and iterable (just like an array).</p>
","0","3467965"
"<p>I have covered sorting algorithms in Java which includes the bubble sort, quick sort and merge sort with comprehensive code and explanations. You may find the code <a href=""http://tech.bragboy.com/search/label/sorting"" rel=""nofollow noreferrer"">here</a>.</p>
","0","3279447"
"<p>When you want to change its size by adding or removing elements.</p>

<p>When you want to pass it to something that wants a Collection or Iterable (although you can use Arrays.asList(a) to make an array, a, look like a List).</p>
","2","1288237"
"<p>You mean you want to convert an <code>ArrayList</code> to an array?</p>

<pre><code>Object[] array = new Object[list.size()];
array = list.toArray(array);
</code></pre>

<p>Choose the appropriate class.</p>
","2","5244268"
"<pre><code>""read java docs"".toCharArray();
</code></pre>
","4","5804550"
"<p>Write a quicksort or mergesort algorithm. Smells homework, too.</p>
","1","3279447"
"<p>You can <em>think</em> of it as always going on the heap.</p>

<p>I believe some smart VMs are able to stack-allocate objects if they can detect it's safe - but conceptually it's on the heap. In particular, all array types are reference types (even if the element type is primitive), so the <code>array</code> variable (which is on the stack) is just a reference to an object, and objects normally go on the heap.</p>

<p>In particular, imagine a small change:</p>

<pre><code>byte[] someMethod() { 
    byte[] array = { 0, 0 };
    return array;
}
</code></pre>

<p>If the array were allocated on the stack, what would the returned reference have to refer to?</p>
","18","3474852"
"<p>Try the generic method <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/List.html#toArray%28T%5b%5d%29"" rel=""nofollow""><code>List.toArray()</code></a>:</p>

<pre><code>List&lt;String&gt; list = Arrays.asList(""Foo"", ""Bar"", ""Gah"");
String array[] = list.toArray(new String[list.size()]);
// array = [""Foo"", ""Bar"", ""Gah""]
</code></pre>
","0","5244268"
"<p>It will be stored in the heap</p>
","2","3474852"
"<p>Have a look at <a href=""http://books.google.com/books?id=NLngYyWFl_YC&amp;pg=PA25&amp;lpg=PA25&amp;dq=c2+insertionsort&amp;source=bl&amp;ots=BwUvFA7mC9&amp;sig=cmX0iQc20QjPsYr8MwR6nmwuw4U&amp;hl=en&amp;ei=Cg9ETI75EszaOOu2-JoN&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=9&amp;ved=0CCwQ6AEwCDgK#v=onepage&amp;q&amp;f=false"" rel=""nofollow noreferrer"">Insertion Sort</a>.</p>
","-1","3279447"
"<p>Use the <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#getChars%28int,%20int,%20char%5B%5D,%20int%29"" rel=""nofollow""><code>String.getChars()</code></a> method.</p>
","0","5804550"
"<p>If Type is known (aka not a generics parameter) and you want an Array of Type:</p>

<pre><code>ArrayList&lt;Type&gt; list = ...;
Type[] arr = list.toArray(new Type[list.size()]);
</code></pre>

<p>Otherwise</p>

<pre><code>Object[] arr = list.toArray();
</code></pre>
","3","5244268"
"<p>You can write bubble sort or quick sort or any sorting algorithm yourself</p>
","1","3279447"
"<p>Another couple of points:</p>

<ul>
<li>You may want to consider using an array to represent <strong>more than one dimension</strong> (e.g. matrix).</li>
<li>Arrays can be used to store primitives and hence offer a more compact representation of your data than using an ArrayList.</li>
</ul>
","7","1288237"
"<p>Use the <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#toCharArray%28%29"" rel=""nofollow""><code>String.toCharArray()</code></a> method.</p>
","1","5804550"
"<p>The standard way is this:</p>

<pre><code>String[] arr = new String[]{""I am the one and only""};
</code></pre>

<p>I'm afraid it doesn't get much simpler than this.</p>

<p>Edit: it does:</p>

<pre><code>String[] arr = {""I am the one and only""};
</code></pre>

<p>Thanks aioobe, I keep forgetting this.</p>

<hr>

<p>Of course if you often create array you can create a helper method that makes things a bit simpler:</p>

<pre><code>public static &lt;T&gt; T[] asArray(T... items){
    return items;
}

String[] arr = asArray(""I am the one and only"");
</code></pre>

<p>(But you can't enforce at compile time that it will be an array with only one element)</p>

<hr>

<p>Next I was going to write a singleton array method, but <a href=""https://stackoverflow.com/questions/3582502/best-way-to-create-singleton-array/3582532#3582532"">Stephen beat me to that</a>.</p>
","16","3582502"
"<pre><code>set.toArray(new String[set.size()]);
</code></pre>
","98","5474656"
"<pre><code>Object [] singleton = { new SomeObject() };
</code></pre>
","46","3582502"
"<p>This isn't much to go on, but let's see: </p>

<p>Say you have an <code>int[10]</code> and you want to store them in a <code>HashMap</code> (Dictionaries aren't used much these days). You could do this:</p>

<pre><code>Map&lt;Integer, Integer&gt; dict = new HashMap&lt;Integer, Integer&gt;();
for(int i = 0; i &lt; array.length; i++) {
    dict.put(i,array[i]); // autoboxing takes care of primitives
}
</code></pre>

<p>If you were looking to use the actual values in the array as the keys in the dictionary, then you have to ask yourself ""Where are my dictionary values coming from?""</p>

<p>For example, if you wanted the values to be the index, you could just reverse the above</p>

<pre><code>dict.put(array[i],i);
</code></pre>

<p>Perhaps you have another array with some values in it.</p>

<pre><code>int[] intArray = ...
String[] strArray = ...
Map&lt;Integer, String&gt; dict = new HashMap&lt;Integer, String&gt;();
for(int i = 0; i &lt; array.length; i++) {
    dict.put(intArray[i], strArray[i]); // autoboxing takes care of primitives
}
</code></pre>

<p>Simply put, you have a <code>put</code> method. The first parameter is going to be the key, the second parameter is going to be the value. As long as you're iterating over the array you'll have your keys; then it's just a matter of deciding what values go in there.</p>
","3","8607090"
"<pre><code>Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
map.put(""key1"", ""value1"");
map.put(""key2"", ""value2"");

Object[][] twoDarray = new Object[map.size()][2];

Object[] keys = map.keySet().toArray();
Object[] values = map.values().toArray();

for (int row = 0; row &lt; twoDarray.length; row++) {
    twoDarray[row][0] = keys[row];
    twoDarray[row][1] = values[row];
}

// Print out the new 2D array
for (int i = 0; i &lt; twoDarray.length; i++) {
    for (int j = 0; j &lt; twoDarray[i].length; j++) {
        System.out.println(twoDarray[i][j]);
    }
}
</code></pre>
","6","1090556"
"<p>I would say the default presumption should be to use an ArrayList unless you have a specific need, simply because it keeps your code more flexible and less error prone. No need to expand the declaration size when you add an extra element 500 lines of code away, etc. And reference the List interface, so you can replace the Array list with a LinkedList or a CopyOnWriteArrayList or any other list implementation that may help a situation without having to change a lot of code.</p>

<p>That being said, arrays have some properties that you just won't get out of a list. One is a defined size with null elements. This can be useful if you don't want to keep things in a sequential order. For example a tic-tac-toe game.</p>

<p>Arrays can be multi-dimensional. ArrayLists cannot.</p>

<p>Arrays can deal with primitives, something an ArrayList cannot (although there are third party collection classes that wrap primitives, they aren't part of the standard collections API).</p>
","2","1288237"
"<p>This should do the job</p>

<pre><code>public SomeType[] makeSingletonArray(SomeType elem) {
    return new SomeType[]{elem};
}
</code></pre>

<p>A generic version of this method would be somewhat awkward to use, since you would need to pass it a <code>Class</code> object as an additional parameter.</p>

<p>Inlining the <code>SomeType[]{elem}</code> expression is simpler, and that's how I'd normally do this.</p>
","4","3582502"
"<p>When you are filling the ArrayList, use a condition for each element. For example:</p>

<pre><code>    ArrayList&lt; Integer &gt; al = new ArrayList&lt; Integer &gt;(); 

    // fill 1 
    for ( int i = 0; i &lt;= 5; i++ ) 
        if ( !al.contains( i ) ) 
            al.add( i ); 

    // fill 2 
    for (int i = 0; i &lt;= 10; i++ ) 
        if ( !al.contains( i ) ) 
            al.add( i ); 

    for( Integer i: al )
    {
        System.out.print( i + "" "");     
    }
</code></pre>

<p>We will get an array {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}</p>
","2","203984"
"<pre><code>Integer[] keys = {1, 2, 3};
HashMap&lt;Integer, Object&gt; map = new HashMap&lt;Integer, Object&gt;();
Collections.addAll( map.keySet(), keys );
</code></pre>
","0","8607090"
"<p>The <code>Arrays</code> class contains an <code>asList</code> method which you can use as follows:</p>

<pre><code>String[] words = ...;
List&lt;String&gt; wordList = Arrays.asList(words);
</code></pre>
","6","3746639"
"<p>You could do this:</p>
<p><code>String[] a = Collections.</code><a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html#singletonList(T)"" rel=""nofollow noreferrer""><code>singletonList</code></a><code>(&quot;SingleElement&quot;).toArray();</code></p>
<p><strong>Edit:</strong> Whoops! The above example doesn't compile. As stated in the comment, this can be done either as:</p>
<p><code>Object[] a = Collections.singletonList(&quot;SingleElement&quot;).toArray();</code><br />
Or<br />
<code>String[] a = Collections.singletonList(&quot;SingleElement&quot;).toArray(new String[1]);</code></p>
","2","3582502"
"<p>It's not only about the fact that arrays need to grow, a collection is easier to deal with.</p>

<p>Sometimes arrays are fine, when you just need to iterate over elements, read-only. However, most of the time you want to use methods like contains, etc. </p>

<p>You can't create generic arrays so it 'might' or might not bother you.</p>

<p>When in doubt, use Collections, it will make people that use your API love you :-). If you only provide them with arrays, the first lines of code that they'll write is : </p>

<pre><code>Arrays.asList(thatGuyArray);
</code></pre>
","4","1288237"
"<p>If you want to check one column you need one loop, if you want to check N columns you need two nested loops.</p>
","0","5842213"
"<p>enum solution(anti reflect attack):</p>

<pre><code>enum MySingleton{
    INSTANCE(new String[]{""a"",""b""});

    final String[] values;

    private MySingleton(String[] values) {
        this.values = values;
    }
}
</code></pre>

<p>reference it as:</p>

<pre><code>MySingleton.INSTANCE;
</code></pre>
","5","3582502"
"<p>You need a <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/javax/xml/parsers/DocumentBuilder.html"" rel=""nofollow"">DocumentBuilder</a> and to call <code>parse()</code> on it using an <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/org/xml/sax/InputSource.html"" rel=""nofollow"">InputSource</a> configured with the string of XML via a <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/java/io/StringReader.html"" rel=""nofollow"">StringReader</a>.</p>

<p>Don't call <code>parse()</code> directly with the string, since it'll interpret that string as a URI referencing the XML!</p>
","0","12034918"
"<p>You can use <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/Arrays.html#asList(java.lang.Object[])"" rel=""noreferrer""><code>Arrays.asList()</code></a>:</p>

<pre><code>Type[] anArray = ...
ArrayList&lt;Type&gt; aList = new ArrayList&lt;Type&gt;(Arrays.asList(anArray));
</code></pre>

<p>or alternatively, <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Collections.html#addAll%28java.util.Collection,%20T...%29"" rel=""noreferrer""><code>Collections.addAll()</code></a>:</p>

<pre><code>ArrayList&lt;Type&gt; aList = new ArrayList&lt;Type&gt;();
Collections.addAll(theList, anArray); 
</code></pre>

<p>Note that you aren't technically assigning an array to a List (well, you can't do that), but I think this is the end result you are looking for.</p>
","39","3746639"
"<p>The List interface, of which ArrayList is an implementation in the <a href=""http://java.sun.com/javase/6/docs/technotes/guides/collections/overview.html"" rel=""nofollow noreferrer"">Java Collections Framework</a> is much richer then what a plain Java array has to offer. Due to the relatively widespread support of the collection framework throughout Java and 3rd party libraries, using an ArrayList instead of an array makes sense in general. I'd only use arrays if there is really need for them:</p>

<ul>
<li>They are required by some other interface I'm calling</li>
<li>Profiling shows a bottleneck in a situation where array access can yield a significant speedup over list access</li>
<li><p>Situations where an array feels more natural such as buffers of raw data as in</p>

<pre><code>byte[] buffer = new byte[0x400]; // allocate 1k byte buffer
</code></pre></li>
</ul>

<p>You can always get an array representation of your ArrayList if you need one:</p>

<pre><code>Foo[] bar = fooList.toArray(new Foo[fooList.size()])
</code></pre>

<p>It is a common failure pattern that methods return a reference to a private array member (field) of a class. This breaks the class' encapsulation as outsiders gain mutable access to the class' private state. Consequently you would need to always clone the array and return a reference to the cloned array. With an ArrayList you can use...</p>

<pre><code>return Collections.unmodifiableList(privateListMember);
</code></pre>

<p>... in order to return a wrapper that protects the actual list object. Of course you need to make sure that the objects in the list are immutable too, but that also holds for a (cloned) array of mutable objects. </p>

<p>As per Nick Holt's comment, you shouldn't expose the fact that a List is an ArrayList anywhere:</p>

<pre><code>private List&lt;Foo&gt; fooList = new ArrayList&lt;Foo&gt;();

public List&lt;Foo&gt; getFooList() {
    return Collections.unmodifiableList(fooList);
}
</code></pre>
","4","1288237"
"<p>Simplest way is probably as follows - you basically need to construct a new array that is one element smaller, then copy the elements you want to keep to the right positions.</p>

<pre><code>int n=oldArray.length-1;
String[] newArray=new String[n];
System.arraycopy(oldArray,1,newArray,0,n);
</code></pre>

<p>Note that if you find yourself doing this kind of operation frequently, it could be a sign that you should actually be using a different kind of data structure, e.g. a linked list. Constructing a new array every time is an O(n) operation, which could get expensive if your array is large. A linked list would give you O(1) removal of the first element.</p>

<p>An alternative idea is not to remove the first item at all, but just increment an integer that points to the first index that is in use. Users of the array will need to take this offset into account, but this can be an efficient approach. The Java String class actually uses this method internally when creating substrings.</p>
","14","3663944"
"<pre><code>jshortArray convertShortArrayToJNI(JNIEnv* env, short* arr, size_t count) {
  jshortArray retval = env-&gt;NewShortArray(count);
  env-&gt;SetShortArrayRegion(retval,0,count,arr);
  return retval;
}
</code></pre>

<p>You don't need to free the <code>retval</code>. It is a ""local reference"", which means that it will be freed by JVM as soon as you return through JNI from the recent call. Unless you are calling it from a native thread, of course...</p>
","2","13651771"
"<p>I don't understand, what's so hard about:</p>

<pre><code>List&lt;Foo&gt; fooList = new ArrayList&lt;Foo&gt;();
</code></pre>

<p>I guess you could define a class:</p>

<pre><code>public class FooList extends ArrayList&lt;Foo&gt; {
    ...
}
</code></pre>

<p>if you want to avoid the angle brackets...</p>
","1","374339"
"<p>One-liner:</p>

<pre><code>Set&lt;Character&gt; uniqueChars = new HashSet&lt;Character&gt;(Arrays.asList(array));
</code></pre>

<p>(the <code>array</code> will need to be <code>Character[]</code> not <code>char[]</code>. Otherwise you'd have to convert it to the wrapper array)</p>

<p>Note that, if this is homework, you would need a more algorithmic approach in order to show that you understand what you are doing. The above solution may not be applicable. But here's how it works:</p>

<ul>
<li>the array is turned into a <code>List</code>. This is <code>O(1)</code>, as the array just backs the new, unmodifiable list. This is done so that the array can conform the the <code>List</code> interface, which is required by the <code>HashSet</code> constructor</li>
<li>a <code>HashSet</code> is a collection backed by a <code>HashMap</code> (hashtable). It computes the hashes of keys and stores them in an internal array, under an index = hash. Thus lookup is O(1).</li>
<li>the <code>HashSet</code> constructor simply iterates the passed <code>List</code> and calls <code>add(..)</code> for each item. Items that are the same are not allowed twice in the set (sets by definition do not allow duplicates). This is so, because the hash of the item will be the same as an existing one, so the new one will replace the old one. Note that items with the same hash are allowed, but not those that are also equal (<code>.equals(..)</code>)</li>
</ul>
","3","6178821"
"<p>If you use generics (java 5), you can avoid all casting with</p>

<pre><code> List&lt;String&gt; myList = new ArrayList&lt;String&gt;();
 myList.add("" a test"");
 String temp = myList.get(0);
</code></pre>

<p>Unless I am missing something in your question that should cover both needs.</p>
","13","374339"
"<p>As much as your available memory will allow.  There's no size limit except for the heap.</p>
","5","3767979"
"<p>G'day,</p>

<p>A couple of points that people seem to have missed so far.</p>

<ol>
<li>an array can only contain one type of object whereas an ArrayList is a container that can contain a mixture of object types, it's heterogeneous,</li>
<li>an array must declare the type of its contents when the array itself is declared. An ArrayList doesn't have to declare the type of its contents when the ArrayList is declared,</li>
<li>you must insert an item into a specific location in an array. Adding to an ArrayList is done by means of the add() method on the container, and</li>
<li>objects are stored in an array and retain their type because of the way the array can only store objects of a particular type. Objects are stored in an ArrayList by means of the superclass type Object.</li>
</ol>

<p><strong>Edit:</strong> Ooop. Regarding the last point on the list, I forgot the special case where you have an array of Objects then these arrays can also contain any type of object. Thanks for the comment, Yishai! (-:</p>

<p>HTH</p>

<p>cheers,</p>
","0","1288237"
"<p>The size of arrays in Java cannot be changed.  So, technically you cannot remove any elements from the array.</p>

<p>One way to simulate removing an element from the array is to create a new, smaller array, and then copy all of the elements from the original array into the new, smaller array.</p>

<pre><code>String[] yourArray = Arrays.copyOfRange(oldArr, 1, oldArr.length);
</code></pre>

<p><strong>However</strong>, I would not suggest the above method.  You should really be using a <code>List&lt;String&gt;</code>.  Lists allow you to add and remove items from any index.  That would look similar to the following:</p>

<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;(); // or LinkedList&lt;String&gt;();
list.add(""Stuff"");
// add lots of stuff
list.remove(0); // removes the first item
</code></pre>
","157","3663944"
"<p>It would depend on the implementation, but the limit is not defined by the <code>List</code> interface.</p>

<p>The interface however defines the <code>size()</code> method, which returns an <code>int</code>. </p>

<blockquote>
  <p>Returns the number of elements in this list.  If this list contains more than <code>Integer.MAX_VALUE</code> elements, returns <code>Integer.MAX_VALUE</code>.</p>
</blockquote>

<p>So, no limit, but after you reach <code>Integer.MAX_VALUE</code>, the behaviour of the list changes <em>a bit</em></p>

<p><code>ArrayList</code> (which is tagged) is backed by an array, and is limited to the size of the array - i.e. <code>Integer.MAX_VALUE</code></p>
","24","3767979"
"<p>You can't do it at all, let alone quickly.  Arrays in Java are fixed size.  Two things you could do are:</p>

<ol>
<li>Shift every element up one, then set the last element to null.</li>
<li>Create a new array, then copy it.</li>
</ol>

<p>You can use <code>System.arraycopy</code> for either of these.  Both of these are O(n), since they copy all but 1 element.</p>

<p>If you will be removing the first element often, consider using <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/LinkedList.html"" rel=""nofollow noreferrer""><code>LinkedList</code></a> instead.  You can use <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/LinkedList.html#remove%28%29"" rel=""nofollow noreferrer""><code>LinkedList.remove</code></a>, which is from the <code>Queue</code> interface, for convenience.  With <code>LinkedList</code>, removing the first element is O(1).  In fact, removing any element is O(1) once you have a <code>ListIterator</code> to that position.  However, accessing an arbitrary element by index is O(n).</p>
","5","3663944"
"<p>There may be several. At least, it ensures that</p>

<ul>
<li>later code cannot point the variable 'array' to another array </li>
<li>the variable 'array' can be seen by anonymous inner classes (e.g. listeners).</li>
</ul>

<p>Importantly, it does <em>not</em> ensure that the contents of 'array' are immutable.</p>
","9","6565941"
"<p><code>java.util.List</code> is an interface. How much data a list can hold is dependant on the specific implementation of List you choose to use. </p>

<p>Generally, a List implementation can hold any number of items (If you use an indexed List, it may be limited to <code>Integer.MAX_VALUE</code> or <code>Long.MAX_VALUE</code>). As long as you don't run out of memory, the List doesn't become ""full"" or anything.</p>
","9","3767979"
"<p>Keep an index of the first ""live"" element of the array. Removing (pretending to remove) the first element then becomes an <code>O(1)</code> time complexity operation.</p>
","2","3663944"
"<p>I really doubt if <strong>SHORT</strong> if possible. Nevertheless, you can check out <a href=""http://commons.apache.org/io/api-release/org/apache/commons/io/FileUtils.html"" rel=""nofollow"">Apache Commons File Utils</a> for reading file as <code>byte[]</code> and vice verse.</p>

<pre><code>public static byte[] readFileToByteArray(File file) throws IOException
</code></pre>
","0","14827266"
"<p>You can use the method Arrays.copyOfRange(original, from, to)</p>

<pre><code> public static byte[][] divideArray(byte[] source, int chunksize) {


        byte[][] ret = new byte[(int)Math.ceil(source.length / (double)chunksize)][chunksize];

        int start = 0;

        for(int i = 0; i &lt; ret.length; i++) {
            ret[i] = Arrays.copyOfRange(source,start, start + chunksize);
            start += chunksize ;
        }

        return ret;
    }
</code></pre>

<p>Or You can use as Max suggested the System.arraycopy</p>

<pre><code>public static byte[][] divideArray(byte[] source, int chunksize) {


        byte[][] ret = new byte[(int)Math.ceil(source.length / (double)chunksize)][chunksize];

        int start = 0;

        for(int i = 0; i &lt; ret.length; i++) {
            if(start + chunksize &gt; source.length) {
                System.arraycopy(source, start, ret[i], 0, source.length - start);
            } else {
                System.arraycopy(source, start, ret[i], 0, chunksize);
            }
            start += chunksize ;
        }


        return ret;
    }
</code></pre>
","14","3405195"
"<p>It provides an invariant that the assignment of 'array' can't be changed.  (When looking at code I can assume 'array' won't get reassigned).  However nothing stops an element from being changed.  Ex. array[2] can be changed from 33 to 25.</p>
","1","6565941"
"<p>There are several useful <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString%28java.lang.Object%5B%5D%29"" rel=""noreferrer""><code>toString()</code></a> and <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object%5B%5D%29"" rel=""noreferrer""><code>deepToString()</code></a> methods in <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html"" rel=""noreferrer""><code>java.util.Arrays</code></a> class.</p>

<pre><code>String[] strings = { ""foo"", ""bar"", ""waa"" };
System.out.println(Arrays.toString(strings)); // [foo, bar, waa]
</code></pre>

<p>An alternative is to just <a href=""http://download.oracle.com/javase/tutorial/java/nutsandbolts/for.html"" rel=""noreferrer"">loop</a> over them yourself and print each item separately.</p>
","6","3675121"
"<p>The snippet below reads a file using FileInputStream, and writes the file to the given path using FileOutputStream.</p>

<p>Java Code:</p>

<pre><code>byte[] fileBArray = new byte[(int)file.length()];
FileInputStream fis = new FileInputStream(file);
fis.read(fileBArray);

FileOutputStream fos = new FileOutputStream(""C:\\abc.jpg"");
fos.write(fileBArray);
</code></pre>
","-1","14827266"
"<blockquote>
  <p><em>How much data can be added in java.util.List in Java at the maximum?</em></p>
</blockquote>

<p>This is very similar to <a href=""https://stackoverflow.com/questions/4123743"">Theoretical limit for number of keys (objects) that can be stored in a HashMap?</a></p>

<p>The documentation of <code>java.util.List</code> does not explicitly documented any limit on the maximum number of elements. The documentation of <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html#toArray%28T[]%29"" rel=""nofollow noreferrer""><code>List.toArray</code></a> however, states that ...</p>

<blockquote>
  <p>Return an array containing <strong>all</strong> of the elements in this list in proper sequence (from first to last element);
   would have trouble implementing certain methods faithfully, such as </p>
</blockquote>

<p>... so strictly speaking it would not be possible to faithfully implement this method if the list had more than 2<sup>31</sup>-1 = 2147483647 elements since that is the largest possible array.</p>

<p>Some will argue that the documentation of <code>size()</code>...</p>

<blockquote>
  <p>Returns the number of elements in this list. If this list contains more than <code>Integer.MAX_VALUE</code> elements, returns <code>Integer.MAX_VALUE</code>.</p>
</blockquote>

<p>...indicates that there is no upper limit, but this view leads to numerous inconsistencies. See <a href=""https://bugs.openjdk.java.net/browse/JDK-8032900"" rel=""nofollow noreferrer"">this bug report</a>.</p>

<blockquote>
  <p><em>Is there any default size an array list?</em></p>
</blockquote>

<p>If you're referring to <code>ArrayList</code> then I'd say that the default size is 0. The default <em>capacity</em> however (the number of elements you can insert, without forcing the list to reallocate memory) is 10. See the documentation of the <a href=""http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html#ArrayList%28%29"" rel=""nofollow noreferrer"">default constructor</a>.</p>

<p>The size limit of <code>ArrayList</code> is <code>Integer.MAX_VALUE</code> since it's backed by an ordinary array.</p>
","13","3767979"
"<p>Using <a href=""http://commons.apache.org/lang/"" rel=""nofollow noreferrer"">Apache Commons Lang</a>:</p>

<pre><code>org.apache.commons.lang.StringUtils.join(Arrays.asList(strings), "", "");
</code></pre>

<p>Using <a href=""http://www.springsource.org/about"" rel=""nofollow noreferrer"">Spring</a> Core:</p>

<pre><code>org.springframework.util.StringUtils.collectionToDelimitedString(Arrays.asList(strings), "", "");
</code></pre>
","1","3675121"
"<p>The reasons are the same as with any other mutable type: the reference stays the same throughout the lifecycle of the declaring object, so you can distribute it freely for example. <code>final</code> is always about the reference being fixed and not the contents, which might change.</p>

<p>With arrays, you even get a guarantee that the array size isn't going to change, although how useful that guarantee is depends on the specific use case.</p>
","0","6565941"
"<p>It depends on the <code>List</code> implementation. Since you index arrays with <code>int</code>s, an <code>ArrayList</code> can't hold more than <code>Integer.MAX_VALUE</code> elements. A <code>LinkedList</code> isn't limited in the same way, though, and can contain any amount of elements.</p>
","64","3767979"
"<p>You can do it using <code>for</code> loop. </p>

<p>Here's example :</p>

<pre><code>  String[] colors = {""red"",""blue"",""black"",""green"",""yellow""};
  for (String color : colors) {
   System.out.println(color);
  }
</code></pre>

<p>Also check : <a href=""https://stackoverflow.com/questions/409784/simplest-way-to-print-an-array-in-java"">What&#39;s the simplest way to print a Java array?</a></p>

<p>As quoted by Esko in above link is best answer:</p>

<blockquote>
  <p>In Java 5 <strong>Arrays.toString(arr)</strong> or
  <strong>Arrays.deepToString(arr)</strong> for arrays
  within arrays.</p>
  
  <p>Note that Object[]
  version calls <strong>.toString()</strong> of each
  object in array. If my memory serves
  me correct, the output is even
  decorated in the exact way you're
  asking.</p>
</blockquote>
","1","3675121"
"<p>This is better example:</p>

<pre><code>import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**  
 Converting binary data into different forms.

 &lt;P&gt;Reads binary data into memory, and writes it back out.
 (If your're actually copying a file, there are better ways to do this.)

 &lt;P&gt;Buffering is used when reading and writing files, to minimize the number 
 of interactions with the disk.
*/
public final class BytesStreamsAndFiles {

  /** Change these settings before running this class. */
  private static final String INPUT_FILE_NAME = ""C:\\TEMP\\cottage.jpg"";
  private static final String OUTPUT_FILE_NAME = ""C:\\TEMP\\cottage_copy.jpg"";

  /** Run the example. */
  public static void main(String... aArgs) {
    BytesStreamsAndFiles test = new BytesStreamsAndFiles();
    //read in the bytes
    byte[] fileContents = test.read(INPUT_FILE_NAME);
    //test.readAlternateImpl(INPUT_FILE_NAME);
    //write it back out to a different file name
    test.write(fileContents, OUTPUT_FILE_NAME);
  }

  /** Read the given binary file, and return its contents as a byte array.*/ 
  byte[] read(String aInputFileName){
    log(""Reading in binary file named : "" + aInputFileName);
    File file = new File(aInputFileName);
    log(""File size: "" + file.length());
    byte[] result = new byte[(int)file.length()];
    try {
      InputStream input = null;
      try {
        int totalBytesRead = 0;
        input = new BufferedInputStream(new FileInputStream(file));
        while(totalBytesRead &lt; result.length){
          int bytesRemaining = result.length - totalBytesRead;
          //input.read() returns -1, 0, or more :
          int bytesRead = input.read(result, totalBytesRead, bytesRemaining); 
          if (bytesRead &gt; 0){
            totalBytesRead = totalBytesRead + bytesRead;
          }
        }
        /*
         the above style is a bit tricky: it places bytes into the 'result' array; 
         'result' is an output parameter;
         the while loop usually has a single iteration only.
        */
        log(""Num bytes read: "" + totalBytesRead);
      }
      finally {
        log(""Closing input stream."");
        input.close();
      }
    }
    catch (FileNotFoundException ex) {
      log(""File not found."");
    }
    catch (IOException ex) {
      log(ex);
    }
    return result;
  }

  /**
   Write a byte array to the given file. 
   Writing binary data is significantly simpler than reading it. 
  */
  void write(byte[] aInput, String aOutputFileName){
    log(""Writing binary file..."");
    try {
      OutputStream output = null;
      try {
        output = new BufferedOutputStream(new FileOutputStream(aOutputFileName));
        output.write(aInput);
      }
      finally {
        output.close();
      }
    }
    catch(FileNotFoundException ex){
      log(""File not found."");
    }
    catch(IOException ex){
      log(ex);
    }
  }

  /** Read the given binary file, and return its contents as a byte array.*/ 
  byte[] readAlternateImpl(String aInputFileName){
    log(""Reading in binary file named : "" + aInputFileName);
    File file = new File(aInputFileName);
    log(""File size: "" + file.length());
    byte[] result = null;
    try {
      InputStream input =  new BufferedInputStream(new FileInputStream(file));
      result = readAndClose(input);
    }
    catch (FileNotFoundException ex){
      log(ex);
    }
    return result;
  }

  /**
   Read an input stream, and return it as a byte array.  
   Sometimes the source of bytes is an input stream instead of a file. 
   This implementation closes aInput after it's read.
  */
  byte[] readAndClose(InputStream aInput){
    //carries the data from input to output :    
    byte[] bucket = new byte[32*1024]; 
    ByteArrayOutputStream result = null; 
    try  {
      try {
        //Use buffering? No. Buffering avoids costly access to disk or network;
        //buffering to an in-memory stream makes no sense.
        result = new ByteArrayOutputStream(bucket.length);
        int bytesRead = 0;
        while(bytesRead != -1){
          //aInput.read() returns -1, 0, or more :
          bytesRead = aInput.read(bucket);
          if(bytesRead &gt; 0){
            result.write(bucket, 0, bytesRead);
          }
        }
      }
      finally {
        aInput.close();
        //result.close(); this is a no-operation for ByteArrayOutputStream
      }
    }
    catch (IOException ex){
      log(ex);
    }
    return result.toByteArray();
  }

  private static void log(Object aThing){
    System.out.println(String.valueOf(aThing));
  }
}
</code></pre>

<p>for more detail go to : <a href=""http://www.javapractices.com/topic/TopicAction.do?Id=245"" rel=""nofollow"">Reading and writing binary files</a></p>
","0","14827266"
"<p>You can't. You can only declare the array <em>reference</em> final, which has nothing to do with making the array immutable. Arrays are never immutable in Java.</p>
","0","6565941"
"<p>An alternative ugly method:</p>

<pre><code>   String[] a ={""BLAH00001"",""DIK-11"",""DIK-2"",""MAN5""};
   String[] k=Arrays.toString(a).split("", "",2)[1].split(""]"")[0].split("", "");
</code></pre>
","-8","3663944"
"<p>see the code below of arraylist default it is 10 when u create 
List l = new ArrayList();</p>

<pre><code>   public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;,
           Cloneable, Serializable, RandomAccess {

          private static final long serialVersionUID = 8683452581122892189L;

          private transient int firstIndex;

          private transient int lastIndex;

          private transient E[] array;

          /**
           * Constructs a new instance of {@code ArrayList} with ten capacity.
           */
          public ArrayList() {
              this(10);
          }
</code></pre>
","0","3767979"
"<p>You would do it like so:</p>

<pre><code>int array[][3] = {{0,0,0},{1,0,0}};
</code></pre>

<p>Only the first dimension may be omitted.</p>
","3","15560378"
"<p>Well, what about <a href=""http://download.oracle.com/javase/6/docs/api/java/math/BigInteger.html#BigInteger%28byte%5b%5d%29"" rel=""nofollow"">new BigInteger(byte[] val)</a>?</p>

<p>To quote the API docs I linked to:</p>

<blockquote>
  <p>Translates a byte array containing the two's-complement binary representation of a BigInteger into a BigInteger. The input array is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.</p>
</blockquote>
","2","7705500"
"<pre><code>arr.length 
</code></pre>

<p>will be the number of rows</p>

<pre><code>arr[x].length
</code></pre>

<p>will be the number of columns in row <code>x</code>.</p>
","9","3852867"
"<p>Like this:</p>

<pre><code>int array[2][3] = {{0,0,0},{1,0,0}};
</code></pre>

<p>Or this, because the first dimension is optional:</p>

<pre><code>int array[][3] = {{0,0,0},{1,0,0}};
</code></pre>

<p>And by the way, in Java the idiomatic way to declare the same array is this:</p>

<pre><code>int[][] array = {{0,0,0},{1,0,0}}; // [][] goes before the variable name
</code></pre>
","3","15560378"
"<p>The Best way to convert bytearray to String is </p>

<pre><code>public void convertByteArrayToString(Charset encoding) {

        byte[] byteArray = new byte[] {87, 79, 87, 46, 46, 46};

        String value = new String(byteArray, encoding);

        System.out.println(value);
    }
</code></pre>
","3","4275482"
"<p>You can find the number of rows as:</p>

<pre><code>arr.length
</code></pre>

<p>In Java all the rows need not have same number of elements. You can find the number of elements in the row <code>i</code> as:</p>

<pre><code>arr[i].length
</code></pre>
","6","3852867"
"<p>First, make sure you know in which format your <code>int[]</code> is meant to be interpreted.</p>

<p>Each int can be seen as consisting of four bytes, and these bytes together can be converted to an BigInteger. The details are the byte order - which byte is the most and which one the least significant?</p>

<p>Also, do you have a signed or unsigned number?</p>

<p>A simple way to convert your <code>int</code>s to <code>byte</code>s (for latter use in a BigInteger constructor) would be to use <code>ByteBuffer</code> and wrap an IntBuffer around it.</p>

<pre><code>public BigInteger toBigInteger(int[] data) {
    byte[] array = new byte[data.length * 4];
    ByteBuffer bbuf = ByteBuffer.wrap(array);
    IntBuffer ibuf = bbuf.asIntBuffer();
    ibuf.put(data);
    return new BigInteger(array);
}
</code></pre>

<p>Obvious adaptions would be to set the byte order of <code>bbuf</code>, or use another BigInteger constructor (for unsigned).</p>
","3","7705500"
"<pre><code>Rows - arr.length
Columns -arr[rowNumber].length //Each row can have different number of elements
</code></pre>
","4","3852867"
"<p>If you have <code>HashMap&lt;String, SomeObject&gt; hashMap</code> then:</p>

<pre class=""lang-java prettyprint-override""><code>hashMap.values().toArray();
</code></pre>

<p>Will return an <code>Object[]</code>. If instead you want an array of the type <code>SomeObject</code>, you could use:</p>

<pre class=""lang-java prettyprint-override""><code>hashMap.values().toArray(new SomeObject[0]);
</code></pre>
","52","1090556"
"<p>You can do it like this:</p>

<pre><code>private Object[] myObjects = new Object[5];
</code></pre>

<p>Change the type as needed.</p>
","2","16124732"
"<p>There is also <a href=""https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableSet.html"" rel=""noreferrer""><code>ImmutableSet</code></a> from <a href=""https://github.com/google/guava"" rel=""noreferrer"">Guava</a> as an option (<a href=""https://github.com/google/guava/wiki/ImmutableCollectionsExplained"" rel=""noreferrer"">here</a> is the documentation):</p>

<pre><code>ImmutableSet.copyOf(list);
</code></pre>
","21","203984"
"<p>There is nothing built in, but you could certainly <a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Joiner.html#join%28java.lang.Object%5b%5d%29"" rel=""nofollow"">join</a> all of the elements in your array and pass the resulting string into the <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Scanner.html#Scanner%28java.lang.String%29"" rel=""nofollow"">Scanner constructor</a>.</p>

<p>A solution with better performance but a greater time investment is to implement <a href=""http://docs.oracle.com/javase/6/docs/api/java/lang/Readable.html"" rel=""nofollow"">Readable</a> by wrapping your array, and keeping track of the current element in the array and the current position in that element's string representation. You can then fill the buffer with data from the backing array as the Scanner <a href=""http://docs.oracle.com/javase/6/docs/api/java/lang/Readable.html#read%28java.nio.CharBuffer%29"" rel=""nofollow"">reads</a> from your Readable object. This approach lets you lazily stream data from your array into the Scanner, but at the cost of requiring you to write some code.</p>
","1","3899696"
"<p>See <a href=""http://download-llnw.oracle.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange%28byte[],%20int,%20int%29"" rel=""nofollow noreferrer"">Arrays.copyOfRange</a> for help. You could use this in a loop to split your array into several smaller chunks.</p>
","0","3405195"
"<p>Use <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html#addAll%28java.util.Collection%29"" rel=""noreferrer""><code>ArrayList.addAll()</code></a>. Something like this should work (assuming lists contain <code>String</code> objects; you should change accordingly).</p>

<pre><code>List&lt;String&gt; combined = new ArrayList&lt;String&gt;();
combined.addAll(firstArrayList);
combined.addAll(secondArrayList);
combined.addAll(thirdArrayList);
</code></pre>

<h2>Update</h2>

<p>I can see by your comments that you may actually be trying to create a 2D list. If so, code such as the following should work:</p>

<pre><code>List&lt;List&lt;String&gt;&gt; combined2d = new ArrayList&lt;List&lt;String&gt;&gt;();
combined2d.add(firstArrayList);
combined2d.add(secondArrayList);
combined2d.add(thirdArrayList);
</code></pre>
","50","8625247"
"<p>List and Map are interfaces their implementations are ArrayList and HashMap </p>
","2","5888407"
"<p>What about using java.util.Arrays.asList to simplify merging?</p>

<pre><code>List&lt;String&gt; one = Arrays.asList(""one"",""two"",""three"");
List&lt;String&gt; two = Arrays.asList(""four"",""five"",""six"");
List&lt;String&gt; three = Arrays.asList(""seven"",""eight"",""nine"");

List&lt;List&lt;String&gt;&gt; merged = Arrays.asList(one, two, three);
</code></pre>
","9","8625247"
"<p>Yes. An ArrayList is a concrete implementation of a List, and a HashMap is a concrete implementation of a Map. </p>
","2","5888407"
"<p>If you're asking whether or not HashMap implements the Map interface, like ArrayList implements the List interface, then yes.</p>

<pre><code>public class ArrayList&lt;E&gt;
extends AbstractList&lt;E&gt;
implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable

public class HashMap
extends AbstractMap
implements Map, Cloneable, Serializable
</code></pre>
","6","5888407"
"<p>Also you can use</p>

<pre><code>ArrayList&lt;Word&gt; arr = Collections.list(hw.keys());
</code></pre>

<p>for keys as ArrayList</p>
","9","2915453"
"<pre><code>for(int a=0;a&lt;myArray.size();a++){
        for(int b=a+1;b&lt;myArray.size();b++){
            if(myArray.get(a).equalsIgnoreCase(myArray.get(b))){
                myArray.remove(b); 
                dups++;
                b--;
            }
        }
}
</code></pre>
","1","203984"
"<p>make sure the handset that you have provisioned to is capable of cldc 1.1 which is needed for floating point numbers, you can change how the emulator behaves in its settings to represent a cldc 1.0 device if that is what you are building for</p>
","0","1072615"
"<pre><code>System.arraycopy
</code></pre>

<p>(which gives you the ability to copy arbitrary portions of an array via the <code>offset</code> and <code>length</code> parameters). Or</p>

<pre><code>java.util.Arrays.copyOf
</code></pre>

<p>Which was added in JDK 6 and is a generic method so it can be used:</p>

<pre><code>Integer[] is = new Integer[] { 4, 6 }
Integer[] copy = Arrays.copyOf(is, is.length);
</code></pre>

<p>Or it can narrow a type:</p>

<pre><code>Number[] is = new Number[]{4, 5};
Integer[] copy = Arrays.copyOf(is, is.length, Integer[].class);
</code></pre>

<p>Note that you can also use the <strong><code>clone</code> method</strong> on an array:</p>

<pre><code>Number[] other = is.clone();
</code></pre>
","14","1366303"
"<p>You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array). </p>

<p>For primitive types: </p>

<pre><code>int[] myIntArray = new int[3];
int[] myIntArray = {1, 2, 3};
int[] myIntArray = new int[]{1, 2, 3};

// Since Java 8. Doc of IntStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html

int [] myIntArray = IntStream.range(0, 100).toArray(); // From 0 to 99
int [] myIntArray = IntStream.rangeClosed(0, 100).toArray(); // From 0 to 100
int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).toArray(); // The order is preserved.
int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).sorted().toArray(); // Sort 
</code></pre>

<p>For classes, for example <code>String</code>, it's the same:</p>

<pre><code>String[] myStringArray = new String[3];
String[] myStringArray = {""a"", ""b"", ""c""};
String[] myStringArray = new String[]{""a"", ""b"", ""c""};
</code></pre>

<p>The third way of initializing is useful when you declare the array first and then initialize it. The cast is necessary here.</p>

<pre><code>String[] myStringArray;
myStringArray = new String[]{""a"", ""b"", ""c""};
</code></pre>
","2788","1200621"
"<p>You can use java collections for this. That way you no need to worry about the size being entered by the user. I suggest <a href=""http://guava-libraries.googlecode.com/svn/tags/release03/javadoc/com/google/common/collect/Multimap.html"" rel=""nofollow"">Multimap</a>.</p>
","1","8996612"
"<p>Yes. Just as an ArrayList is an implementation of the List interface, similarly, HashMap is an implementation of the Map interface.</p>
","1","5888407"
"<p>You can use <code>Comparator</code> on the Objects only.You can't on the primitive types.<br>
By using <em>ArrayUtils</em> class you can convert primitive array to wrapper and vice-versa .<br>
So Use Apache Commons <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/ArrayUtils.html"" rel=""nofollow"">ArrayUtils</a> class.  </p>

<pre><code>Integer objectArray = ArrayUtils.toObject(array);   
Arrays.sort(objectArray,new MyComparator());
int[] sortedArray = ArraysUtils.toPrimitive(objectArray);
</code></pre>
","1","18560452"
"<p>My suggestion would be something like a <code>List</code>. So, as an example, if a user enters <code>5</code>, you'd have a <code>List&lt;Object[]&gt;</code> which we could call <code>l</code>. Then you could <code>add</code> a <code>new Object[]</code> for however many times the user entered, which in this case is <code>5</code>. This is an addendum to Pangea's answer, which is actually sufficient and includes a really good suggestion to use <a href=""http://docs.oracle.com/javase/tutorial/collections/intro/index.html"" rel=""nofollow"">Java's Collection Classes</a>. You can read more about <code>Lists</code> and an implementation of a <code>List</code> called <code>LinkedList</code> <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow"">here</a> and <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/LinkedList.html"" rel=""nofollow"">here</a> respectively.</p>
","0","8996612"
"<p>Use the <strong>Arrays.toString()</strong> method on the array.
For example:</p>

<pre><code>int[] arrayOfInts = {1, 2, 3};
Scanner s = new Scanner(Arrays.toString(arrayOfInts));

while (s.hasNext()) {
    System.out.println(s.next());
}
</code></pre>

<p>Will print out:</p>

<pre><code>[1,
2,
3]
</code></pre>
","1","3899696"
"<p>Assumed you want to create <code>5 int</code> arrays of size <code>7</code> you could so:</p>

<pre><code>int a=7;
int b=5;
int name[][] = new int[b][a]; 
</code></pre>
","0","8996612"
"<p>I believe an ArrayList implements the List interface and is a collection of objects which you can access using an index just like an 'array'.</p>

<p>HashMap implements the Map interface and maps keys to values just like a 'hashtable'. </p>
","0","5888407"
"<pre><code>Scanner scan = new Scanner (System.in);

for (int i=0; i&lt;=4, i++){

    System.out.printf(""Enter value at index""+i+"" :"");

    anArray[i]=scan.nextInt();

}
</code></pre>
","-1","2795350"
"<pre><code>ArrayList&lt;Matrices&gt; list = new ArrayList&lt;Matrices&gt;();
list.add( new Matrices(1,1,10) );
list.add( new Matrices(1,2,20) );
</code></pre>
","74","3982550"
"<p>Alternatively,</p>

<pre><code>// Either method works
String arrayName[] = new String[10];
String[] arrayName = new String[10];
</code></pre>

<p>That declares an array called <code>arrayName</code> of size 10 (you have elements 0 through 9 to use).</p>
","27","1200621"
"<p>Use the static <code>List list = Arrays.asList(stringArray)</code> or you could just iterate over the array and add the strings to the list.</p>
","29","6026813"
"<p>No. You can take a guess at a mimetype from the content data itself, but the filename is not in there.</p>
","5","9884908"
"<p>Well, this doesn't require an answer but I think I must make you understand the reason behind this.</p>

<p>All the basic data types or primitive data types can only be compared in the order of their natural ordering. This is enforced by the language specification.</p>

<p><strong>Natural Ordering</strong>: means that the obvious way how a group is arranged in nature. For e.g. if you consider natural numbers it is always true that <code>1 &lt; 2 &lt; 3 &lt; ... &lt; 10</code> and same is the case with other primitives like <code>char</code> etc.</p>

<p>This also makes a lot of sense and helps in optimization, because the primitive data types are used in the language in lot of places (like loop counters, switch statements etc) and the compiler can actually optimize a lot of things if it can assume the natural order of a type of variables.</p>

<p>There are many more points, but I am sure you got the reason why Arrays default sort doesn't provide custom Comparator for primitive data types.</p>
","0","18560452"
"<p>Well, System.arraycopy(src, fromPos, dest, toPos, length) is generally considered faster than Arrays.copyOfRange.</p>

<pre><code>byte[] source = ...read it from somewhere...;
byte[] newArray = new byte[64];
System.arraycopy(source, 0, newArray, 0, 64);
</code></pre>
","2","3405195"
"<pre><code>List&lt;String&gt; strings = Arrays.asList(new String[]{""one"", ""two"", ""three""});
</code></pre>

<p>This is <em>a list view</em> of the array, the list is partly unmodifiable, you can't add or delete elements. But the time complexity is O(1).</p>

<p>If you want a modifiable a List:</p>

<pre><code>List&lt;String&gt; strings = 
     new ArrayList&lt;String&gt;(Arrays.asList(new String[]{""one"", ""two"", ""three""}));
</code></pre>

<p>This will copy all elements from the source array into a new list (complexity: O(n))</p>
","256","6026813"
"<p>The header field that you may be looking for is called <a href=""http://www.ietf.org/rfc/rfc2183.txt"" rel=""nofollow""><code>Content-Disposition</code></a>. If you're downloading an attachment, then there may be a file name in that field:</p>

<pre><code>Content-Disposition: attachment;filename=abc.txt
</code></pre>

<p>But there's no guarantee that you'll have such a file name available. Also, this may only apply to HTTP and E-Mail content. From your question, it's not clear where your data's origin is...</p>
","1","9884908"
"<p>There are various ways in which you can declare an array in Java:</p>

<pre><code>float floatArray[]; // Initialize later
int[] integerArray = new int[10];
String[] array = new String[] {""a"", ""b""};
</code></pre>

<p>You can find more information in the <a href=""http://java.sun.com/docs/books/tutorial/java/nutsandbolts/arrays.html"" rel=""noreferrer"">Sun tutorial</a> site and the <a href=""http://java.sun.com/j2se/1.5.0/docs/api/java/util/Arrays.html"" rel=""noreferrer"">JavaDoc</a>.</p>
","40","1200621"
"<pre><code>import java.util.Collections;

List myList = new ArrayList();
String[] myArray = new String[] {""Java"", ""Util"", ""List""};

Collections.addAll(myList, myArray);
</code></pre>
","21","6026813"
"<pre><code>byte[] bytes = ....;
ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);
baos.write(bytes, 0, bytes.length);
</code></pre>

<p>Method description:</p>

<blockquote>
  <p>Writes len bytes from the specified byte array starting at offset off to this byte array output stream.</p>
</blockquote>
","49","18575480"
"<pre><code>List&lt;String&gt; list = ..;
String[] array = list.toArray(new String[0]);
</code></pre>

<p>For example:</p>

<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;();
//add some stuff
list.add(""android"");
list.add(""apple"");
String[] stringArray = list.toArray(new String[0]);
</code></pre>

<p>The <code>toArray()</code> method without passing any argument returns <code>Object[]</code>. So you have to pass an array as an argument, which will be filled with the data from the list, and returned. You can pass an empty array as well, but you can also pass an array with the desired size.</p>

<p><strong>Important update</strong>: Originally the code above used <code>new String[list.size()]</code>. However, <a href=""http://shipilev.net/blog/2016/arrays-wisdom-ancients/"" rel=""noreferrer"">this blogpost</a> reveals that due to JVM optimizations, using <code>new String[0]</code> is better now.</p>
","1850","4042434"
"<p>You have two choices:</p>

<ul>
<li><code>System.arraycopy(...)</code></li>
<li><code>Array.copyOfRange(...)</code></li>
</ul>

<p>both of them work the same way but while first one only manages copy, second one is meant to be used to allocate the new chunk at the same time.</p>

<p>I benchmarked them with a result that <code>System.arraycopy</code> is faster if you manage to allocate chunks all together before splitting your array but slightly slower if you allocate them whle you copy: in this case you should use <code>Array.copyOfRange</code>.</p>
","1","3405195"
"<pre><code>Type[] variableName = new Type[capacity];

Type[] variableName = {comma-delimited values};



Type variableName[] = new Type[capacity]; 

Type variableName[] = {comma-delimited values};
</code></pre>

<p>is also valid, but I prefer the brackets after the type, because it's easier to see that the variable's type is actually an array.</p>
","130","1200621"
"<pre><code>List &lt;String&gt; list = ...
String[] array = new String[list.size()];
int i=0;
for(String s: list){
  array[i++] = s;
}
</code></pre>
","5","4042434"
"<p>In general, you can use a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow""><code>java.util.List</code></a> when you don't know the size up front.</p>

<pre><code>List&lt;Character&gt; chars = new ArrayList&lt;Character&gt;();
chars.add('f');
chars.add('o');
chars.add('o');
</code></pre>

<p>Depending on your needs, a <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html"" rel=""nofollow""><code>StringBuilder</code></a> might make more sense than a <code>List&lt;Character&gt;</code>.</p>

<pre><code>StringBuilder sb = new StringBuilder();
sb.append('f')
  .append('o')
  .append('o');
</code></pre>

<p><s>If you want to get really slick, use <a href=""http://trove.starlight-systems.com/"" rel=""nofollow"">Trove</a> for its list-of-primitives so you can work with the (third-party equivalent of) a <code>List&lt;char&gt;</code>.</s> nevermind. Trove <a href=""http://trove4j.sourceforge.net/javadocs/index-files/index-17.html"" rel=""nofollow"">does not have</a> a <code>TCharArrayList</code>.</p>
","2","6720108"
"<p>You can't display a ByteArrayOutputStream.  What I suspect you are trying to do is</p>

<pre><code>byte[] bytes = ...
String text = new String(bytes, ""UTF-8""); // or some other encoding.
// display text.
</code></pre>

<p>You can make ByteArrayOutputStream do something similar but this is not obvious, efficient or best practice (as you cannot control the encoding used)</p>
","0","18575480"
"<p>Use <code>get(index)</code>, <code>set(index, object)</code>, <code>insert(index, object)</code> and <code>add(object)</code> methods for this.</p>

<p>Example:</p>

<pre><code>List&lt;String&gt; list0 = new ArrayList&lt;String&gt;();
list0.add(""this"");
list0.add(""is"");
list0.add(""an"");
list0.add(""answer"");

List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
list1.add(list0.get(1));
list1.add(list0.get(3));
list1.insert(1, list0.get(0));
</code></pre>

<p>The resulting list1 will be: ""is"", ""this"", ""answer"".</p>
","0","10151867"
"<p>I find it is helpful if you understand each part:</p>

<pre><code>Type[] name = new Type[5];
</code></pre>

<p><code>Type[]</code> is the <em>type</em> of the <em>variable</em> called name (""name"" is called the <em>identifier</em>).  The literal ""Type"" is the base type, and the brackets mean this is the array type of that base. Array types are in turn types of their own, which allows you to make multidimensional arrays like <code>Type[][]</code> (the array type of Type[]). The keyword <code>new</code> says to allocate memory for the new array.  The number between the bracket says how large the new array will be and how much memory to allocate. For instance, if Java knows that the base type <code>Type</code> takes 32 bytes, and you want an array of size 5, it needs to internally allocate 32 * 5 = 160 bytes.</p>

<p>You can also create arrays with the values already there, such as</p>

<pre><code>int[] name = {1, 2, 3, 4, 5};
</code></pre>

<p>which not only creates the empty space but fills it with those values. Java can tell that the primitives are integers and that there are 5 of them, so the size of the array can be determined implicitly.</p>
","32","1200621"
"<p>Can you use a String or a StringBuilder and then convert it to a char array later?</p>
","0","6720108"
"<p>The <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""nofollow"">Map</a> collection has a <code>keySet()</code> method, and I think that's the closest thing to PHP's associative arrays in Java. </p>
","1","4830955"
"<p>use <code>Intent</code> for passing value to another class(extends activity) <code>intentObj.putExtras()</code> will help.</p>

<p>to put:</p>

<pre><code>ArrayList&lt;String&gt; arrayList= new ArrayList&lt;String&gt;();
arrayList.add(""hello"");
arrayList.add(""there"");
Intent intent = new Intent(getApplicationContext(), secondClass.class);
        intent.putStringArrayListExtra(""pass_list"", arrayList);
        startActivity(intent);
</code></pre>

<p>to get</p>

<pre><code>ArrayList&lt;String&gt; arrayList= getIntent().getStringArrayListExtra(""pass_list"");
</code></pre>
","3","10151867"
"<p>Also, in case you want something more dynamic there is the List interface.  This will not perform as well, but is more flexible:</p>

<pre><code>List&lt;String&gt; listOfString = new ArrayList&lt;String&gt;();

listOfString.add(""foo"");
listOfString.add(""bar"");

String value = listOfString.get(0);
assertEquals( value, ""foo"" );
</code></pre>
","26","1200621"
"<ul>
<li>Create an array of the right size (by going through and summing the lengths of all the source arrays)</li>
<li>Repeatedly call <code>System.arraycopy</code> to copy one source array at a time into the target array, updating the place where you copy it to on each iteration.</li>
</ul>

<p>So something like:</p>

<pre><code>public static double[] Combine(double[][] arrays)
{
    int totalLength = 0;
    for (double[] source : arrays)
    {
        totalLength += source.length;
    }
    double[] ret = new double[totalLength];
    int index = 0;
    for (double[] source : arrays)
    {
        System.arraycopy(source, 0, ret, index, source.length);
        index += source.length;
    }
    return ret;
}
</code></pre>
","4","1716110"
"<p>Well, in Java I think the only way to have non integer keys is to use the Map class:</p>

<p><a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/api/java/util/Map.html</a></p>

<p>And as you can see it has a keySet function.</p>
","0","4830955"
"<p>I hope I understand your question correctly.</p>

<p>An ArrayList is a list of Object types. If you wish to add an ArrayList as the item in your ArrayList, then you can do this.</p>

<p>An example</p>

<pre><code>ArrayList list = new ArrayList();

ArrayList list2 = new ArrayList();
ArrayList list3 = new ArrayList();

list.add(list2);
list.add(list3);
</code></pre>

<p>This will result in your first ArrayList (list) containing two arraylists in position 0 and 1.</p>

<p>If however you are looking to add the contents of several ArrayLists to a single list of elements, then you use addAll on the  ArrayList. Such as</p>

<pre><code>ArrayList consolidatedList = new ArrayList();
list.addAll(list2);
list.addAll(list3);
</code></pre>
","3","4042849"
"<p>A <em>File object</em> doesn't contain the content of the file. It is only a pointer to the file on your hard drive (or other storage medium, like an SSD, USB drive, network share). So I think what you want is writing it to the hard drive.</p>

<p>You have to write the file using some classes in the Java API</p>

<pre><code>BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(yourFile));
bos.write(fileBytes);
bos.flush();
bos.close();
</code></pre>

<p>You can also use a Writer instead of an OutputStream. Using a writer will allow you to write text (String, char[]).</p>

<pre><code>BufferedWriter bw = new BufferedWriter(new FileWriter(yourFile));
</code></pre>

<p>Since you said you wanted to keep everything in memory and don't want to write anything, you might try to use <code>ByteArrayInputStream</code>. This simulates an InputStream, which you can pass to the most of the classes.</p>

<pre><code>ByteArrayInputStream bais = new ByteArrayInputStream(yourBytes);
</code></pre>
","89","6828634"
"<p>You can use Collection class's addAll method to add all elements of an arraylist to another.</p>

<p>See the documentation <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#addAll%28java.util.Collection%29"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#addAll%28java.util.Collection%29</a></p>
","0","10151867"
"<p>Please refer to this article: </p>

<p><a href=""http://www.mkyong.com/java/how-to-read-file-from-java-bufferedreader-example/"" rel=""nofollow"">http://www.mkyong.com/java/how-to-read-file-from-java-bufferedreader-example/</a></p>

<p>specifically:</p>

<pre><code>    BufferedReader br = null;

    try {

        String sCurrentLine;

        br = new BufferedReader(new FileReader(""C:\\testing.txt""));

        while ((sCurrentLine = br.readLine()) != null) {
            System.out.println(sCurrentLine);
        }

    } catch (IOException e) {
        e.printStackTrace();
    } 
</code></pre>
","1","19851086"
"<p>The <code><a href=""http://java.sun.com/j2se/1.5.0/docs/api/index.html?java/lang/Object.html"" rel=""nofollow noreferrer"">toArray()</a></code> method sounds like a good choice.</p>

<p><strong>Update:</strong> Although, as folks have kindly pointed out, this works with ""boxed"" values. So a plain <code>for</code>-loop looks like a very good choice, too.</p>
","4","1565483"
"<p>Use a FileOutputStream.</p>

<pre><code>FileOutputStream fos = new FileOutputStream(objFile);
fos.write(objFileBytes);
fos.close();
</code></pre>
","5","6828634"
"<p><a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html#keySet"" rel=""nofollow"">http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html#keySet</a>()</p>

<p>This returns you a Java Set of the keys :)</p>

<p>Another way is to iterate the Map and store the keys in Array/ArrayList</p>
","0","4830955"
"<p>I didn't actually get what you want to do. Do you want to add all elements from different ArrayLists to one resulting ArrayList? If so, use <code>ArrayList#addAll(Collection collection)</code> method.</p>

<p>If you want an ArrayList of ArrayLists, use <code>ArrayList#add(Object o)</code> method. You can also parameterize your resulting ArrayList like this:</p>

<p><code>List&lt;ArrayList&gt; res = new ArrayList&lt;ArrayList&gt;()</code></p>
","1","4042849"
"<p>You can use this method from the Guava library, which is open-source and will have an actual binary release probably later this month:
<a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/primitives/Doubles.html#concat(double[]...)"" rel=""nofollow noreferrer"">Doubles.concat(double[]...)</a></p>
","1","1716110"
"<p>Something like:</p>

<pre><code>Class[] classes = new Class[] {Class1.class, Class2.class};
</code></pre>

<p>Though I'm not quite sure what your question is...</p>
","2","11285573"
"<p>You can always utilize the <code><a href=""http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html#subList%28int,%20int%29"" rel=""nofollow"">subList(int, int)</a></code> method</p>

<pre><code>list.subList(100,list.size()).iterator();
</code></pre>
","3","20140744"
"<p>Let me see if got this right, i know that php arrays have keys and values, nevertheless in java thins does not work like that arrays and list are index base, this means that your keys are just index in natural order. if you can shared some code to look what do you exactly need that would be perfect, but in the mean time you might use <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""nofollow"">Map</a></p>

<pre><code> Map&lt;String,String&gt; hashMap = new HashMap&lt;String,String&gt;();
 hashMap.put(""Key1"",""Value1"");
 hashMap.put(""Key2"",""Value2"");
 hashMap.put(""Key3"",""Value3"");
 hashMap.put(""Key4"",""Value4"");
</code></pre>

<p>then you can use <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html#keySet%28%29"" rel=""nofollow"">keySet()</a> method to get the keys.</p>
","0","4830955"
"<pre><code>byte[] byteArray = new byte[byteList.size()];
for (int index = 0; index &lt; byteList.size(); index++) {
    byteArray[index] = byteList.get(index);
}
</code></pre>

<p>You may not like it but that’s about the only way to create a Genuine™ Array® of <code>byte</code>.</p>

<p>As pointed out in the comments, there are other ways. However, none of those ways gets around a) creating an array and b) assigning each element. This one uses an <a href=""http://java.sun.com/javase/6/docs/api/java/util/Iterator.html"" rel=""noreferrer"">iterator</a>.</p>

<pre><code>byte[] byteArray = new byte[byteList.size()];
int index = 0;
for (byte b : byteList) {
    byteArray[index++] = b;
}
</code></pre>
","15","1565483"
"<pre><code>import java.util.Scanner;

public class Main {
    /**
     * @param args
     */
    public static void main(String[] args) {
        Scanner in=new Scanner (System.in);
        int num[]=new int[10];
        int average=0;
        int i=0;
        int sum=0;

        for (i=0;i&lt;num.length;i++) {
            System.out.println(""enter a number"");
            num[i]=in.nextInt();
            sum=sum+num[i];
        }
        average=sum/10;
        System.out.println(""Average=""+average);
    }
}
</code></pre>
","3","2795350"
"<pre><code>public void writeToFile(byte[] data, String fileName) throws IOException{
  FileOutputStream out = new FileOutputStream(fileName);
  out.write(data);
  out.close();
}
</code></pre>
","27","6828634"
"<p>Yes you can add a ""group of ArrayLists"" into a single array list. If you want to ""recognize"" your ArrayLists, I would recommend using a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""nofollow"">Map</a>, a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/HashMap.html"" rel=""nofollow"">HashMap</a> for example.</p>

<p>Please also think about accepting answers to your other questions, and post code in your questions, you will get better help and people will hate you less.</p>
","0","4042849"
"<pre><code>String [] splits = string.split("""")
</code></pre>
","3","2099662"
"<p>Can you use it? Ofc.
Example:</p>

<pre><code>public static &lt;T&gt; T[] mergeArrays(T[]... arrays) {
    ArrayList&lt;T&gt; arrayList = new ArrayList&lt;T&gt;();

    for (T[] array : arrays) {
        arrayList.addAll(Arrays.asList(array)); //we steal the reflection from core libs
    }
    return arrayList.toArray(arrays[0]);//we steal the reflection from core libs
}
</code></pre>

<p>Is it a good idea? No. This code is just me playing around with generics. It led to a dark ally. You are better of using collections. They do what you want, and the syntax is prettier in the long run.</p>
","1","1114400"
"<p>Why don't you just try it out?</p>

<pre><code>public interface Example {
    int[] values = { 2, 3, 5, 7, 11 };
}
</code></pre>
","4","11948148"
"<p>Ok, you asked for it:</p>

<pre><code>File file = new File(""myfile.txt"");

// convert File to byte[]
ByteArrayOutputStream bos = new ByteArrayOutputStream();
ObjectOutputStream oos = new ObjectOutputStream(bos);
oos.writeObject(file);
bos.close();
oos.close();
byte[] bytes = bos.toByteArray();

// convert byte[] to File
ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
ObjectInputStream ois = new ObjectInputStream(bis);
File fileFromBytes = (File) ois.readObject();
bis.close();
ois.close();

System.out.println(fileFromBytes);
</code></pre>

<p>But this is pointless. Please specify what you are trying to achieve.</p>
","4","6828634"
"<p>There are many ways to do this. In this examples I assume your list holds Integers.</p>

<ol>
<li><p>You can use ListIterator </p>

<pre><code>ListIterator&lt;Integer&gt; it = list.listIterator(100);
while (it.hasNext()) {
    System.out.println(it.next());
}
</code></pre>

<p>or with <code>for</code> (to keep iterator scoped inside loop)</p>

<pre><code>for (ListIterator&lt;Integer&gt; lit = list.listIterator(100); lit.hasNext();) {
    System.out.println(lit.next());
}
</code></pre></li>
<li><p>or normal for loop but start from <code>i=100</code></p>

<pre><code>for (int i=100; i&lt;list.size(); i++){
    System.out.println(list.get(i));
}
</code></pre></li>
<li><p>or just create subList and iterate over it like you normally do</p>

<pre><code>for (Integer i : list.subList(100, list.size())){
    System.out.println(i);
}
</code></pre></li>
</ol>
","7","20140744"
"<p>Try <a href=""http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.html"" rel=""noreferrer"">commons-codec</a> with <code>public static byte[] encodeBase64(byte[] binaryData)</code>.</p>
","8","7028615"
"<p>To create such data you may use the JDK built-in class <a href=""http://www.docjar.com/docs/api/sun/misc/BASE64Encoder.html"" rel=""nofollow"">sun.misc.BASE64Encoder</a>. Unfortunately it's not public API since nobody cared to provide a BASE64 en-/decoder in the public API - but people often use this class to circumvent that disadvantage.</p>

<p><a href=""http://www.w3.org/TR/xmlschema-2/#base64Binary"" rel=""nofollow"">base64Binary</a> is an XML Schema data type, referring to arbitrary binary data that is to be encoded using <a href=""http://en.wikipedia.org/wiki/Base64"" rel=""nofollow"">BASE64 encoding</a> to retrieve a ""safe"" string representation of that data - e.g. for embedding binary data in XML, mails etc.</p>

<p>W3C Definition:</p>

<blockquote>
  <p>base64Binary represents Base64-encoded arbitrary binary data. The ·value space· of base64Binary is the set of finite-length sequences of binary octets. For base64Binary data the entire binary stream is encoded using the Base64 Alphabet in [RFC 2045]. </p>
</blockquote>
","4","7028615"
"<p>The Java <em>language</em> does not limit the number of dimensions, but the Java <em>VM</em> spec limits the number of dimensions to 255.</p>

<p>For example, the following code will fail to compile:</p>

<pre><code>class Main {
    public static void main(String[] args) {
        final int[][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][]
                 [][][][][][][][][][][][][][][][] x;
    }
}
</code></pre>

<p>with error:</p>

<pre><code>1.java:18: error: array type has too many dimensions
                 [][][][][][][][][][][][][][][][] x;
                                                  ^
1 error
</code></pre>

<p>(Ref: <a href=""https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.1"" rel=""noreferrer"">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.4.1</a> ""An array type descriptor is valid only if it represents 255 or fewer dimensions."")</p>
","41","4060538"
"<p>Well, the <a href=""http://java.sun.com/javase/6/docs/api/java/lang/String.html#getChars%28int,%20int,%20char[],%20int%29"" rel=""nofollow noreferrer"">String.getChars()</a> function will give you a char[] array with one character per array element. </p>

<p>So you should be able to do: </p>

<pre><code>char[] k = new char[myString.length()]
myString.getChars(0,myString.length(),k,0);
</code></pre>

<p>If you need to convert <b>to</b> an array of integers, you can add</p>

<pre><code>int[] i = new int[k.length]
for(int j = 0; j &lt; k.length; j++) i[j] = k[j] - '0';
</code></pre>

<p>If you need to convert <b>from</b> an integer first, just use String <code>myString = Integer.toString(myInt)</code></p>
","0","2099662"
"<p>Using <code><a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/primitives/Bytes.html"" rel=""nofollow noreferrer"">Bytes</a>.<a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/primitives/Bytes.html#toArray(java.util.Collection)"" rel=""nofollow noreferrer"">toArray</a>(Collection&lt;Byte&gt;)</code> (from Google's <a href=""http://code.google.com/p/guava-libraries/"" rel=""nofollow noreferrer"">Guava</a> library.)</p>

<p>Example:</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.google.common.primitives.Bytes;

class Test {
    public static void main(String[] args) {
        List&lt;Byte&gt; byteList = new ArrayList&lt;Byte&gt;();
        byteList.add((byte) 1);
        byteList.add((byte) 2);
        byteList.add((byte) 3);
        byte[] byteArray = Bytes.toArray(byteList);
        System.out.println(Arrays.toString(byteArray));
    }
}
</code></pre>

<p>Or similarly, using <a href=""http://pcj.sourceforge.net/"" rel=""nofollow noreferrer"">PCJ</a>:</p>

<pre><code>import bak.pcj.Adapter;

// ...

byte[] byteArray = Adapter.asBytes(byteList).toArray();
</code></pre>
","2","1565483"
"<p>Not sure what you meant by resized and merged </p>

<p>from the documentation:</p>

<blockquote>
  <p><strong>byte:</strong> The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The byte data type can be useful for saving memory in large arrays, where the memory savings actually matters. They can also be used in place of int where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation.</p>
</blockquote>

<p>Edit: If by resized/merged you are talking about the array itself, there's nothing special about a byte array compared to other arrays.</p>
","6","7232111"
"<p>See <a href=""https://stackoverflow.com/questions/2883355/how-to-render-pdf-in-android"">How to render PDF in Android</a>. It looks like you may not have any option except saving the content to a (temporary) on the SD file in order to be able to display it in the pdf viewer.</p>
","1","6828634"
"<p>Keep dividing by 10 in a loop and take remainder : <code>n % 10;</code></p>
","3","2099662"
"<p>There are two ways to allocate an array.</p>

<p>A) allocate an empty array of a given size:</p>

<pre><code>byte[] ba1 = new byte[18]; // 18 elements
</code></pre>

<p>B) allocate an array by specifying the contents</p>

<pre><code>byte[] ba2 = {1,2,3,4,5}; // 5 elements
</code></pre>
","3","7232111"
"<p>Try like this to iterate over a range:</p>

<pre><code>for(int i=100; i&lt; myArrayLst.size(); i++){
    System.out.println(myLst.get(i));
  }
</code></pre>
","1","20140744"
"<p>Yes, but only if it's static. In fact, any variables declared in an interface will automatically be static.</p>

<pre><code>public interface ITest {
    public static String[] test = {""1"", ""2""}; // this is ok
    public String[] test2 = {""1"", ""2""}; // also ok, but will be silently converted to static by the compiler
}
</code></pre>

<p>You can't have static initializers though.</p>

<pre><code>public interface ITest {
    public static String[] test;
    static {
        // this is not OK. No static initializers allowed in interfaces.
    }
}
</code></pre>

<p>Obviously, you can't have constructors in interfaces.</p>
","2","11948148"
"<p>To guarantee the correct order for each array of Keys and Values, use this (the other answers use individual <code>Set</code>s which offer no guarantee as to order.</p>

<pre><code>Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
String[] keys = new String[map.size()];
Object[] values = new Object[map.size()];
int index = 0;
for (Map.Entry&lt;String, Object&gt; mapEntry : map.entrySet()) {
    keys[index] = mapEntry.getKey();
    values[index] = mapEntry.getValue();
    index++;
}
</code></pre>
","30","1090556"
"<p>Use a <code>ListIterator</code>. And <strong>read the API documentation</strong>, thank you.</p>

<pre><code>ListIterator&lt;YourType&gt; iter = list.listIterator(start);
</code></pre>
","0","20140744"
"<p>Yes, it's possible. See the code:</p>

<pre><code>public interface Test {
  int[] a= {1,2,3};
}

public class Main {
  public static void main(String[] args) {

    int i1 = Test.a[0];
    System.out.println(i1);
  }
}
</code></pre>
","2","11948148"
"<p>Use <code>ListIterator</code></p>

<pre><code>ListIterator&lt;Type&gt; iter = list.listIterator(start);
</code></pre>
","0","20140744"
"<p>Make a loop for each array item. Those for which <code>item &amp; 1 == 1</code> are odd.</p>
","-1","1939004"
"<blockquote>
  <p>Simple question - Is it posible to initalize array in an interface?</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>This works but i want to initialize array by ""for"" intsruction. Ok thanks for help </p>
</blockquote>

<p>That's not a simple question ;)</p>

<p>You can't do this strictly because you can't add a static block to an interface. But you can have a nested <code>class</code> or <code>enum</code>.</p>

<p>IMHO, that could be more confusing than useful as follows:</p>

<pre><code>public interface I {
    int[] values = Init.getValue();

    enum Init {;
        static int[] getValue() {
            int[] arr = new int[5];
            for(int i=0;i&lt;arr.length;i++)
                arr[i] = i * i;
            return arr;
        }
    }
}
</code></pre>
","6","11948148"
"<pre><code>    int[] longArray = { 1, 3, 2 };
    int[] shortArray = { 1, 2 };

    //Check which array is longer, if b longer than a then swap

    boolean found = false;
    int odd = 0;

    for (int i : longArray) {
        for (int j : shortArray) {
            if (i == j)
                found = true;
        }
        if (!found)
            odd = i;
        found = false;
    }
    System.out.println(odd);
</code></pre>
","1","1939004"
"<p>If you are talking about Set Comparisons, have a look at <a href=""https://stackoverflow.com/questions/393968/java-is-there-an-easy-quick-way-to-and-or-or-xor-together-sets"">java-is-there-an-easy-quick-way-to-and-or-or-xor-together-sets</a></p>

<p>This SO question was talking in terms of the Set interface, but the List interface also inherits the relevant methods from Collection, so copying your arrays to ArrayList objects makes it easy.</p>

<p>If you want to keep it purely at the native array level, you might want to do something like:</p>

<pre><code> public int[] findOddElement(int[] fromArray, int[] secondArray){
  int[] result = new int[fromArray.length];
  int resPointer = 0;
  for (int i = 0;i &lt; fromArray.length;i++){
   boolean notFound = true;
   for (int j = 0; j &lt; secondArray.length; j++) {
    if (fromArray[i] == secondArray[j]) {
     notFound = false;
     break;
    }
   }
   if (notFound){
    result[resPointer] = fromArray[i];
    resPointer++;
   }
  }
  if (resPointer &gt; 0 &amp;&amp; resPointer &lt; fromArray.length ) {
   int[] newResult = new int[resPointer];
   for (int i = 0;i &lt; resPointer; i++) {
    newResult[i] = result[i];

   }
   return newResult;
  }
  return result;
 }
</code></pre>
","0","1939004"
"<p>If it's a string, then you can just take the individual characters with <code>getChars()</code>.</p>

<p>If it's a number then you just need to loop and use each digit individually. To start from the end you can iteratively get the last digit by <code>number % 10</code> and remove it with <code>number / 10</code>. If you start with the first digits, then you can get the digit with <code>number / 100</code>, <code>number / 10</code>, etc. and remove it with <code>number % 100</code>, <code>number % 10</code>, etc.</p>

<p>I'm sure you can convert that description into Java code. I'm not convinced that simply posting a bunch of code here actually helps you in the long term.</p>
","1","2099662"
"<p>The size would be a byte per element.</p>

<p>They can not be re-sized. However you can merge them yourself using System.arrayCopy() by creating a new array and copying your source arrays into the new array.</p>

<p>Edit 1:</p>

<p>There is also an 8-byte overhead for the object header and a 4-byte overhead for the array length, for a total overhead of 12 bytes. So small arrays are relatively expensive.</p>

<p>Check out <a href=""http://trove.starlight-systems.com/"" rel=""nofollow"">GNU Trove</a> and <a href=""http://fastutil.dsi.unimi.it/"" rel=""nofollow"">Fastutil</a>. They are libraries that make working with primitive collections easier.</p>

<p>Edit 2:</p>

<p>I read in one of your response that you're doing object serialization. You might be interested in ByteBuffers. Those make it easy to write out various primitive types to a wrapped array and get the resulting array. Also check out <a href=""http://code.google.com/p/protobuf/"" rel=""nofollow"">Google protocol buffers</a> if you want easily serialized structured data types.</p>
","2","7232111"
"<p>This is how I do it.</p>

<pre><code>private String join(String[] input, String delimiter)
{
    StringBuilder sb = new StringBuilder();
    for(String value : input)
    {
        sb.append(value);
        sb.append(delimiter);
    }
    int length = sb.length();
    if(length &gt; 0)
    {
        // Remove the extra delimiter
        sb.setLength(length - delimiter.length());
    }
    return sb.toString();
}
</code></pre>
","4","1515437"
"<p>Firstly, I agreed with existing answers.</p>
<p>Further, I don’t think it’s a good idea to define data in an interface.
See &quot;Effective Java&quot;:</p>
<blockquote>
<p>Item 19: Use interfaces only to define types</p>
<p>The constant interface pattern is a poor use of interface.</p>
</blockquote>
<p>To export constants in interface is bad idea.</p>
","1","11948148"
"<p>Using <code>System.arraycopy</code> takes advantage of the underlying hardware to perform the array copy as efficiently as possible.</p>

<p>In the context of the question you would need to call <code>System.arraycopy</code> twice; e.g.</p>

<pre><code>int[] dest = new int[10];
int[] src1 = new int[5];
int[] src2 = new int[5];

// Populate source arrays with test data.
for (int i=0; i&lt;5; ++i) {
  src1[i] = i;
  src2[i] = i + 100;
}

System.arraycopy(src1, 0, dest, 0, src1.length);
System.arraycopy(src2, 0, dest, src1.length, src2.length);
</code></pre>
","0","4254868"
"<p>There is a way to do that using Java 7, but it is kind of clumsy (um tanto ""desajeitado""):  </p>

<ul>
<li>write the bytes to a (temporary) file,  </li>
<li>use <code>Files.probeContentType(Path)</code> to check the contents of that file</li>
</ul>

<p>if the bytes came from a file you could use probeContentType directly on it.  </p>

<hr>

<p>EDIT:<br>
not very useful, at least on Windows: <code>probeContentType</code> seams to primarily use the file extension to determine the file type [:-|</p>
","1","8000243"
"<p>The easiest way would be:</p>

<pre><code>String[] myArray = ...;
List&lt;String&gt; strs = Arrays.asList(myArray);
</code></pre>

<p>using the handy <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html"" rel=""noreferrer"">Arrays</a> utility class. Note, that you can even do</p>

<pre><code>List&lt;String&gt; strs = Arrays.asList(""a"", ""b"", ""c"");
</code></pre>
","11","11986593"
"<p>You can easily put them into a <code>Hashtable</code> of <code>int</code> -> <code>float</code>.  The following method will use their index in the array as the key.</p>

<pre><code>float[] arr;
Hashtable&lt;Integer, Float&gt; table = new Hashtable&lt;Integer, Float&gt;(arr.length);
for (int i = 0; i &lt; arr.length; i++) {
    table.put(i, arr[i]);
}
</code></pre>
","4","4228606"
"<pre><code>    byte ch;
    try {
      is = new DataInputStream(new FileInputStream(""fileName.dat""));
      while (true) { 
        ch = is.readByte();
   // put here in any byte array ...
        System.out.flush();
      }
    } 
</code></pre>
","0","7328491"
"<pre><code>    int[] longArray = { 1, 3, 2 };
    int[] shortArray = { 1, 2 };

    //Check which array is longer, if b longer than a then swap

    for (int x:longArray){
        set.add(x);
    }
    for (int x:shortArray){
        if (set.contains(x))
           set.remove(x);
    }
    //odd numbers
    for (Object i:set.toArray())
        System.out.println(i+"","");
</code></pre>

<p>I put two answers for the voting, the previous is nested loops and might be slow for very long arrays. In the next solution some might dont prefer the TreeSet.</p>
","3","1939004"
"<p>You can use [System.arraycopy][1] as shown <a href=""http://download.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""nofollow"">here</a>.</p>

<p>[1]: <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/lang/System.html#arraycopy(java.lang.Object"" rel=""nofollow"">http://download.oracle.com/javase/1.4.2/docs/api/java/lang/System.html#arraycopy(java.lang.Object</a>, int, java.lang.Object, int, int)</p>
","0","4254868"
"<pre><code>FileInputStream fis = new FileInputStream(""your file name"");
byte[] bytes = new byte[100]; // replace 100 with the desired size, of course
int offset = 0;               // which element to stuff the byte into  

fis.read(bytes, offset, 1);   // the 1 is how many bytes to read
</code></pre>
","1","7328491"
"<p>System.out.println(""Oh cool, "" + petName[i] + "" is a very unique name!"");</p>
","0","20478607"
"<p>Hashtable implements Map, so you would need to pair every float with some key. </p>
","0","4228606"
"<pre><code>java.util.Arrays.asList(new String[]{""a"", ""b""})
</code></pre>
","2","11986593"
"<p>By creating an unmodifiable list out of it:</p>

<pre><code>List&lt;Object&gt; dontModify = Collections.unmodifiableList(originalList);
</code></pre>
","4","7978108"
"<p>The easiest way is through  </p>

<pre><code>Arrays.asList(stringArray);
</code></pre>
","1","11986593"
"<p>It depends on the exact requirements:</p>

<ul>
<li><code>Collections.unmodifiableList(arrayList)</code> gives you an unmodifiable view of the original list - that's probably what you need</li>
<li>guava's <a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/ImmutableList.Builder.html"" rel=""nofollow""><code>ImmutableList</code></a> makes a list that is immutable (and not a view) (you'd have to copy the <code>ArrayList</code> elements to the immutable list)</li>
</ul>
","2","7978108"
"<p>An array cannot directly correspond to a Map. It can correspond to a set.</p>

<pre><code>new HashSet(Arrays.asList(array))
</code></pre>
","3","4228606"
"<p>An alternative to CrackerJacks suggestion, if you want the HashMap to maintain order you could consider using a LinkedHashMap instead. As far as im aware it's functionality is identical to a HashMap but it is FIFO so it maintains the order in which items were added.</p>
","12","1090556"
"<p>You can use <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#nCopies%28int,%20T%29"" rel=""noreferrer""><code>Collections.nCopies</code></a>.</p>

<p>Note however that the list returned is immutable. In fact, the docs says ""<em>it the newly allocated data object is tiny (it contains a single reference to the data object)</em>"".</p>

<p>If you need a mutable list, you would do something like</p>

<pre><code>List&lt;String&gt; hellos = new ArrayList&lt;String&gt;(Collections.nCopies(1000, ""Hello""));
</code></pre>

<p>If you want 1000 distinct objects, you can use</p>

<pre><code>List&lt;YourObject&gt; objects = Stream.generate(YourObject::new)
                                 .limit(1000)
                                 .collect(Collectors.toList());
</code></pre>

<p>Again, there is not guarantees about the capabilities of the resulting list implementation. If you need, say an <code>ArrayList</code>, you would do</p>

<pre><code>                                 ...
                                 .collect(ArrayList::new);
</code></pre>
","18","8267348"
"<p>Given the OP's clarification of his/her requirements in jjnguy's answer, here's an <code>O(n)</code> (amortized) way to count occurrences of unique values in a float array:</p>

<pre><code>float[] values;
Map&lt;Float, Integer&gt; occurrences = new HashMap&lt;Float, Integer&gt;();
for ( float f : values ) {
    int count = occurrences.containsKey(f) ? occurrences.get(f) : 0;
    occurrences.put(f, count+1);
}

//then find multiple occurrences by finding entries with a value &gt; 0
for ( Entry&lt;Float, Integer&gt; entry : occurrences.values() ) {
    if ( entry.getValue() &gt; 1 ) {
       System.out.println(""Duplicate: "" + entry.getKey());
    }
}
</code></pre>

<p>In practice it's usually smelly to use a float as a key to anything, or to use a float in a way that pretends it's a discrete value.  Floating point types are typically used to simulate ""continuous"" values, where for all intents and purposes 7.000000000012 should be considered the same as 7.000000000013.</p>
","0","4228606"
"<p>My reputation doesn't allow me to comment on Adamski's answer, but there is an error on this line:</p>

<pre><code> System.arraycopy(src2, 0, dest, src1.length - 1, src2.length);
</code></pre>

<p>With <em>src1.length - 1</em> as an argument to <em>destPos</em>, you overwrite the last element copied from the <em>src1</em> array. In this case you overwrite the element on index 4, which is the 5th element of the array.</p>

<p>This code might be easier to understand:</p>

<pre><code>    int[] array1 = { 1, 2, 3 };
    int[] array2 = { 4, 5, 6, 7 };
    int[] array3 = new int[ array1.length + array2.length ];

    System.arraycopy( array1, 0, array3, 0, array1.length );
    System.arraycopy( array2, 0, array3, array1.length, array2.length );

    for (int i = 0; i &lt; array3.length; i++) {
        System.out.print( array3[i] + "", "" );
    }
</code></pre>
","6","4254868"
"<p>That depends on what the target server accepts. There is no definitive standard for this. See also a.o. <a href=""http://en.wikipedia.org/wiki/Query_string#Web_forms"" rel=""noreferrer"">Wikipedia: Query string</a>:</p>

<blockquote>
  <p>While there is no definitive standard, most web frameworks allow multiple values to be associated with a single field (e.g. <code>field1=value1&amp;field1=value2&amp;field2=value3</code>).<sup><a href=""http://en.wikipedia.org/wiki/Query_string#cite_note-4"" rel=""noreferrer"">[4]</a><a href=""http://en.wikipedia.org/wiki/Query_string#cite_note-5"" rel=""noreferrer"">[5]</a></sup></p>
</blockquote>

<p>Generally, when the target server uses a <strong>strong typed</strong> programming language like Java (<a href=""https://stackoverflow.com/tags/servlets/info"">Servlet</a>), then you can just send them as multiple parameters with the same name. The API usually offers a dedicated method to obtain multiple parameter values as an array.</p>

<pre><code>foo=value1&amp;foo=value2&amp;foo=value3
</code></pre>



<pre><code>String[] foo = request.getParameterValues(""foo""); // [value1, value2, value3]
</code></pre>

<p>The <code>request.getParameter(""foo"")</code> will also work on it, but it'll return only the first value.</p>

<pre><code>String foo = request.getParameter(""foo""); // value1
</code></pre>

<p>And, when the target server uses a <strong>weak typed</strong> language like PHP or RoR, then you need to suffix the parameter name with braces <code>[]</code> in order to trigger the language to return an array of values instead of a single value.</p>

<pre><code>foo[]=value1&amp;foo[]=value2&amp;foo[]=value3
</code></pre>



<pre><code>$foo = $_GET[""foo""]; // [value1, value2, value3]
echo is_array($foo); // true
</code></pre>

<p>In case you still use <code>foo=value1&amp;foo=value2&amp;foo=value3</code>, then it'll return only the first value.</p>

<pre><code>$foo = $_GET[""foo""]; // value1
echo is_array($foo); // false
</code></pre>

<p>Do note that when you send <code>foo[]=value1&amp;foo[]=value2&amp;foo[]=value3</code> to a Java Servlet, then you can still obtain them, but you'd need to use the exact parameter name including the braces.</p>

<pre><code>String[] foo = request.getParameterValues(""foo[]""); // [value1, value2, value3]
</code></pre>
","156","3061273"
"<p>You don't give the <code>ArrayList</code> to anything you don't trust - instead, you use <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Collections.html#unmodifiableList%28java.util.List%29"" rel=""nofollow""><code>Collections.unmodifiableList</code></a> to create an immutable wrapper around the existing list, and give untrusted code that instead.</p>

<p>Note that this only gives a <em>wrapper</em> around the existing list - anything with access to the original list can still modify it. If you want to create a completely immutable list, you can either use a dedicated class (e.g. <a href=""http://docs.guava-libraries.googlecode.com/git-history/v10.0.1/javadoc/com/google/common/collect/ImmutableList.html"" rel=""nofollow""><code>ImmutableList</code></a> in <a href=""http://code.google.com/p/guava-libraries/"" rel=""nofollow"">Guava</a>) or create a copy of the original list, wrap that copy using <code>Collections.unmodifiableList</code>, and throw away the reference to the mutable list (so only the immutable wrapper knows about it).</p>
","4","7978108"
"<p>Fastest : <code>int[] myList = new int[1000]</code> will contain 1000 elements equal to zero. But I'm sure it doesn't suit your needs. Tell us more of what you need and I might be able to help :)</p>
","0","8267348"
"<p>Iterate throughout your list of 100 chars and divide it amongst the 10*10,
Modulus (%) will probably be very useful.</p>

<p>You could use 2 nested for loops to assign the chars of the array to the appropriate element.</p>
","1","3981821"
"<p>If a list is declared final as follows:</p>

<pre><code>public final List myList = new ArrayList();
</code></pre>

<p>there's nothing to stop modifications to the list:</p>

<pre><code>myList.add(""value"");
</code></pre>

<p>However, the following would not be possible:</p>

<pre><code>myList = new ArrayList();
myList = someOtherList;
</code></pre>
","3","1672259"
"<p>Given:</p>

<pre><code>String[] a = new String[] { ""Hello"", ""World"", ""!"" };
</code></pre>

<p>Then as an alternative to coobird's answer, where the glue is "", "":</p>

<pre><code>Arrays.asList(a).toString().replaceAll(""^\\[|\\]$"", """")
</code></pre>

<p>Or to concatenate with a different string, such as "" &amp;amp; "".</p>

<pre><code>Arrays.asList(a).toString().replaceAll("", "", "" &amp;amp; "").replaceAll(""^\\[|\\]$"", """")
</code></pre>

<p>However... this one ONLY works if you know that the values in the array or list DO NOT contain the character string "", "".</p>
","9","1515437"
"<p>You need to use the array index to fetch the value. </p>

<p>Just as you are storing the value in the array using indexes using <code>petName[i] = JOptionPane.showInputDialog(""What is your pet called?"");</code>, you need to retrieve values from the array using  Use <code>petName[index]</code></p>
","1","20478607"
"<p>There is a simple solution for it. You make use of the Random() class or you use Math.random() to iterate through your string as an array of characters. Then you just choose random bits of it, until it's gone.</p>

<p>All you have to make sure of though, is that the arrays size is always checked so that you don't hit an OutOfBoundsException </p>
","0","10745656"
"<p>You can store the array in the user session in servlet 1 and read it from servlet 2 getting it from the user session. Make sure you delete the array from session in servlet 2.</p>
","1","4321151"
"<p>Here you go</p>

<pre><code>char[] chars = (""01234567890123456789012345678901234567890123456789"" + 
                ""01234567890123456789012345678901234567890123456789"")
                .toCharArray();

char[][] char2D = new char[10][10];

for (int i = 0; i &lt; 100; i++)
    char2D[i / 10][i % 10] = chars[i];
</code></pre>

<p>Now the this code...</p>

<pre><code>System.out.println(Arrays.deepToString(char2D).replaceAll(""],"",""],\n""));
</code></pre>

<p>...prints the following</p>

<pre><code>[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]
</code></pre>
","3","3981821"
"<blockquote>
  <p>without using any of the collections i.e. Arraylist or Set etc.?</p>
</blockquote>

<p>Just check through array before inserting,   </p>

<p>you could use <a href=""http://en.wikipedia.org/wiki/Insertion_sort"" rel=""nofollow"">insertion sort</a> and do the <a href=""http://en.wikipedia.org/wiki/Binary_search_algorithm"" rel=""nofollow"">binarysearch</a> it would be little faster</p>
","0","10909787"
"<p>A little mod instead of using substring():</p>

<pre><code>//join(String array,delimiter)
public static String join(String r[],String d)
{
        if (r.length == 0) return """";
        StringBuilder sb = new StringBuilder();
        int i;
        for(i=0;i&lt;r.length-1;i++){
            sb.append(r[i]);
            sb.append(d);
        }
        sb.append(r[i]);
        return sb.toString();
}
</code></pre>
","25","1515437"
"<p>It's a old code, anyway, try it:</p>

<pre><code>import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
public class StringArrayTest
{
   public static void main(String[] args)
   {
      String[] words = {""word1"", ""word2"", ""word3"", ""word4"", ""word5""};

      List&lt;String&gt; wordList = Arrays.asList(words);

      for (String e : wordList)
      {
         System.out.println(e);
      }
    }
}
</code></pre>
","2","11986593"
"<p>Petname is an string array, so you need to use <code>petname[0]</code> to get the name of the pet.</p>

<p>But since a pet only has one name, I think it would be better to use a simple String as the pet's name.</p>
","0","20478607"
"<p>If you want to know how many there are of different float values in your array, the best solution would be a multiset (which is typically built on top of a <code>Map&lt;T, Integer&gt;</code>). With <a href=""http://guava-libraries.googlecode.com"" rel=""nofollow"">Guava</a>, you could do this:</p>

<pre><code>float[] floats = ...
Multiset&lt;Float&gt; multiset = HashMultiset.create(Floats.asList(floats));
for (Multiset.Entry&lt;Float&gt; entry : multiset.entrySet()) {
  Float value = entry.getElement();
  int count = entry.getCount();
  ...
}
</code></pre>
","0","4228606"
"<p>the average execution time is proportional to <em>number of elements</em>. That is, this method is an <strong>O(n)</strong> operation, where <strong>n</strong> is <em>number of elements</em>.</p>
","8","9049877"
"<p>If you want that behaviour:</p>

<pre><code>List&lt;T&gt; snake = new ArrayList&lt;&gt;(){
    @Override
    public T get(int i) {
        return super.get((i + size()) % size());
   }
};
</code></pre>

<p>This will work for any value of i.</p>
","2","21911684"
"<p>You can </p>

<ul>
<li>put your array in request context as an attribute using <code>request.setAttribute()</code></li>
<li>forward the request to second servlet using <code>RequestDispatcher.forward()</code> </li>
<li>in your second servlet read the value using <code>request.getAttribute()</code></li>
</ul>
","5","4321151"
"<p>Sometimes it's much more friendly to return a zero size array than null.</p>
","25","4612471"
"<p>Depending if you use sessions:</p>

<ol>
<li>Store the array in the session variable using session.setAttribute();</li>
<li>Retrieve the array using session.getAttribute();</li>
</ol>

<p>However the variable will stay until the session dies, you overwrite it with something else, or you remove it.</p>

<p>If you forward one servlet to another servlet, you can store it in the request variable:</p>

<ol>
<li>request.setAttribute()</li>
</ol>

<p>Which you can read after forwarding using request.getAttribute() after calling</p>

<p>RequestDispatcher.forward()</p>

<p>Note this does not work if you're doing a redirect instead of a servlet forward.</p>
","1","4321151"
"<p>If you modify your list, then use <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#listIterator()"" rel=""nofollow""><code>listIterator()</code></a> and iterate from last index (that is <code>size()-1</code> respectively).
If you fail again, check your list structure.</p>
","-3","687833"
"<p>Google guava's library also has <a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Joiner.html"" rel=""noreferrer"">this kind of capability</a>. You can see the String[] example also from the API.</p>

<p>As already described in the api, beware of the immutability of the builder methods.</p>

<p>It can accept an array of objects so it'll work in your case. In my previous experience, i tried joining a Stack which is an iterable and it works fine.</p>

<p>Sample from me :</p>

<pre><code>Deque&lt;String&gt; nameStack = new ArrayDeque&lt;&gt;();
nameStack.push(""a coder"");
nameStack.push(""i am"");
System.out.println(""|"" + Joiner.on(' ').skipNulls().join(nameStack) + ""|"");
</code></pre>

<p>prints out : <code>|i am a coder|</code></p>
","14","1515437"
"<ol>
<li>Write a method that adds the value to the array.</li>
<li>Before adding, scan the array if the value exists.</li>
<li>Skip the adding if it does exist.</li>
<li>Use <em>only</em> that method to add values to the array.</li>
<li>Ideally bundle the array and the method in a class. Voila: encapsulation!</li>
</ol>
","0","10909787"
"<p>Only if <code>Array_Name</code> had actually been referencing an array to begin with. And only if there are no other references to the array. And it will reclaim only those elements of the array which aren't referenced by anything outside of the array. And it will only do so when it feels like getting around to it :-)</p>

<p>(The syntax <code>Array_Name[] = NULL</code> isn't really meaningful. But I'm assuming you'd done something like:</p>

<pre><code> Foo[] Array_Name = new Foo[n];
 //...
 Array_Name = null; // Note the lowercase ""null""
</code></pre>

<p>This <em>might</em> make the array a proper target for garbage collection, given the conditions I described above.)</p>
","11","4543250"
"<p>I agree with everything Dan mentioned above but you can actually trigger garbage collection manually by calling System.gc(). Of course as mentioned this will only collect objects that are no longer referenced by anything else.</p>
","1","4543250"
"<p>Call the constructor of Vector that uses an existing collection (your array, in this case) to initialize itself:</p>

<pre><code>String[] strings = { ""Here"", ""Are"", ""Some"", ""Strings"" };
Vector&lt;String&gt; vector = new Vector&lt;String&gt;(Arrays.asList(strings));
</code></pre>
","22","4400642"
"<p>This was recently covered on the <a href=""http://www.ihas1337code.com/2010/12/two-sum-problem.html"" rel=""nofollow"">ihas1337code</a> blog. See the comments section for solutions.</p>

<p>Essentially the most efficient way to solve this is to put the numbers in a hash_map and then loop through the array a second time checking each element x if element (N - x) exists in the hash_map. </p>

<p>You can optimize a bit from there, but that is the general idea.</p>
","2","4642303"
"<p>You may try this too.</p>

<pre><code>public static String[][] getArrayFromHash(Hashtable&lt;String,String&gt; data){
        String[][] str = null;
        {
            Object[] keys = data.keySet().toArray();
            Object[] values = data.values().toArray();
            str = new String[keys.length][values.length];
            for(int i=0;i&lt;keys.length;i++) {
                str[0][i] = (String)keys[i];
                str[1][i] = (String)values[i];
            }
        }
        return str;
    }
</code></pre>

<p>Here I am using String as return type. You may change it to required return type by you.</p>
","0","1090556"
"<p>Follow these steps:</p>

<p>1.Sort the numbers using merge sort in O(n logn) in descending order(can be ascending also but for this text assumed them to be sorted in desceending order).</p>

<p>2.Use two pointer variables one pointing to starting element (say p1) and other pointing to last element( say p2).</p>

<p>3.Now add *p1 + *p2 ( temp_sum= *p1 + *p2 ) and compare it with required sum </p>

<p>Repeat these steps untill p1>p2 </p>

<p>i.If sum ==temp_sum  then our job is over .</p>

<p>ii.If sum > temp_sum then decrease p2 to make it point to a bigger value then its current value so that temp_sum can increase.</p>

<p>iii.If sum &lt; temp_sum then decrease p1 to make it point to a smaller value then its current value so that temp_sum can decrease.</p>
","0","4642303"
"<p>Arrays.asList() would do the trick here.</p>

<pre><code>String[] words = {""ace"", ""boom"", ""crew"", ""dog"", ""eon""};   

List&lt;String&gt; wordList = Arrays.asList(words);  
</code></pre>

<p>For converting to Set, you can do as below</p>

<pre><code>Set&lt;T&gt; mySet = new HashSet&lt;T&gt;(Arrays.asList(words)); 
</code></pre>
","140","11986593"
"<p>Java <code>ArrayList</code> has an <code>indexOf</code> method.  Java arrays have no such method.</p>
","12","4962361"
"<blockquote>
  <p>Maybe I need to save additional column in my DB for file extension.</p>
</blockquote>

<p>That is a better solution than attempting to deduce a mimetype based on the database content, for (at least) the following reasons:</p>

<ul>
<li>If you have a mime type from the document source, you can store and use that.</li>
<li>You could (potentially) ask the user to specify a mimetype when they lodge the document.</li>
<li>If you <em>have to</em> use some heuristic-based scheme for figuring out a mimetype:
<ul>
<li>you can do the work once before creating the table row, rather than N times after extracting it, and</li>
<li>you can report cases where the heuristic gives no good answer, and maybe ask the user to say what the file type really is.</li>
</ul></li>
</ul>

<p>(I'm making some assumptions that may not be warranted, but the question doesn't give any clues on how the larger system is intended to work.)</p>
","2","10040330"
"<p>You're probably thinking of the <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/util/ArrayList.html"" rel=""nofollow"">java.util.ArrayList</a>, not the array.</p>
","3","4962361"
"<p>If this is for storing a file that is uploaded:</p>

<ul>
<li>create a column for the filename extension</li>
<li>create a column for the mime type as sent by the browser</li>
</ul>

<p>If you don't have the original file, and you only have bytes, you have a couple of good solutions.</p>

<p>If you're able to use a library, look at using mime-util to inspect the bytes:</p>

<p><a href=""http://technopaper.blogspot.com/2009/03/identifying-mime-using-mime-util.html"" rel=""noreferrer"">http://technopaper.blogspot.com/2009/03/identifying-mime-using-mime-util.html</a></p>

<p>If you have to build your own byte detector, here are many of the most popular starting bytes:</p>

<pre><code>""BC"" =&gt; bitcode,
""BM"" =&gt; bitmap,
""BZ"" =&gt; bzip,
""MZ"" =&gt; exe,
""SIMPLE""=&gt; fits,
""GIF8"" =&gt; gif,
""GKSM"" =&gt; gks,
[0x01,0xDA].pack('c*') =&gt; iris_rgb,
[0xF1,0x00,0x40,0xBB].pack('c*') =&gt; itc,
[0xFF,0xD8].pack('c*') =&gt; jpeg,
""IIN1"" =&gt; niff,
""MThd"" =&gt; midi,
""%PDF"" =&gt; pdf,
""VIEW"" =&gt; pm,
[0x89].pack('c*') + ""PNG"" =&gt; png,
""%!"" =&gt; postscript,
""Y"" + [0xA6].pack('c*') + ""j"" + [0x95].pack('c*') =&gt; sun_rasterfile,
""MM*"" + [0x00].pack('c*') =&gt; tiff,
""II*"" + [0x00].pack('c*') =&gt; tiff,
""gimp xcf"" =&gt; gimp_xcf,
""#FIG"" =&gt; xfig,
""/* XPM */"" =&gt; xpm,
[0x23,0x21].pack('c*') =&gt; shebang,
[0x1F,0x9D].pack('c*') =&gt; compress,
[0x1F,0x8B].pack('c*') =&gt; gzip,
""PK"" + [0x03,0x04].pack('c*') =&gt; pkzip,
""MZ"" =&gt; dos_os2_windows_executable,
"".ELF"" =&gt; unix_elf,
[0x99,0x00].pack('c*') =&gt; pgp_public_ring,
[0x95,0x01].pack('c*') =&gt; pgp_security_ring,
[0x95,0x00].pack('c*') =&gt; pgp_security_ring,
[0xA6,0x00].pack('c*') =&gt; pgp_encrypted_data,
[0xD0,0xCF,0x11,0xE0].pack('c*') =&gt; docfile
</code></pre>
","14","10040330"
"<p>First, <em>Java</em> is not <em>Python</em> (although <a href=""http://jython.org/"" rel=""nofollow"">Jython</a> implements <em>Python</em> in <em>Java</em>). Second, you should read the <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#get%28int%29"" rel=""nofollow"">JavaDoc</a> on ArrayList - that is it throws an <code>Exception</code>,</p>

<pre><code>IndexOutOfBoundsException - if the index is out of range (index &lt; 0 || index &gt;= size())
</code></pre>

<p>Finally, you can do this</p>

<pre><code>myList.get(myList.size() - 1);
</code></pre>

<p>to get this last element in your <code>List</code> (e.g. <code>myList</code>).</p>
","1","21911684"
"<pre><code>Vector&lt;String&gt; strVector = new Vector&lt;String&gt;(Arrays.asList(strArray));
</code></pre>

<p>Breaking this down:</p>

<ul>
<li><p><code>Arrays.asList(array)</code> converts the array to a <code>List</code> (which implements <code>Collection</code>)</p></li>
<li><p>The <code>Vector(Collection)</code> constructor takes a <code>Collection</code> and instantiates a new <code>Vector</code> based off of it. </p></li>
<li><p>We pass the new <code>List</code> to the <code>Vector</code> constructor to get a new <code>Vector</code> from the array of <code>String</code>s, then save the reference to this object in <code>strVector</code>.</p></li>
</ul>
","4","4400642"
"<p>Not answering why it is not possible, as that is not in the scope of StackOverflow.</p>

<p>However, it is possible in the following way when using Java 8:</p>

<p><code>Optional&lt;E&gt; optE = eCollection.stream().reduce((previous, current) -&gt; current);</code></p>

<p>And if it exists, you can get it via <code>optE.get()</code>, once you have tested presence with <code>optE.isPresent()</code>.</p>

<p>However, I am pretty sure this incurs a performance penalty as you are reducing the stream, while you really just want to inspect the last value.</p>

<p>I have some hopes it will be added in Java 9, if enough people complain when using Java 8. Because in my example you cannot do it as easy as getting the first element, which would be:</p>

<p><code>Optional&lt;E&gt; optE = eCollection.stream().findFirst()</code>.</p>

<p><strong>Edit</strong>, also note for practical purposes that other operations proceed the <code>findFirst()</code> call. For example a <code>filter()</code> call.</p>
","0","21911684"
"<p>int[50][8] is 50 arrays of length 8
int[8][50] is 8 arrays of length 50
int[400] is one array 400.
Each array has an overhead of about 16 bytes.</p>

<p>However, for the sizes you have here, it really doesn't matter. You are not going to be saving much either way.</p>
","0","578798"
"<pre><code>String[] w = {""a"", ""b"", ""c"", ""d"", ""e""};  

List&lt;String&gt; wL = Arrays.asList(w);  
</code></pre>
","0","11986593"
"<p>If you really want to use a set:</p>

<pre><code>String[] strArray = {""foo"", ""foo"", ""bar""};  
Set&lt;String&gt; mySet = new HashSet&lt;String&gt;(Arrays.asList(strArray));
System.out.println(mySet);
</code></pre>

<p>output:</p>

<pre><code>[foo, bar]
</code></pre>
","2","11986593"
"<p>Arrays themselves do not have that method.  A List, however, does:
<a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/ArrayList.html#indexOf%28java.lang.Object%29"" rel=""nofollow"">indexOf</a></p>
","4","4962361"
"<p>I don't recall of a ""indexOf"" on arrays other than coding it for yourself... though you could probably use one of the many <code>java.util.Arrays#binarySearch(...)</code> methods (see the <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html"" rel=""noreferrer"">Arrays javadoc</a>) if your array contains primitive types</p>
","6","4962361"
"<p>I suggest writing a small performance test for this with very large arrays to see the actual difference. In reality I don't think this would make the slightest difference.</p>
","0","578798"
"<pre><code>import java.util.*;
class RemoveDupFrmString
{
    public static void main(String[] args)
    {

        String s=""appsc"";

        Set&lt;Character&gt; unique = new LinkedHashSet&lt;Character&gt; ();

        for(char c : s.toCharArray()) {

            System.out.println(unique.add(c));
        }
        for(char dis:unique){
            System.out.println(dis);
        }


    }
}
</code></pre>
","0","203984"
"<p>If your problem is to return an <code>Integer[]</code>, and not any other collection, you could however use a <code>Set&lt;Integer&gt;</code> <code>private</code>ly to avoid duplicated values, and then return <code>Set&lt;Integer&gt;.toArray(new Integer[0])</code>.</p>

<p>That's the simplest way IMHO...</p>

<p>For example:</p>

<pre><code>private Set&lt;Integer&gt; intSet = new HashSet&lt;Integer&gt;();

public void setIntArray(Integer[] i){
    intSet = new HashSet&lt;Integer&gt;(Arrays.asList(i));
}

public Integer[] getIntArray(){
    return intSet.toArray(new Integer[0]);
}
</code></pre>
","1","10909787"
"<p>You can create another array, let's call it <code>exists</code>, of type boolean. Then each time you add an integer to your main list check if <code>exists[newNumber]</code>. If the value is true it already exists, otherwise add the number to the integer array and set the boolean value to true. </p>

<p>This solution works well if the number range has a small bound. Note, my example also assumes the integer is positive. Some optimization is to use a long[] array and use each bit as a flag.</p>
","1","10909787"
"<p>You can not change the length of an array, but you can change the values the index holds by copying new values and store them to a existing index number.
1=mike , 2=jeff // 10 = george 11 goes to 1 overwriting mike .</p>

<pre><code>Object[] array = new Object[10];
int count = -1;

public void myFunction(String string) {
    count++;
    if(count == array.length) { 
        count = 0;  // overwrite first
    }
    array[count] = string;    
}
</code></pre>
","3","642897"
"<p>First Assuming the Array is a buffer and has extra Space. </p>

<p>Simply loop through it checking each value. Such As</p>

<pre><code>    for(int i=0;  i&lt;endpointer  &amp;&amp;i &lt; buffer.length  ; i++){
        if(buffer[i]==valueToPutInArray){
            valueExists=true;
            break;
        }
    }
    if(!valueExists)    {
        buffer[endpointer++]=valueToPutInArray;

    }
</code></pre>

<p>If the Array is must be reallocated then you have to do something like this:</p>

<pre><code>    int i=0;
    Integer[] outputArray = new Integer[buffer.length+1];
    for(Integer value : buffer) {
        if(value==valueToPutInArray){
            valueExists=true;
            break;
        }
        outputArray[i++]=value;
    }
    if(!valueExists)    {
        outputArray[i]=valueToPutInArray;

    }
</code></pre>
","0","10909787"
"<p>One additional useage point (came from a reference I unfortunately can't find now, but fairly commonsensical)-</p>

<p>The authors of this paper were testing various ways of compressing sparse arrays into mutidimensional arrays. One thing they noticed is that it makes a  difference in terms of speed which way you iterate -</p>

<p>The idea was that if you have int[i][j] it was faster to do</p>

<pre><code>for (i) { 
     for (j)
</code></pre>

<p>than to do </p>

<pre><code>for (j) { 
     for (i)
</code></pre>

<p>because in the first instance you're iterating through elements stored contiguously.</p>
","1","578798"
"<p>It signifies that it is empty. I.e. you can loop over it as if it had items and have no result occur:</p>

<pre><code>for(int k = 0; k &lt; strings.length; k++){
   // something
}
</code></pre>

<p>Thereby avoiding the need to check. If the array in question were <code>null</code>, an exception would occur, but in this case it just does nothing, which may be appropriate.</p>
","121","4612471"
"<p>Make your class implement Serializable.</p>

<p>Open an ObjectOutputStream wrapping a FileOutputStream</p>

<p>write the entire List with writeObject()</p>

<p>close the ObjectOutputStream.</p>
","4","10426781"
"<p>Same as C++, it allows for cleaner handling when there is no data.</p>
","5","4612471"
"<p>Make sure that your list elements implement the <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html"" rel=""nofollow"">Serializable</a> interface and then you can use the <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/ObjectOutputStream.html"" rel=""nofollow"">ObjectOutputStream</a> to write objects to file and the <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/ObjectInputStream.html"" rel=""nofollow"">ObjectInputStream</a> to read them back in. </p>

<p>Another option you can take a look at is using <a href=""http://xstream.codehaus.org/"" rel=""nofollow"">XStream</a>. You can see how you can use it <a href=""http://xstream.codehaus.org/tutorial.html"" rel=""nofollow"">here</a>.</p>

<p>The advantage of using XStream instead of object streams is that using XML will provide you with something which is human readable, it can be processed by other platforms and also does not require you to implement the Serializable interface, which uses the <code>serialVersionUID</code> to store the items to a file. This could cause items which where written prior to some change to your class not being loaded. Take a look here for <a href=""http://c2.com/ppr/wiki/JavaIdioms/AlwaysDeclareSerialVersionUid.html"" rel=""nofollow"">more</a> information.</p>
","2","10426781"
"<p>LinkedHashSet will do the trick.</p>

<pre><code>String[] arr2 = {""5"",""1"",""2"",""3"",""3"",""4"",""1"",""2""};
Set&lt;String&gt; set = new LinkedHashSet&lt;String&gt;(Arrays.asList(arr2));
for(String s1 : set)
    System.out.println(s1);

System.out.println( ""------------------------"" );
String[] arr3 = set.toArray(new String[0]);
for(int i = 0; i &lt; arr3.length; i++)
     System.out.println(arr3[i].toString());
</code></pre>

<p>//output: 5,1,2,3,4</p>
","1","203984"
"<p>i think that is the solution</p>

<pre><code>ArrayList&lt;table&gt; libel = new ArrayList&lt;table&gt;();
try {
SessionFactory sf = new Configuration().configure().buildSessionFactory();
Session s = sf.openSession();
s.beginTransaction();

String hql = ""FROM table "";

org.hibernate.Query query = s.createQuery(hql);
libel= (ArrayList&lt;table&gt;) query.list();
Iterator it = libel.iterator();
while(it.hasNext()) {
table cat = (table) it.next();

cat.getLibCat();//table colonm getter


combobox.addItem(cat.getLibCat());
}
s.getTransaction().commit();
s.close();
sf.close();
} catch (Exception e) {
System.out.println(""Exception in getSelectedData::""+e.getMessage());
</code></pre>
","-5","1291704"
"<p>Consider this (a more detailed explanation of Noon's answer):</p>

<pre><code>public String[] getStrings() {
 if( foo ) {
  return null;
 } else {
  return new String[] {""bar, ""baz""};
 }
}

String[] strings = getStrings();
if (strings != null) {
 for (String s : strings) {
  blah(s);
 }
}
</code></pre>

<p>Now compare it to this:</p>

<pre><code>public String[] getStrings() {
 if( foo ) {
  return new String[0];
 } else {
  return new String[] {""bar, ""baz""};
 }
}

// the if block is not necessary anymore
String[] strings = getStrings();
for (String s : strings) {
 blah(s);
}
</code></pre>

<p>This (returning empty arrays rather than null values), is in fact a best practice in Java API design world.</p>

<p>Besides, in Java, you can covert Lists (e.g. ArrayList) to arrays and it only makes sense to convert an empty list to an empty array.</p>
","14","4612471"
"<p>You <em>could</em> use <a href=""http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/reflect/Array.html#newInstance%28java.lang.Class,%20int%5B%5D%29"" rel=""noreferrer""><code>Array.newInstance</code></a>, but:</p>

<blockquote>
  <p>The number of dimensions of the new array must not exceed the number of array dimensions supported by the implementation (typically 255).</p>
</blockquote>

<p>But I believe it would be better for you to create better abstractions for your domain. Dealing with such an array would be difficult. Maybe you can give more information about what you're trying to achieve so that a better answer can be provided.</p>
","11","11331149"
"<p>As in your previous post you will have a problem with exceeding the bounds of your <strong>10</strong> x 4 array.</p>

<p>Consider using <strong>ArrayList</strong> of String Arrays instead.  ArrayList (unlike array) can grow.</p>

<p>See if this small (unrelated sample) gives you enough hints:</p>

<pre><code>import java.util.*;

public class ListOfStrings {
    public static void main(String[] args) {
        ArrayList&lt;String[]&gt; los = new ArrayList&lt;String[]&gt;();
        for(int i = 0; i&lt;=10; ++i) {
            String[] str = {Integer.toString(i), ""a"" +i, ""b""+i, ""c"" + i};
            los.add(str);
        }
        for(String[] strArray : los) {
            System.out.println();
            for(String str : strArray) {
                System.out.print(str + ""\t"");
            }
        }

    }
}
</code></pre>
","0","15737631"
"<p>you could tweak a tiny amout of memory by using an int[] myInt = int[400] array, and manually accessing an int at position (x,y)  with myInt[x+y*50]
that would save you 50 32-bit pieces of memory. accessing it that way will maybe (who knows exactly what the hotspot compiler does to this..) take one more instruction for the multiplication.</p>

<p>that kind of micro-optimisation will most likely not make your app perform better, and it will decrease readability.</p>
","0","578798"
"<p>I don't like the accepted answer or @fivetwentysix's comment regarding how to solve this. It gets at one method for doing this, but doesn't give the full solution to using toArray. You need to use toArray and give it an argument that's an array of the correct type and size so that you don't end up with an Object array. While an object array will work, I don't think it's best practice in a strongly typed language.</p>

<pre><code>String[] array = arrayList.toArray(new String[arrayList.size()]);
JComboBox comboBox = new JComboBox(array);
</code></pre>

<p>Alternatively, you can also maintain strong typing by just using a for loop.</p>

<pre><code>String[] array = new String[arrayList.size()];
for(int i = 0; i &lt; array.length; i++) {
    array[i] = arrayList.get(i);
}
JComboBox comboBox = new JComboBox(array);
</code></pre>
","12","1291704"
"<pre><code>static void placeRandomly2D(int[][] arr, int limit) {
// generates value [0...limit) half-interval and places it into the 2D array arr
//    at random position; limit must be positive
    Random rand = new Random();
    int value = rand.nextInt(limit);
    int pos1 = rand.nextInt(arr.length);
    int pos2 = rand.nextInt(arr[pos1].length);
    arr[pos1][pos2] = value;
}
</code></pre>

<p>And, just in case, version for 1-dimensional array:</p>

<pre><code>static void placeRandomly1D(int[] arr, int limit) {
// generates value [0...limit) half-interval and places it into the 1D array arr
//    at random position; limit must be positive
    Random rand = new Random();
    int value = rand.nextInt(limit);
    int pos = rand.nextInt(arr.length);
    arr[pos] = value;
}
</code></pre>
","1","27208807"
"<p>I would suggest first you perform <strong>Arrays.Sort( int[] )</strong>. Then use <strong>Arrays.binarySearch( int [] ,int )</strong> to check whether the element exist or not.</p>

<p>According to javadoc:</p>

<pre><code>/**
 * Sorts the specified array of ints into ascending numerical order.
 * The sorting algorithm is a tuned quicksort, adapted from Jon
 * L. Bentley and M. Douglas McIlroy's ""Engineering a Sort Function"",
 * Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November
 * 1993).  This algorithm offers n*log(n) performance on many data sets
 * that cause other quicksorts to degrade to quadratic performance.
 *
 * @param a the array to be sorted
 */
public static void sort(int[] a) {
sort1(a, 0, a.length);
}
</code></pre>

<p>and for BinarySearch:</p>

<pre><code> /**
 * Searches the specified array of ints for the specified value using the
 * binary search algorithm.  The array must be sorted (as
 * by the {@link #sort(int[])} method) prior to making this call.  If it
 * is not sorted, the results are undefined.  If the array contains
 * multiple elements with the specified value, there is no guarantee which
 * one will be found.
 *
 * @param a the array to be searched
 * @param key the value to be searched for
 * @return index of the search key, if it is contained in the array;
 *         otherwise, &lt;tt&gt;(-(&lt;i&gt;insertion point&lt;/i&gt;) - 1)&lt;/tt&gt;.  The
 *         &lt;i&gt;insertion point&lt;/i&gt; is defined as the point at which the
 *         key would be inserted into the array: the index of the first
 *         element greater than the key, or &lt;tt&gt;a.length&lt;/tt&gt; if all
 *         elements in the array are less than the specified key.  Note
 *         that this guarantees that the return value will be &amp;gt;= 0 if
 *         and only if the key is found.
 */
public static int binarySearch(int[] a, int key) {
return binarySearch0(a, 0, a.length, key);
}
</code></pre>

<p>And one you know whether the element exist or not, rest is easy for you.</p>
","1","10909787"
"<p>The simple answer is by typing lots of <code>[]</code>'s.  (But the practical limit is 255.  This is imposed by the JVM specification (in Section <a href=""http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.3.2"" rel=""nofollow noreferrer"">4.3.2</a>) rather than the JLS; see <a href=""https://stackoverflow.com/questions/4060538/max-number-of-dimensions-in-a-java-array"">Maximum number of dimensions in a Java array</a>)</p>

<p>But you <em>really</em> wouldn't want to do this:</p>

<ul>
<li><p>Your code will be horrible to read and maintain.  Each time you need to fetch an element you have to supply 400 index expressions.</p></li>
<li><p>A 400 dimensional array that was represented this way would take a ridiculous amount of memory ...</p></li>
</ul>

<p>If you are serious about this, you should look into some kind of sparse representation.  But even then, conventional array computations are hardly going to be practical.</p>
","4","11331149"
"<p>Why does Java allow arrays of size 1? Isn't it pretty useless to wrap a single value in an array? Wouldn't it be sufficient if Java only allowed arrays of size 2 or greater?</p>

<p>Yes, we can pass <code>null</code> instead of an empty array and a single object or primitive instead of a size-one-matrix.</p>

<p>But there are some good arguments against such an restriction. My personal top arguments:</p>

<p><strong>Restriction is too complicated and not really necessary</strong></p>

<p>To limit arrays to sizes [1..INTEGER.MAX_INT] we'd have to add <strike>a lot of additional boudary checks,</strike><em>(agree to Konrads comment)</em> conversion logic and method overloads to our code. Excluding 0 (and maybe 1) from the allowed array sizes does not save costs, it requires additional effort and has an negative impact on performance.</p>

<p><strong>Array models vector</strong></p>

<p>An array is a good data model for a vector (mathematics, <em>not</em> the <code>Vector</code> class!). And of course, a vector in mathematics may be zero dimensional. Which is conceptually different from being non-existant.</p>

<hr>

<p><strong>Sidenote</strong> - a prominent wrapper for an (char-)array is the <code>String</code> class. The immutable <code>String</code> materializes the concept of an empty array: it is the empty String (<code>""""</code>).</p>
","50","4612471"
"<p>If you absolutely have to use your two-dimensional array, then you will need nested loops to print it out.</p>

<p><strong>for</strong></p>

<pre><code>for(int i=0; i &lt; FutureValueArray.length; ++i) {
   System.out.println(""whatever you print before each row);
   for(int j=0; j &lt; utureValueArray[i]; ++j) {
      Sytem.out.print(utureValueArray[i][j] + ""\t"");
   }
}
</code></pre>

<p><strong>for each</strong></p>

<pre><code>for(String[] row : FutureValueArray) {
   System.out.println(""whatever you print before each row);
   for(String cell : row) {
      Sytem.out.print(cell + ""\t""); 
   }
}
</code></pre>
","1","15737631"
"<p>There appears to be three things to compare here.</p>

<ul>
<li><code>new int[50][8]</code></li>
<li><code>new int[8][50]</code></li>
<li><code>new int[400]</code></li>
</ul>

<p>Now, I get this confused, but the way to remember is to think of <code>new int[50][]</code> which is valid.</p>

<p>So <code>new int[50][8]</code> is an array of 50 arrays of size 8 (51 objects). <code>new int[8][50]</code> is an array of 8 arrays of size 50 (9 objects). 9 objects will have a lower overhead than 51. <code>new int[400]</code> is just one object.</p>

<p>However, it at this size it probably doesn't make any measurable difference to the performance of your program. You might want to encapsulate the array(s) within an object that will allow you to change the implementation and provide a more natural interface to client code.</p>
","1","578798"
"<p>No.</p>

<p>Why don't you just write the function yourself? It would probably be faster than asking this question and waiting for an answer.</p>
","1","27604551"
"<pre><code>import  java.util.Scanner;

class Array {
public static void main(String a[]){

    Scanner input = new Scanner(System.in);

    System.out.println(""Enter the size of an Array"");

    int num = input.nextInt();

    System.out.println(""Enter the Element ""+num+"" of an Array"");

    double[] numbers = new double[num];

    for (int i = 0; i &lt; numbers.length; i++)
    {

        System.out.println(""Please enter number"");

        numbers[i] = input.nextDouble();

    }

    for (int i = 0; i &lt; numbers.length; i++)
    {

        if ( (i%3) !=0){

            System.out.print("""");

            System.out.print(numbers[i]+""\t"");

        } else {
            System.out.println("""");

            System.out.print(numbers[i]+""\t"");
        }

    }

}
</code></pre>
","1","2795350"
"<p>One case I can think of where an empty array is extremely useful is to use it instead of null in a situation where null isn't allowed. One possible example of that is a BlockingQueue of arrays. When you want to signal the end of input to the reading side, what would you do? To send null seems like an obvious choice, but the thing is that BlockingQueue doesn't accept nulls. You could wrap your array inside a class with ""<code>boolean last;</code>"" kind of field, but that's kind of overkill. Sending an empty (zero-sized) array seems like the most reasonable choice.</p>
","2","4612471"
"<p>The solution depends on your requirement. If you have a small array size <em>(n&lt;10^6)</em>, scanning through the array on every insertion would suffice, but if you have a large array and frequent insertions, I would propose a different solution.</p>

<p>Scanning through an array on every insertion would require a complexity of <strong>O(n)</strong>. For small numbers, the overhead is ignorable, but as the size of array increases, traversal on every insertion is inefficient.</p>

<p>If you need performance and if memory is not your constraint, you can take a boolean array and initialize all elements to <strong>false</strong>. Then whenever you get a number, make its index value in the boolean array to <strong>true</strong>, And while inserting, check whether the boolean value at the index number of the element being inserted.</p>

<p>Here is the code to initialize the boolean array (initializing it would make all elements false):</p>

<pre><code>boolean [] duplicateValuesArray = new boolean[Integer.MAX_VALUE];
</code></pre>

<p>Here is the function which inserts an element in the array:</p>

<pre><code>    public void insertElement(int elementToBeInserted) {
        if(!duplicateValuesArray[elementToBeInserted])  //check if element already in array
            duplicateValuesArray[elementToBeInserted] = true;
            mainArray[index++] = elementToBeInserted;
    }
</code></pre>

<p>In this way, whenever you get a number, value for that index in the boolean array is set to <strong>true</strong>, and while insertion, everytime the index is checked, if value is <strong>true</strong>, that element exists in the array, do not insert it.</p>

<p>The complexity for this is much lower if you have a large <strong>mainArray</strong> <em>(n>10^6)</em> and you have frequent insertions. This is because, initializing a boolean array is one time <strong>O(n)</strong> complexity, and after that, checking for the element in the boolean array and insertion of element is just <strong>O(1)</strong> operation, happens in constant time. </p>

<p>Thus effective complexity is reduced to just initializing the boolean array. And even in terms of memory footprint, I wouldn't mind because a boolean primitive just occupies one bit in the memory.</p>

<p>P.S: Basically it is a memory vs performance trade off, and this is the Universal Computing Trade off, found everywhere.</p>
","2","10909787"
"<p>You can easily write one yourself:</p>

<pre><code>public static&lt;T&gt; List&lt;T&gt; append (List&lt;T[]&gt; input) {
    List&lt;T&gt; res = new ArrayList&lt;T&gt;();
    for(T[] subarr : input) {
        if(subarr != null) {
            int n = subarr.length;
            for(int i = 0; i &lt; n; i++) {
                res.add(subarr[i]);
            }
        }
    }
    return res;
}
</code></pre>

<p>The function appends the different arrays and <code>null</code> arrays are ignored, <code>null</code> elements are however not. Thus if the input is <code>[null,[a,b],[null,null],[c,null,d],null]</code>. The output is <code>[a,b,null,null,c,null,d]</code>.</p>
","2","27604551"
"<pre><code>public Set&lt;Object&gt; findDuplicates(List&lt;Object&gt; list) {
        Set&lt;Object&gt; items = new HashSet&lt;Object&gt;();
        Set&lt;Object&gt; duplicates = new HashSet&lt;Object&gt;();
        for (Object item : list) {
            if (items.contains(item)) {
                duplicates.add(item);
                } else { 
                    items.add(item);
                    } 
            } 
        return duplicates;
        }
</code></pre>
","0","203984"
"<p>If I ever want to, say, refactor the elements of an array to a better type, like from <code>String</code> to <code>MyPairClass&lt;String, Integer&gt;</code>, I tend to avoid the unchecked cast problem by making an empty subclass that ""bakes in"" the generic parameters, e.g. </p>

<pre><code>class Maguffin {
    private static class StringIntegerPair extends MyPairClass&lt;String, Integer&gt; {
        private static final long serialVersionUID = 1L;
    };

    ...

    private final StringIntegerPair[] horribleOldArray;

    ...
</code></pre>

<p>This nested class will probably also need constructors that delegate up to the generic type's constructors, depending on what you do when adding new array elements. When passing the elements out of the enclosing class, just cast them up to the generic type:</p>

<pre><code>    ...

    MyPairClass&lt;String, Integer&gt; getSomethingFromTheArray(int index) {
        return horribleOldArray[index];
    }

    ...

}
</code></pre>

<p>All this being said, there should rarely be a need to do something like this if you are writing something new from scratch. The only real benefit of arrays over the Collections framework classes is that you can write them out as literals, and this will no longer be an advantage come next year when Java 8 is released.</p>
","0","1114400"
"<p>Very easy:</p>

<pre><code>int[] intarray;
// ...
Arrays.sort(intarray);
</code></pre>

<p>If you have a List instead:</p>

<pre><code>List&lt;Integer&gt; numbers;
// ...
Collections.sort(numbers);
</code></pre>
","5","18708660"
"<p>First off, no need for ""Deep"". It's a primitive. You don't need Deep.</p>

<p>Just use <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#hashCode%28byte%5B%5D%29""><code>Arrays.hashCode(byte[] yourArray)</code></a></p>

<p>Edit: To clarify, Deep implies delving into the Objects contained within the array. Given that you are dealing with a primitive, you just need to use the primitive value itself in the calculation. That's why none of the Deep methods revolve around primitives.</p>
","7","4671858"
"<p>Excerpt from Java Generics and collections.</p>

<blockquote>
  <p>Arrays reify their component types, meaning that they carry run-time information about the type of their components. This reified type information is used in instance tests and casts, and also used to check whether assignments into array components are permitted.</p>
</blockquote>

<p>Therefore one is not allowed to have the suntax</p>

<pre><code>new List&lt;Integer&gt;[10] ;  
</code></pre>

<p>However the following is allowed</p>

<pre><code>List&lt;String&gt;[] stringListArray=(List&lt;String&gt;[])new List[10];
</code></pre>

<p>Now this is not a really good practice. Such casts are not safe and should be avoided.</p>

<p>Which in general points to the fact that we should avoid using arrays of generic type.</p>
","0","1114400"
"<pre><code>int[] x= new int[] {1,2,3,4,0,-3};

Arrays.sort(x);

for(int temp: x) {
    System.out.println( temp);
}
</code></pre>
","3","18708660"
"<p>The List interface has an indexOf() method, and you can obtain a List from your array with Array's asList() method. Other than that, Array itself has no such method. It does have a binarySearch() method for sorted arrays.</p>
","5","4962361"
"<p>If you mean having an array of List then the answer is no. <code>new List&lt;Number&gt;[10]</code> is illegal in java. questions like these could be answerable by searching it in Google alone or checking out the official Generics tutorial</p>
","0","1114400"
"<p>No, there's no method that does this directly for you. You can write a nested for loop or use the flatMap of the stream API as follows:</p>

<pre><code>List&lt;Object&gt; flat = objArrs.stream()
                           .flatMap(Stream::of)
                           .collect(Collectors.toList());
</code></pre>
","4","27604551"
"<p>this can solve the problem:</p>

<pre><code>private List&lt;SomeClass&gt; clearListFromDuplicateFirstName(List&lt;SomeClass&gt; list1) {

     Map&lt;String, SomeClass&gt; cleanMap = new LinkedHashMap&lt;String, SomeClass&gt;();
     for (int i = 0; i &lt; list1.size(); i++) {
         cleanMap.put(list1.get(i).getFirstName(), list1.get(i));
     }
     List&lt;SomeClass&gt; list = new ArrayList&lt;SomeClass&gt;(cleanMap.values());
     return list;
}
</code></pre>
","20","203984"
"<p>In Java 8 you can do it with Streams :</p>

<pre><code>List&lt;Object[]&gt; list = ...
List&lt;Object&gt; l = list.stream()
                     .flatMap(arr -&gt; Stream.of(arr))
                     .collect(Collectors.toList());
</code></pre>
","1","27604551"
"<p>There are a couple of ways to accomplish this using the <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html"" rel=""noreferrer""><code>Arrays</code></a> utility class.</p>

<p>If the array is not sorted and <strong><em>is not</em></strong> an array of primitives:</p>

<pre><code>java.util.Arrays.asList(theArray).indexOf(o)
</code></pre>

<p>If the array <em>is</em> primitives and not sorted, one should use a solution offered by one of the other answers such as <a href=""https://stackoverflow.com/questions/4962361#4962437"">Kerem Baydoğan's</a>, <a href=""https://stackoverflow.com/questions/4962361#7083834"">Andrew McKinlay's</a> or <a href=""https://stackoverflow.com/questions/4962361#19084357"">Mishax's</a>.  The above code will compile even if <code>theArray</code> is primitive (possibly emitting a warning) but you'll get totally incorrect results nonetheless.</p>

<p>If the array is sorted, you can make use of a binary search for performance:</p>

<pre><code>java.util.Arrays.binarySearch(theArray, o)
</code></pre>
","240","4962361"
"<p>There is none. Either use a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html""><code>java.util.List</code></a>*, or you can write your own <code>indexOf()</code>:</p>

<pre><code>public static &lt;T&gt; int indexOf(T needle, T[] haystack)
{
    for (int i=0; i&lt;haystack.length; i++)
    {
        if (haystack[i] != null &amp;&amp; haystack[i].equals(needle)
            || needle == null &amp;&amp; haystack[i] == null) return i;
    }

    return -1;
}
</code></pre>

<hr>

<p><sub>*you can make one from your array using <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#asList%28T...%29""><code>Arrays#asList()</code></a></sub></p>
","18","4962361"
"<p>In the first case you have one array object pointing to fifty array objects holding 8 int's.
So 1 + 50 array objects + fifty pointers in the first array object.</p>

<p>In the second case you have one array object pointing to 8 array objects holding 50 int's.
So 1 + 8 array objects + eight pointers in the first array object.  Holding the int's is a wash. </p>

<p>There is not a good way to evaluate CPU usage for this.</p>
","4","578798"
"<p>Creating a 400 dimensional array would be harder to maintain/read in the long run and would also waste a lot of memory for you. I would suggest that you create a class to store your data and start adding the objects of this class to any of the implementation of the <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow"">java.util.List interface.</a> </p>

<p>This way you're storing your data in a much more readable format as well.</p>
","1","11331149"
"<p>If you want to preserve your Order then it is best to use <strong>LinkedHashSet</strong>.
Because if you want to pass this List to an Insert Query by Iterating it, the order would be preserved.</p>

<p>Try this</p>

<pre><code>LinkedHashSet link=new LinkedHashSet();
List listOfValues=new ArrayList();
listOfValues.add(link);
</code></pre>

<p>This conversion will be very helpful when you want to return a List but not a Set.</p>
","3","203984"
"<p>The source code for this one is available:</p>

<pre><code> http://software.rubikscube.info/AnimCube/
</code></pre>

<p>Your in luck, it's Java. :)</p>

<p>This paper shows different ways to model the cube -</p>

<p><a href=""http://portal.acm.org/citation.cfm?id=801107&amp;coll=portal&amp;dl=ACM"" rel=""nofollow"">http://portal.acm.org/citation.cfm?id=801107&amp;coll=portal&amp;dl=ACM</a></p>

<p>and another exploratory paper...</p>

<p><a href=""http://www.chilton.com/~jimw/rubik.html"" rel=""nofollow"">http://www.chilton.com/~jimw/rubik.html</a></p>

<p>but a simple answer would be a 3x3x3 array with 3 digits.</p>
","3","5201092"
"<p>Do like below as you can do this kind of <strong>assignment during initialization only</strong>.</p>

<p>Also note, <strong>there is no dimension parameter required(allowed) in this case</strong></p>

<pre><code>    int[] newArray = new int[]{8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8,49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0,81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65,52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91,22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80,24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50,32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70,67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21,24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72,21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95,78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92,16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57,86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58,19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40,4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66,88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69,4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36,20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16,20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54,1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48};
</code></pre>
","4","12961906"
"<p>What you can do is use a BigInteger to encode the 400 dimensions as an integer and use this as a key to a HashMap or TreeMap. Your array needs to be very, very, very sparse or you will quickly reach your memory limit. Even 400 dimensions of size 2 is <code>2.6e120</code></p>
","2","11331149"
"<p>It is possible to remove duplicates from arraylist without using <strong>HashSet</strong> or <strong>one more arraylist</strong>. </p>

<p>Try this code..</p>

<pre><code>    ArrayList&lt;String&gt; lst = new ArrayList&lt;String&gt;();
    lst.add(""ABC"");
    lst.add(""ABC"");
    lst.add(""ABCD"");
    lst.add(""ABCD"");
    lst.add(""ABCE"");

    System.out.println(""Duplicates List ""+lst);

    Object[] st = lst.toArray();
      for (Object s : st) {
        if (lst.indexOf(s) != lst.lastIndexOf(s)) {
            lst.remove(lst.lastIndexOf(s));
         }
      }

    System.out.println(""Distinct List ""+lst);
</code></pre>

<p>Output is</p>

<pre><code>Duplicates List [ABC, ABC, ABCD, ABCD, ABCE]
Distinct List [ABC, ABCD, ABCE]
</code></pre>
","21","203984"
"<p>Array has no <code>indexOf()</code> method.</p>

<p>Maybe this Apache Commons Lang <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/ArrayUtils.html"" rel=""noreferrer""><code>ArrayUtils</code></a> method is what you are looking for</p>

<pre><code>import org.apache.commons.lang3.ArrayUtils;

String[] colours = { ""Red"", ""Orange"", ""Yellow"", ""Green"" };

int indexOfYellow = ArrayUtils.indexOf(colours, ""Yellow"");
</code></pre>
","66","4962361"
"<pre><code>List&lt;Object&gt; array = new ArrayList&lt;Object&gt;();
</code></pre>

<p>Each class is of the type object, so this should do it.</p>
","4","20133119"
"<p>You can create a method that accepts any type of array just like this:</p>

<pre><code>public &lt;T&gt; void MyMethod(List&lt;T&gt; mylist){
    System.out.println(mylist);
}
</code></pre>
","1","20133119"
"<p>If you are using the <a href=""http://www.springsource.org/spring-framework/"">Spring Framework</a> then you have the <a href=""http://static.springsource.org/spring/docs/2.0.x/api/org/springframework/util/StringUtils.html"">StringUtils</a> class:</p>

<pre><code>import static org.springframework.util.StringUtils.arrayToDelimitedString;

arrayToDelimitedString(new String[] {""A"", ""B"", ""C""}, ""\n"");
</code></pre>
","9","1515437"
"<pre><code>char[] ch = ?
new String(ch).getBytes();
</code></pre>

<p>or</p>

<pre><code>new String(ch).getBytes(""UTF-8"");
</code></pre>

<p>to get non-default charset.</p>

<p><strong>Update:</strong> Since Java 7: <code>new String(ch).getBytes(StandardCharsets.UTF_8);</code></p>
","76","5513144"
"<p>To answer the heading of your question,</p>

<p>Object is superset of all objects. So you can achieve it by creating an array of Object types. You can insert any type into that array.</p>

<p>eg.</p>

<pre><code>ArrayList&lt;Object&gt; list = new ArrayList&lt;Object();
</code></pre>

<p>To answer your question i.e. to create a method which can accept any number of arrays of any type use variable arguments.</p>

<p>eg.</p>

<pre><code>public void method(Object ... params) { &lt;your code&gt;  }  

// This method will accept any number of parameters of any type.
// If it is specific to ArrayLists, use ArrayList&lt;Object&gt; as the parameter type.
</code></pre>
","1","20133119"
"<p>As others have already said, there is no utility and creating one yourself wouldn't be hard, for example using <em>old school</em> for loops:</p>

<pre><code>public List&lt;Object&gt; flatten( List&lt;Object[]&gt; source )
{
    // if ( source == null ) return null; // which check you use it up to you
    List&lt;Object&gt; result = new ArrayList&lt;Object&gt;();
    if ( source == null ) return result; // Personally I like this check

    for ( Object[] array: source )
    {
        if ( array == null ) continue; // skip nulls
        for ( Object object: array )
        {
            result.add(object);
        }
    }
    return result;
}
</code></pre>
","1","27604551"
"<pre><code>new Vector(Arrays.asList(array))
</code></pre>
","3","4400642"
"<blockquote>
  <p>Takes in arrays, and makes them all the length of the longest one</p>
</blockquote>

<p>ArrayList of arrays is a good way to do it. Arrays.copyOf pads the shorter arrays with null</p>

<pre><code>void f(ArrayList&lt;Object[]&gt; list){
        int maxLen = 0;
        for(int i=0;i&lt;list.size();i++){
            maxLen = Math.max(maxLen, list.get(i).length);
        }

        for(int i=0;i&lt;list.size();i++){
            if(list.get(i).length &lt; maxLen)
            list.set(i, Arrays.copyOf(list.get(i), maxLen));
        }
    }
</code></pre>
","0","20133119"
"<p>I wouldn't try a 1 dimensional array. But you could have a 3 dimensional array.</p>

<p>And array of 3x3 arrays of each side.</p>
","2","5201092"
"<p>Since all arrays are objects you can make the method take varargs of Object. Here's how to do literally what you are asked. This could be somewhat simplified if you exclude arrays of primitives (forcing wrapper types like <code>Integer[]</code> and <code>Boolean[]</code>) so the parameter was <code>Object[]...</code>. Then you would not need reflection and the big long if/else block and could return a <code>List&lt;Object[]&gt;</code>. In that case the method would be much shorter. Otherwise this kind of thing is very inconvenient.</p>

<pre><code>import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public static List&lt;Object&gt; conform(Object... arrays) {
    ArrayList&lt;Object&gt; out = new ArrayList&lt;Object&gt;(arrays.length);

    int longest = 0;
    for (Object a : arrays) {
        if (!a.getClass().isArray()) {
            throw new IllegalArgumentException(a + "" not an array"");
        }
        int length = Array.getLength(a);
        if (length &gt; longest) longest = length;
    }

    for (Object a : arrays) {
        if (a instanceof Object[]) {
            out.add(Arrays.copyOf((Object[])a, longest));

        } else if (a instanceof boolean[]) {
            out.add(Arrays.copyOf((boolean[])a, longest));

        } else if (a instanceof char[]) {
            out.add(Arrays.copyOf((char[])a, longest));

        } else if (a instanceof byte[]) {
            out.add(Arrays.copyOf((byte[])a, longest));

        } else if (a instanceof short[]) {
            out.add(Arrays.copyOf((short[])a, longest));

        } else if (a instanceof int[]) {
            out.add(Arrays.copyOf((int[])a, longest));

        } else if (a instanceof long[]) {
            out.add(Arrays.copyOf((long[])a, longest));

        } else if (a instanceof float[]) {
            out.add(Arrays.copyOf((float[])a, longest));

        } else if (a instanceof double[]) {
            out.add(Arrays.copyOf((double[])a, longest));
        }
    }

    return out;
}
</code></pre>
","0","20133119"
"<p>It's <strong>not</strong> bad practice if you modify the vertex array when you draw it as ordinary vertex array.</p>

<p><strong>It's</strong> bad practice to modify the vertex array if you use vertex buffer objects in your draw method. That's because you have to reupload it to your VRAM once it is edited.</p>
","1","4703550"
"<p>Using <strong>deepHashCode</strong> is indeed correct if you want two byte arrays containing the same bytes to have equivalent hash codes, you just need some additional casting for the byte[] array.</p>

<pre><code>import java.utils.Arrays;

public class A {
  public static void main(String[] args) {
    byte[] a = {10,32,-43,80};
    byte[] b = {13,-40};
    byte[] c = {10,32,-43,80};
    // A and C will have different hash codes
    System.out.println(a.hashCode());
    System.out.println(b.hashCode());
    System.out.println(c.hashCode());
    // A and C will now have equivalent hash codes
    System.out.println(Arrays.deepHashCode(new Object[]{a}));
    System.out.println(Arrays.deepHashCode(new Object[]{b}));
    System.out.println(Arrays.deepHashCode(new Object[]{c}));
  }
}
</code></pre>

<p>This results in output similar to...</p>

<pre><code>// Hash Codes
a = 16130931
b = 26315233
c = 32716405
// Deep hash codes
a = 1250961
b = 1355
c = 1250961
</code></pre>
","1","4671858"
"<p>I'm not sure that you will reduce a video's size by putting each byte into an array.</p>

<p>If I have a video that is 4,000 bytes then you will have an array of exactly 4,000 bytes (including all of the overhead of the array itself in memory).</p>

<p>There is a method on a <code>ParseFile</code> object called <code>.getData()</code> that will return a <code>byte[] array</code>.  So if you have a video stored in <code>Video</code> class in the <code>data</code> column you can do something like this:</p>

<p><code>byte[] bytes_of_video = videoObject.getParseFile(""data"").getBytes();</code></p>

<p>Now you have a byte array of the video object but the byte array will be just as big as the video file since no compression took place.  If you want to compress the video file you can use Android's zlib compression with <a href=""http://developer.android.com/reference/java/util/zip/Deflater.html"" rel=""nofollow"">Deflater</a>:</p>

<pre><code>byte[] originalBytes = bytes_of_video;

     Deflater deflater = new Deflater();
     deflater.setInput(originalBytes);
     deflater.finish();

     ByteArrayOutputStream baos = new ByteArrayOutputStream();
     byte[] buf = new byte[8192];
     while (!deflater.finished()) {
         int byteCount = deflater.deflate(buf);
         baos.write(buf, 0, byteCount);
     }
     deflater.end();

     byte[] compressedBytes = baos.toByteArray();
</code></pre>

<p>I don't know if you are wanting to save space on the server or on the device but to save bandwidth costs you could store the compressed video data in your <code>ParseFile</code> object in the server and then decompress the file on the device when it's ready to be viewed/used.  But a compressed video file on the device is not very useful since you won't be able to view/edit/use it while it's in a compressed format.</p>
","1","28148696"
"<p>If you're going to be requiring different set functionaltiy, I'd advise extending ArrayList with your own class. This way, you won't have to define your behavior in more than one place.</p>

<pre><code>// You can come up with a more appropriate name
public class SizeGenerousArrayList&lt;E&gt; extends java.util.ArrayList&lt;E&gt; {

    @Override
    public E set(int index, E element) {
        this.ensureCapacity(index+1); // make sure we have room to set at index
        return super.set(index,element); // now go as normal
    }

    // all other methods aren't defined, so they use ArrayList's version by default

}
</code></pre>
","5","5617175"
"<p>Create a new list, and populate that one.</p>

<pre><code>List&lt;MyType&gt; originalList = ...
List&lt;MyType&gt; newList = new ArrayList&lt;&gt;(originalList);

for(MyType type : originalList)
{
  // Some decisions
  newList.add(new MyType());
}
</code></pre>
","2","11624220"
"<p>There are three approaches to avoid above exception</p>

<ol>
<li><p>You can convert the list to an array and then iterate on the array. This approach works well for small or medium size list but if the list is large then it will affect the performance a lot.</p></li>
<li><p>You can lock the list while iterating by putting it in a synchronized block. This approach is not recommended because it will cease the benefits of multithreading.</p></li>
<li><p>If you are using JDK1.5 or higher then you can use ConcurrentHashMap and CopyOnWriteArrayList classes. It is the recommended approach.</p></li>
</ol>
","2","11624220"
"<p>You could accomplish this by using <code>substring()</code> to pick apart and recreate the string, but another way is to just convert it to a <code>char[]</code> and operate on that, e.g.:</p>

<pre><code>char[] data = captureString[0].toCharArray();
data[strOneRand] = Character.toUpperCase(data[strOneRand]); // or whatever
String outputFinal = new String(data);
</code></pre>

<p>An example of accomplishing this with <code>substring()</code> can be found in the accepted answer of <a href=""https://stackoverflow.com/questions/6952363/java-replace-a-character-at-a-specific-index-in-a-string"">Replace a character at a specific index in a string?</a>. An example of doing it with a <code>StringBuilder</code> can be found there as well.</p>
","1","22420962"
"<p>Have you tried this syntax?</p>

<pre><code>        int[] newArray = new int[] {8,2,22,97,38,15,0,40,0,75,4,5,7,78,52,12,50,77,91,8,49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,4,56,62,0,81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,3,49,13,36,65,52,70,95,23,4,60,11,42,69,24,68,56,1,32,56,71,37,2,36,91,22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80,24,47,32,60,99,3,45,2,44,75,33,53,78,36,84,20,35,17,12,50,32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70,67,26,20,68,2,62,12,20,95,63,94,39,63,8,40,91,66,49,94,21,24,55,58,5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72,21,36,23,9,75,0,76,44,20,45,35,14,0,61,33,97,34,31,33,95,78,17,53,28,22,75,31,67,15,94,3,80,4,62,16,14,9,53,56,92,16,39,5,42,96,35,31,47,55,58,88,24,0,17,54,24,36,29,85,57,86,56,0,48,35,71,89,7,5,44,44,37,44,60,21,58,51,54,17,58,19,80,81,68,5,94,47,69,28,73,92,13,86,52,17,77,4,89,55,40,4,52,8,83,97,35,99,16,7,97,57,32,16,26,26,79,33,27,98,66,88,36,68,87,57,62,20,72,3,46,33,67,46,55,12,32,63,93,53,69,4,42,16,73,38,25,39,11,24,94,72,18,8,46,29,32,40,62,76,36,20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,4,36,16,20,73,35,29,78,31,90,1,74,31,49,71,48,86,81,16,23,57,5,54,1,70,54,71,83,51,54,69,16,92,33,48,61,43,52,1,89,19,67,48};
</code></pre>
","1","12961906"
"<p>you just need to do this </p>

<pre><code>char[] charArray = captureString[0].toCharArray();
charArray[strOneRand] = THE_NEW_CHARECTOR_YOU_WANT_TO_REPLACE;
String outputFinal = String.copyValueOf(charArray);
</code></pre>
","1","22420962"
"<p>Try the <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/Random.html#nextBytes(byte[])"" rel=""noreferrer""><code>Random.nextBytes</code></a> method:</p>

<pre><code>byte[] b = new byte[20];
new Random().nextBytes(b);
</code></pre>
","281","5683206"
"<p>you can also use the utility class StringBuilder like this:</p>

<pre><code>    StringBuilder resultString = new StringBuilder(captureString[0]);
    char replaceMe = captureString[0].charAt(strOneRand);
    resultString.setCharAt(strOneRand, Character.toUpperCase(replaceMe));

    System.out.println(resultString.toString());
</code></pre>

<p>The assignment is just for clarification, good luck!</p>
","1","22420962"
"<p>You need to query the Image media store to retrieve the data.</p>

<pre><code>Cursor c = managedQuery(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                    new String[] { /*columns you want */, null, null, null);
c.moveToFirst();
while(!c.isLast()) {
// add some data to your array list
}
</code></pre>
","1","5353444"
"<p>You can't assign an array that way. Instead, you should use the proper initialization syntax:</p>

<pre><code>int[] newArray = new int[]{1,2,3,4,...};
</code></pre>

<p>NetBeans is complaining because <code>newArray = {1,2,3,4,...}</code> is bad syntax.</p>
","2","12961906"
"<p>You can implement a <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html"" rel=""nofollow"">Comparator</a> that uses the length and use <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#sort-T:A-java.util.Comparator-"" rel=""nofollow"">Arrays.sort</a> with your Comparator. The Comparator could look like this:</p>

<pre><code>class StringComparator implements Comparator&lt;String&gt;{
   public int compare(String o1, String o2){
      return Integer.compare(o1.length(), o2.length());
   }
}
</code></pre>

<p>Now you could sort with the following call:</p>

<pre><code>Arrays.sort(strings, new StringComparator());
</code></pre>
","2","28214631"
"<p><strong>ArrayList uses an Array of Object to store the data internally.</strong></p>

<p>When you initialize an ArrayList, an array of size <strong>10</strong> (<strong>default capacity</strong>) is created and an element added to the ArrayList is actually added to this array. 10 is the default size and it can be passed as a parameter while initializing the ArrayList.</p>

<p>When adding a new element, if the array is full, then a new array of 50% more the initial size is created and the last array is copied to this new array so that now there are empty spaces for the new element to be added.</p>

<p>Since the underlying data-structure used is an array, it is fairly easy to add a new element to the ArrayList as it is added to the end of the list. When an element is to be added anywhere else, say the beginning, then all the elements shall have to move one position to the right to create an empty space at the beginning for the new element to be added. This process is <strong>time-consuming (linear-time)</strong>. But the Advantage of ArrayList is that <strong>retrieving an element</strong> at any position is <strong>very fast (constant-time)</strong>, as underlying it is simply using an array of objects.</p>
","11","3467965"
"<p>In Java 8, this can be done in one line,</p>

<pre><code>Arrays.sort(randomString, (s1,s2) -&gt; Integer.compare(s1.length(), s2.length()));
</code></pre>

<p>If you want reverse order (higher-length to lower-length),</p>

<p>change it to, </p>

<pre><code>Arrays.sort(randomString, (s1,s2) -&gt; Integer.compare(s2.length(), s1.length()));
</code></pre>

<p><strong>Another approach,</strong></p>

<p>use <code>Comparator.comparing(String::length)</code>,</p>

<pre><code>Arrays.sort(yourArray, Comparator.comparing(String::length)); 
</code></pre>

<p>to reverse the order,</p>

<pre><code>Arrays.sort(yourArray, Comparator.comparing(String::length).reversed()); 
</code></pre>
","3","28214631"
"<p>Instead of using an iterator, you can use a for loop with an index.  For example:</p>

<pre><code>int originalLength = list.length();
for (int i = 0; i &lt; originalLength; i++) {
  MyType mt = list.get(i);
  //... processing
  //... insertions
}
</code></pre>
","10","11624220"
"<pre><code>String a = captureString[0].substring(0,strOneRand);
String b = captureString[0].substring(strOneRand,strOneRand+1).toUpperCase;
String c = captureString[0].substring(strOneRand+1);

System.out.println(a+b+c);
</code></pre>

<p>replace method will make the first occurrence of chosen character to upper case.
if input string is ""aaaaa"", you will always get ""Aaaaa"".</p>
","1","22420962"
"<p>List is in interface while ArrayList is a class.</p>

<p>See <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html"" rel=""noreferrer"">ArrayList</a>, and <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"" rel=""noreferrer"">List</a>.</p>

<p>E.g, you can't use this setup:</p>

<p><code>List&lt;String&gt; list = new List&lt;String&gt;();</code>... Because it's an interface.</p>

<p>However, this works:</p>

<p><code>ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();</code></p>

<p>Also... You can do as duffymo says below, which is more or less the same as implementing the <code>List</code> interface (making your own list implementation).</p>
","24","6867484"
"<p>An element is over-written if it already exists at an index, that is the default behaviour: <a href=""http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html#set%28int,%20E%29"" rel=""nofollow noreferrer"">Javadoc</a>.</p>
<p>Or am I missing your point completely?</p>
","2","5617175"
"<p>You want to use a <code>ListIterator</code>.  You can get one of these from any kind of list, though for efficiency you probably want to get one from a <code>LinkedList</code>.</p>

<pre><code>import java.util.*;
class TestListIterator {
  public static void main(String[]args) {
    List&lt;Integer&gt; L = new LinkedList&lt;Integer&gt;();
    L.add(0);
    L.add(1);
    L.add(2);
    for (ListIterator&lt;Integer&gt; i = L.listIterator(); i.hasNext(); ) {
      int x = i.next();
      i.add(x + 10);
    }
    System.out.println(L);
  }
}
</code></pre>

<p>Prints <code>[0, 10, 1, 11, 2, 12]</code>.</p>
","6","11624220"
"<p>The best and also Object Oriented approach is to Create a class with surname, forename and result as attributes(instance variables) like below:</p>

<pre><code>class Student{
private String surname;
private String forename;
private String result;
public Details(String surname, String forename, String res){
   //initialize properties here
  }
}
</code></pre>

<p>now, create a List which only accepts <code>Student</code> Object.</p>

<pre><code>List&lt;Student&gt; list = new ArrayList&lt;Student&gt;();
list.add(new Student(""surname"", ""forname"", ""pass""));
</code></pre>
","3","13712648"
"<p>have a look at xstream - <a href=""http://x-stream.github.io/"" rel=""nofollow"">http://x-stream.github.io/</a>. Very easy to use library to convert XML into java objects.</p>
","1","6937954"
"<p>You could do something like:</p>

<pre><code>Integer array[] = {1, 4, 3, 2};
int max = Collections.max(Arrays.asList(array));
System.out.println(max);
Output:
4
</code></pre>
","0","28523632"
"<p>No there isn't. An XML is a tree datastructure that has no trivial translation to a flat array.</p>

<p>Of course you can write this function yourself, if you know what you want. Also there are many 3rd party libraries that allow conversion from XML to Java objects, but it's hard to recommend one without knowing what your problem exactly is.</p>
","1","6937954"
"<p>Here is what I would do in your situation:</p>

<pre><code>public void replaceChar(String strPassed, int index){

    char strArray[] = strPassed.toCharArray(); 
    strArray[index] = (char)(strArray[index] - 32);
    strPassed[0] = new String(strArray);

}
</code></pre>

<p>and then wherever I wanted to convert the character into UpperCase:</p>

<pre><code>replaceChar(capturString[0], strOneRand);
</code></pre>
","1","22420962"
"<p>You may use a <code>ListIterator</code> which has support for a remove/add method during the iteration itself.</p>

<pre><code>ListIterator&lt;Book&gt; iter = books.listIterator();
while(iter.hasNext()){
    if(iter.next().getIsbn().equals(isbn)){
        iter.add(new Book(...));
    }
}
</code></pre>
","47","11624220"
"<p>JList.getSelectedIndices().length would give you the array length  :) Refer Javadocs mate</p>
","2","14852648"
"<p>Sure. </p>

<pre><code>array.length;
array[0].length;
array[1].length;
</code></pre>
","0","7323890"
"<p>Use <a href=""http://download.oracle.com/javame/config/cldc/ref-impl/midp2.0/jsr118/javax/microedition/lcdui/Image.html#createImage%28byte%5B%5D,%20int,%20int%29"" rel=""nofollow"">createImage(byte[] imageData, int imageOffset, int imageLength)</a> an example can be seen <a href=""http://www.java2s.com/Code/Java/J2ME/ImmutableImageFromByteArray.htm"" rel=""nofollow"">here</a> </p>
","0","5693394"
"<p>You should consider using <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#contains(java.lang.Object)"" rel=""nofollow"">ArrayList.contains()</a></p>

<pre><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
// populate your list here
Integer i = 1;
System.out.println(list.contains(i));
</code></pre>

<p>You have to autobox primitive <code>int</code> type into <code>Integer</code> since <code>ArrayList&lt;T&gt;</code> uses generics and they <a href=""http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#instantiate"" rel=""nofollow"">don't allow to use primitive types</a>.</p>

<p><strong>EDITED</strong> for purists.</p>
","1","29153053"
"<p>Neither. What we may sometimes think of as two-dimensional array in Java is actually an array of references to arrays. It's not stored linearly in memory. </p>

<p>The Java Language specification notes this in the introduction:</p>

<blockquote>
  <p>The language supports arrays of arrays, rather than multidimensional arrays.</p>
</blockquote>

<p>This has several implications.</p>

<ul>
<li>Arrays of arrays can be <a href=""https://en.wikipedia.org/wiki/Jagged_array"" rel=""nofollow noreferrer"">jagged</a> -- member arrays can have different lengths.</li>
<li>The members of an outer array are references, and can be null.</li>
<li>Cloning an outer array is shallow -- the member arrays are shared between the original and the clone.</li>
</ul>

<p>From the <a href=""https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-10.2"" rel=""nofollow noreferrer"">JLS, section 10.2, ""Array Variables""</a>: </p>

<blockquote>
  <p>A single variable of array type may contain references to arrays of different lengths, because an array's length is not part of its type.</p>
</blockquote>

<p>From the <a href=""https://docs.oracle.com/javase/specs/jls/se11/html/jls-10.html#jls-10.7"" rel=""nofollow noreferrer"">JLS, section 10.7, ""Array Members""</a>:</p>

<blockquote>
  <p>A clone of a multidimensional array is shallow, which is to say that it creates only a single new array. Subarrays are shared.</p>
</blockquote>
","4","6630990"
"<p>Try this:</p>

<pre><code>String[] array = ""1,2,3,4,5"".split("","");
int[] result = new result[array.length];
for (int i = 0; i &lt; array.length; i++) {
    try {
         result[i] = Integer.parseInt(array[i]);
    } catch (NumberFormatException nfe) {};
}
</code></pre>
","2","15271306"
"<p>Java doesn't have multi-dimensional arrays. It has arrays of arrays. So for instance,</p>

<pre><code>int[][]
</code></pre>

<p>...is an array of <code>int[]</code> (and of course <code>int[]</code> is an array of <code>int</code>).</p>

<p>Consequently, Java is neither column-major nor row-major order (but see note below about how to read <code>a[2][3]</code>), because while a given array's entries are stored in a contiguous block of memory, the subordinate arrays those entries point to are object references to completely separate, unrelated blocks of memory. This also means that Java's arrays of arrays are inherently <em>jagged</em>: The entry at <code>[0]</code> might refer to a 3-slot array, the one at <code>[1]</code> might refer to a 4-slot array, <code>[2]</code> might not refer to an array at all (it could have <code>null</code>), and perhaps <code>[3]</code> refers to a 6-slot array.</p>

<p>A picture is worth 1k-24 words and all that:</p>

<pre>
                         +−−−−−−−−+
                   +−−−−>| int[]  |
+−−−−−−−−−−−+      |     +−−−−−−−−+
|  int[][]  |      |     | 0: int |
+−−−−−−−−−−−+      |     | 1: int |
| 0: int[]  |−−−−−−+     | 2: int |
| 1: int[]  |−−−−−−+     +−−−−−−−−+
| 2: null   |      |
| 3: int[]  |−−+   |     +−−−−−−−−+
+−−−−−−−−−−−+  |   +−−−−>| int[]  |
               |         +−−−−−−−−+
               |         | 0: int |
               |         | 1: int |
               |         | 2: int |
               |         | 3: int |
               |         +−−−−−−−−+
               |
               |         +−−−−−−−−+
               +−−−−−−−−−| int[]  |
                         +−−−−−−−−+
                         | 0: int |
                         | 1: int |
                         | 2: int |
                         | 3: int |
                         | 4: int |
                         | 5: int |
                         +−−−−−−−−+
</pre>

<p>Once you know that, you know that (say) <code>a[2][3]</code> means ""Get the array referenced by the entry at index <code>2</code> of <code>a</code>, then get the entry referenced by index <code>3</code> of that subordinate array."" I think of it as fairly similar to row-major order, but it's not quite the same thing.</p>
","84","6630990"
"<p>Use StringTokenizer which will split string by comma and then put those values/tokens in array of integers.</p>

<pre><code>public static int[] getIntegers(String numbers) {
    StringTokenizer st = new StringTokenizer(numbers, "","");
    int[] intArr = new int[st.countTokens()];
    int i = 0;
    while (st.hasMoreElements()) {
        intArr[i] = Integer.parseInt((String) st.nextElement());
        i++;
    }
    return intArr;
}
</code></pre>
","1","15271306"
"<p>Elegant way to fill <strong><em>combo box</em></strong> with an <strong><em>array list</em></strong> :</p>

<pre><code>List&lt;String&gt; ls = new ArrayList&lt;String&gt;(); 
jComboBox.setModel(new DefaultComboBoxModel&lt;String&gt;(ls.toArray(new String[0])));
</code></pre>
","19","1291704"
"<p>A <code>List</code> defines the interface that <code>ArrayList</code> uses, that allows it to implement methods that will allow all other classes that implement List to be used together or in a similar way. An <code>ArrayList</code> is always also a <code>List</code>, but an <code>List</code> isn't necessarily an <code>ArrayList</code>.</p>

<p>That is, <code>ArrayList</code> implements <code>List</code> (among a few other interfaces).</p>
","2","6867484"
"<p>In Java 8:</p>

<pre><code>List&lt;String&gt; deduped = list.stream().distinct().collect(Collectors.toList());
</code></pre>

<p>Please note that the <a href=""https://stackoverflow.com/questions/2265503/why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java"">hashCode-equals</a> contract for list members should be respected for the filtering to work properly.</p>
","139","203984"
"<p>In Java, you only have one dimensional arrays.</p>

<p>2D arrays are basically just one dimensional arrays of one dimensional arrays.</p>

<pre><code>int[ ][ ] table;

table = new int[3][ ];

table[0] = new int[5];

table[1] = new int[5];

table[2] = new int[5];
</code></pre>
","5","6630990"
"<p>From zvzdhk:</p>

<pre><code>String[] array = ""1,2,3,4,5"".split("","");
</code></pre>

<p>Then, parse your integers:</p>

<pre><code>int[] ints = new int[array.length];
for(int i=0; i&lt;array.length; i++)
{
    try {
        ints[i] = Integer.parseInt(array[i]);           
    } catch (NumberFormatException nfe) {
        //Not an integer 
    }
}
</code></pre>
","6","15271306"
"<p>To the first question: There is no variable <code>cost</code> within <code>addSession()</code>. If you have not defined an attribute <code>cost</code> within Session then this is the problem.</p>

<p>To the second question: I am not quite sure that I understand your problem correctly. You have an <code>int[] values</code> and want to know, whether a given int <code>x</code> is within that array? If so, you can achieve this with this code snippet:</p>

<pre><code>for (int value : values) {
    if (value == x) {
        // Put code, that should be executed when the value is found, here
    }
}
</code></pre>
","0","29608204"
"<p>Can you place the Super class Record also in your question?
Probably, you need to check the super constructor, which is differing from your sub class constructor.</p>
","0","29608204"
"<p>I believe you can create a new Vector using your ArrayList and pass that to the JCombobox Constructor.</p>

<pre><code>JComboBox&lt;String&gt; combobox = new JComboBox&lt;String&gt;(new Vector&lt;String&gt;(myArrayList));
</code></pre>

<p>my example is only strings though.</p>
","3","1291704"
"<p>Yes. Length dimensions vary from row to row. You can do <code>matrix[i].length</code> to get the length of row <code>i</code>. If you know the matrix is square, all the row lengths will equals <code>matrix[0].length</code> anyways, so it doesn't matter.</p>

<p>If you're trying to iterate through all elements:</p>

<pre><code>for(int i = 0; i &lt; matrix.length; i++){
    for(int j &lt; 0; j &lt; matrix[i].length; j++){
        count += matrix[i][j];
    }
}
</code></pre>

<p>The same principle can be applied for any number of dimensions. For loops, you need 1 nested loop per dimension. For lengths, each bracketed part is actually a new element, so 3d array <code>ar</code> will yield a 2d array with <code>ar[i]</code>, 1d with <code>ar[i][j]</code>, and 0d (single element of the array type) with <code>ar[i][j][k]</code></p>
","3","7323890"
"<p>List is an interface; ArrayList is a class that implements the List interface. </p>

<p>Interfaces define the method signatures that are required, but say nothing about how they are implemented.  </p>

<p>Classes that implement an interface promise to provide public implementations of methods with the identical signatures declared by the interface.</p>
","14","6867484"
"<pre><code>String [] str = ""1,2,3,4,5"".split("","");
int arrayInt[] = new int[str.length];
for (int i = 0; i &lt; str.length; i++) 
    arrayInt[i]=Integer.valueOf(str[i]);
</code></pre>
","0","15271306"
"<p>Instinctively one thinks geometrically: horizontal (X) axis and then vertical (Y) axis. This is not, however, the case with a 2D array, rows come first and then columns.</p>

<p>Consider the following analogy: in geometry one walks to the ladder (X axis) and climbs it (Y axis). Conversely, in Java one descends the ladder (rows) and walks away (columns).</p>
","15","11641985"
"<p>For primitives, if you want to avoid boxing, <a href=""http://code.google.com/p/guava-libraries/"">Guava</a> has helpers for primitive arrays e.g. <a href=""http://guava-libraries.googlecode.com/svn/tags/release09/javadoc/com/google/common/primitives/Ints.html#indexOf%28int%5B%5D,%20int%29"">Ints.indexOf</a>(int[] array, int target)</p>
","21","4962361"
"<pre><code>    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
    HashSet&lt;String&gt; unique = new LinkedHashSet&lt;String&gt;();
    HashSet&lt;String&gt; dup = new LinkedHashSet&lt;String&gt;();
    boolean b = false;
    list.add(""Hello"");
    list.add(""Hello"");
    list.add(""how"");
    list.add(""are"");
    list.add(""u"");
    list.add(""u"");

    for(Iterator iterator= list.iterator();iterator.hasNext();)
    {
        String value = (String)iterator.next();
        System.out.println(value);

        if(b==unique.add(value))
            dup.add(value);
        else
            unique.add(value);


    }
    System.out.println(unique);
    System.out.println(dup);
</code></pre>
","0","203984"
"<p>According to the <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow noreferrer"">java docs</a>, List is just an interface, and ArrayList is one of the classes that implement it. There is no inherent efficiency advantage to using ArralyList specifically instead of List-typed references to an ArrayList object.</p>

<p>However, when it comes to ""efficiency"", there can be a difference between different implementations of the List interface. For instance there can be  a small efficiency difference between a LinkedList and an ArrayList, depending on how you're using them.</p>

<p>To quote the java docs on the <a href=""http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html"" rel=""nofollow noreferrer"">ArrayList</a> page, </p>

<blockquote>
  <p>The add operation runs in amortized constant time, that is, adding n elements requires O(n) time. All of the other operations run in linear time (roughly speaking). The constant factor is low compared to that for the LinkedList implementation.</p>
</blockquote>

<p>In other words, the performance difference will probably be negligible, but you may see some advantage from using an ArrayList (as opposed to a LinkedList).</p>

<p>In case you're interested, ArrayList is implemented with an array that is resized from time to time (most likely whenever your collection doubles in size), which is quite different from the implementation of a LinkedList (see wikipedia for details).</p>
","0","6867484"
"<p>Consider a line like the following:</p>

<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();
</code></pre>

<p>If you're new to object-oriented architectures, you might have expected instead to see something like <code>ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();</code>. After all, you've just said that it's a new <code>ArrayList</code>, so shouldn't you store it in a variable of type <code>ArrayList</code>?</p>

<p>Well, you certainly can do that. However, <code>List</code> is an interface--like a template of sorts--that <code>ArrayList</code> is said to inherit. It is a contract that says ""anytime you use a <code>List</code> implementation, you can expect these methods to be available"". In the case of <code>List</code>, the methods are things like <code>add</code>, <code>get</code>, etc.</p>

<p>But <code>ArrayList</code> is only one implementation of <code>List</code>. There are others, such as <code>LinkedList</code>. The two have the same interface, and can be used the same way, but work very differently behind the scenes. Where <code>ArrayList</code> is ""random"" access, meaning that it directly finds a specific element of the array without iterating through the whole list, <code>LinkedList</code> does have to start from the first element and go one-by-one until it gets to the element you need. </p>

<p>The thing is, while you do need to specify which you want when you create the object, you generally only need to communicate no more than the fact that it is a <code>List</code>, so you simply say that's what it is. <code>List</code> communicates that you have a collection that is intended to be in the order that it is given. If you don't need to communicate that much, you might consider passing it around as a <code>Collection</code>, which is another interface (a super-interface of <code>List</code>). Or, if all you need to communicate is that you can iterate over it, you might even call it an <code>Iterable</code>.</p>
","21","6867484"
"<p>Yes.</p>

<pre><code>@Test
public void test(){
    long[][][] multi = new long[3][2][1];
    System.out.println(multi.length); //3
    System.out.println(multi[0].length); //2
    System.out.println(multi[0][0].length); //1
}
</code></pre>
","2","7323890"
"<p>How to use List and <code>ArrayList</code>, or other implementation of List, is <code>Polymorphism</code> and <code>Inheritance</code>, and also the reason why for using languages such as Java. </p>

<p>In simplicity, Polymorphism is many forms while Inheritance is reuse.</p>

<p>There can be many kinds of concrete and ready to us List that is available to you, such as ArrayList, <code>Vector</code>, <code>LinkedList</code> and <code>Stack</code>. The decision to use which comes from you, and if you look at the <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"" rel=""nofollow"">List API</a>, you would notice that all of these List implementations extend in one way or another from List.</p>
","1","6867484"
"<pre><code>ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();
Object[] objectList = arrayList.toArray();
String[] stringArray =  Arrays.copyOf(objectList,objectList.length,String[].class);
</code></pre>

<p>Using copyOf, ArrayList to arrays might be done also.</p>
","30","4042434"
"<p>The old school way was:</p>

<pre><code>public static void java.lang.System.arraycopy(Object src, int srcPos, 
         Object dest, int destPos, int length)
</code></pre>

<p>This copys from one existing array to another.  You have to allocate the new array yourself ... assuming that you are making a <em>copy of</em> an array.</p>

<p>From JDK 6 onwards, the <code>java.util.Arrays</code> class has a number of <code>copyOf</code> methods for making copies of arrays, with a new size.  The ones that are relevant are:</p>

<pre><code>public static &lt;T&gt; T[] copyOf(T[] original, int newLength)
</code></pre>

<p>and</p>

<pre><code>public static &lt;T,U&gt; T[] copyOf(U[] original, int newLength,
         Class&lt;? extends T[]&gt; newType)
</code></pre>

<p>This first one makes a copy using the original array type, and the second one makes a copy with a different array type.</p>

<p>Note that both arraycopy and the 3 argument copyOf have to check the types of each of the elements in the original (source) array against the target array type.  So both can throw type exceptions.  The 2 argument copyOf (in theory at least) does not need to do any type checking and therefore should be (in theory) faster.  In practice the relative performance will be implementation dependent.  For instance, <code>arraycopy</code> is often given special treatment by the JVM.</p>
","7","1366303"
"<p>Here's a working code, assuming you are using Java >= 7:</p>

<pre><code>public static void removeLine(String ans, String file) throws IOException {
    boolean foundLine = false;
    try (BufferedReader br = Files.newBufferedReader(Paths.get(file));
            BufferedWriter bw = Files.newBufferedWriter(Paths.get(file + "".tmp""))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] tokens = line.split(""::"", 2);
            if (tokens[0].equals(ans)) {
                foundLine = true;
            } else {
                if (foundLine) {
                    bw.write((Integer.parseInt(tokens[0]) - 1) + ""::"" + tokens[1]);
                } else {
                    bw.write(line);
                }
                bw.newLine();
            }
        }
    }
    Files.move(Paths.get(file + "".tmp""), Paths.get(file), StandardCopyOption.REPLACE_EXISTING);
}
</code></pre>

<p>It is not possible to delete a line from a file. What you need to do is read the existing file, write the contents you want to keep to a temporary file and then rename the temporary file to overwrite the input file.</p>

<p>Here, the temporary file is created in the same directory as the input file, with the extension <code>.tmp</code> added (note that you can also use <a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createTempFile%28java.nio.file.Path,%20java.lang.String,%20java.lang.String,%20java.nio.file.attribute.FileAttribute...%29"" rel=""nofollow""><code>Files.createTempFile</code></a> for this).</p>

<p>For each line that is read, we check if this is the line the user wants to delete.</p>

<ul>
<li>If it is, we update a boolean variable telling us that we just hit the line to be deleted and we do not copy this line to the temporary file.</li>
<li>If it is not, we have a choice:

<ul>
<li>Either we did not yet hit the line to be deleted. Then we simply copy what we read to the temporary file</li>
<li>Or we did and we need to decrement the first number and copy the rest of the line to the temporary file.</li>
</ul></li>
</ul>

<p>The current line is splitted with the help of <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-int-"" rel=""nofollow""><code>String.split(regex, limit)</code></a> (it splits the line only two times, thereby creating an array of 2 Strings: first part is the number, second part is the rest of the line).</p>

<p>Finally, the temporary file overwrites the input file with <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#move-java.nio.file.Path-java.nio.file.Path-java.nio.file.CopyOption...-"" rel=""nofollow""><code>Files.move</code></a> (we need to use the <a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardCopyOption.html#REPLACE_EXISTING"" rel=""nofollow""><code>REPLACE_EXISTING</code></a> option).</p>
","2","32537080"
"<p>Java is considered ""row major"", meaning that it does rows first. This is because a 2D array is an ""array of arrays"".</p>

<p>For example:  </p>

<pre><code>int[ ][ ] a = new int[2][4];  // Two rows and four columns.

a[0][0] a[0][1] a[0][2] a[0][3]

a[1][0] a[1][1] a[1][2] a[1][3]
</code></pre>

<p>It can also be visualized more like this:</p>

<pre><code>a[0] -&gt;  [0] [1] [2] [3]
a[1] -&gt;  [0] [1] [2] [3]
</code></pre>

<p>The second illustration shows the ""array of arrays"" aspect. The first array contains <code>{a[0] and a[1]}</code>, and each of those is an array containing four elements, <code>{[0][1][2][3]}</code>.</p>

<p>TL;DR summary:</p>

<pre><code>Array[number of arrays][how many elements in each of those arrays]
</code></pre>

<p>For more explanations, see also <em><a href=""http://www.willamette.edu/~gorr/classes/cs231/lectures/chapter9/arrays2d.htm"">Arrays - 2-dimensional</a></em>.</p>
","89","11641985"
"<p>Use iterators or enhanced for-loops to abstract away the explicit use of array indexes:</p>

<pre><code>Iterator&lt;Object&gt; myIterator = Arrays.asList(arrayOfObjects).iterator();
while(myIterator.hasNext()) {
    doSomething(myIterator.next());
}
</code></pre>

<p>or</p>

<pre><code>for(Object o : arrayOfObjects) {
    doSomething(o);
}
</code></pre>

<hr>

<p>Update:  you've updated the question; now it has an <code>ArrayList</code>.  Iterators and enhanced for-loops work with <code>ArrayList</code>s (and many other collections), too:</p>

<pre><code>for(Question myQuestion : q) {
    doSomethingWithAQuestion(myQuestion);
}
</code></pre>
","4","8231912"
"<p>The variable <code>intCount</code> is local in the innermost <code>if</code>-condition, which means that only the first entry of <code>interArr</code> is accessed. Rearrange the implementation as follows.</p>

<pre><code>public int[] intersection(Set parSet)
{
    int[] interArr = new int[numbers.length];
    int[] testArr = parSet.toArray();

    int intCount = 0; // initialization out of the loop

    for(int index = 0; index &lt; numbers.length; index++)
    {
        for(int compareInt = 0; compareInt &lt; testArr.length; compareInt++)
        {
            if(numbers[index] == testArr[compareInt])
            {
                interArr[intCount] = testArr[compareInt];
                intCount++;
            }//end if
        }//end inner for
    }//end outter for

    return interArr;
}//end method intersection
</code></pre>
","3","33779366"
"<p>Well, no, you need <code>array[0].length</code> to get size of second dimension, and <code>array[0][0].length</code> to get length of third. Of course, arrays are not matrices, so <code>array[0].length</code> and <code>array[1].length</code> might be different, depending on the sizes of the sub-arrays you stored at <code>array[0]</code> resp. <code>array[1]</code></p>
","0","7323890"
"<pre><code>int i = 0;
List&lt;Object&gt; list = getListOfUnknownSize();
while(list != null &amp;&amp; i &lt; list.size()) {
    process(list.get(i));
    i++;
}
</code></pre>
","0","8231912"
"<p>The File object is just a wrapper around the name for a real file on the disk. It does not contain any data. You will have to write your byte array into a file first. After the API you then call is done, you can maybe delete that file again. Search for how to manage temporary files in Java.</p>
","2","7034981"
"<p>For signed Floats, use Long or BigInteger to parse the string. Casting by int causes the digit at first of 32 bits be intepreted as sign digit.
procedure :</p>

<pre><code>int intBits = Float.floatToIntBits(yourFloat); 
String binary = Integer.toBinaryString(intBits);
</code></pre>

<p>reverse procedure :</p>

<pre><code>int intBits = new BigInteger(myString, 2).intValue();
// int intBits = (int) Long.parseLong(myString, 2);
float myFloat = Float.intBitsToFloat(intBits);
</code></pre>
","3","5157664"
"<p>Convert without creating <code>String</code> object:</p>

<pre><code>import java.nio.CharBuffer;
import java.nio.ByteBuffer;
import java.util.Arrays;

byte[] toBytes(char[] chars) {
  CharBuffer charBuffer = CharBuffer.wrap(chars);
  ByteBuffer byteBuffer = Charset.forName(""UTF-8"").encode(charBuffer);
  byte[] bytes = Arrays.copyOfRange(byteBuffer.array(),
            byteBuffer.position(), byteBuffer.limit());
  Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
  return bytes;
}
</code></pre>

<p>Usage:</p>

<pre><code>char[] chars = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
byte[] bytes = toBytes(chars);
/* do something with chars/bytes */
Arrays.fill(chars, '\u0000'); // clear sensitive data
Arrays.fill(bytes, (byte) 0); // clear sensitive data
</code></pre>

<p>Solution is inspired from Swing recommendation to store passwords in char[]. (See <a href=""https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords"">Why is char[] preferred over String for passwords?</a>)</p>

<p>Remember not to write sensitive data to logs and ensure that JVM won't hold any references to it.</p>

<hr>

<p>The code above is correct but not effective. If you don't need performance but want security you can use it. If security also not a goal then do simply <code>String.getBytes</code>. Code above is not effective if you look down of implementation of <code>encode</code> in JDK. Besides you need to copy arrays and create buffers. Another way to convert is inline all code behind <code>encode</code> (example for <strong>UTF-8</strong>):</p>

<pre><code>val xs: Array[Char] = ""A ß € 嗨 𝄞 🙂"".toArray
val len = xs.length
val ys: Array[Byte] = new Array(3 * len) // worst case
var i = 0; var j = 0 // i for chars; j for bytes
while (i &lt; len) { // fill ys with bytes
  val c = xs(i)
  if (c &lt; 0x80) {
    ys(j) = c.toByte
    i = i + 1
    j = j + 1
  } else if (c &lt; 0x800) {
    ys(j) = (0xc0 | (c &gt;&gt; 6)).toByte
    ys(j + 1) = (0x80 | (c &amp; 0x3f)).toByte
    i = i + 1
    j = j + 2
  } else if (Character.isHighSurrogate(c)) {
    if (len - i &lt; 2) throw new Exception(""overflow"")
    val d = xs(i + 1)
    val uc: Int = 
      if (Character.isLowSurrogate(d)) {
        Character.toCodePoint(c, d)
      } else {
        throw new Exception(""malformed"")
      }
    ys(j) = (0xf0 | ((uc &gt;&gt; 18))).toByte
    ys(j + 1) = (0x80 | ((uc &gt;&gt; 12) &amp; 0x3f)).toByte
    ys(j + 2) = (0x80 | ((uc &gt;&gt;  6) &amp; 0x3f)).toByte
    ys(j + 3) = (0x80 | (uc &amp; 0x3f)).toByte
    i = i + 2 // 2 chars
    j = j + 4
  } else if (Character.isLowSurrogate(c)) {
    throw new Exception(""malformed"")
  } else {
    ys(j) = (0xe0 | (c &gt;&gt; 12)).toByte
    ys(j + 1) = (0x80 | ((c &gt;&gt; 6) &amp; 0x3f)).toByte
    ys(j + 2) = (0x80 | (c &amp; 0x3f)).toByte
    i = i + 1
    j = j + 3
  }
}
// check
println(new String(ys, 0, j, ""UTF-8""))
</code></pre>

<p>Excuse me for using Scala language. If you have problems with converting this code to Java I can rewrite it. What about performance always check on real data (with JMH for example). This code looks very similar to what you can see in JDK[<a href=""https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.base/share/classes/sun/nio/cs/UTF_8.java#L455"" rel=""noreferrer"">2</a>] and Protobuf[<a href=""https://github.com/protocolbuffers/protobuf/blob/master/java/core/src/main/java/com/google/protobuf/Utf8.java#L1038"" rel=""noreferrer"">3</a>].</p>
","167","5513144"
"<p>Collections.addAll provides the shortest (one-line) receipt </p>

<p>Having</p>

<pre><code>String[] array = {""foo"", ""bar"", ""baz""}; 
Set&lt;String&gt; set = new HashSet&lt;&gt;();
</code></pre>

<p>You can do as below</p>

<pre><code>Collections.addAll(set, array); 
</code></pre>
","9","11986593"
"<p>You are on the right track: using a nested loop to do an exhaustive search (although it could be simplified using java collection), only some minor issues: </p>

<p><strong>1)</strong> you didn't define <code>toArray()</code> method for your class, so assume you meant <code>parSet.numbers</code> when you call <code>parSet.toArray()</code></p>

<p><strong>2)</strong> the counter <code>intCount</code> needs to be outside of the loop to avoid being set to 0 in every iteration. </p>

<p>So the correct version should be:</p>

<pre><code>public int[] intersection(Set parSet) {
    int[] interArr = new int[numbers.length];
    int[] testArr = parSet.numbers; //you didn't define toArray() for the class Set
    int intCount = 0; // move this variable out of the loop
    for (int index = 0; index &lt; numbers.length; index++) {
        for (int compareInt = 0; compareInt &lt; testArr.length; compareInt++) {
            if (numbers[index] == testArr[compareInt]) {
                interArr[intCount] = testArr[compareInt];
                intCount++;
            }//end if
        }//end inner for
    }//end outter for

    return interArr;
}//end method intersection
</code></pre>
","1","33779366"
"<p>Either use char[] or String.  Make sure and get the includes for String.</p>
","2","7371354"
"<p>Yes, wrap the array in an object and make the object implement the iterator interface. So it can be done. I am not aware of any such iterator that ships with the Jdk.</p>
","2","7370065"
"<p>First check if the field is an array with <code>field.getType().isArray()</code>, and then check that the array component type is an enum with <code>field.getType().getComponentType().isEnum()</code></p>
","5","25198417"
"<p>That's a <em>string literal</em>. If you're looking to get the binary representation of the string, use one of the <code>String.getBytes</code> methods.</p>
","3","7371354"
"<p>As Holger mentioned in his comment a simple <code>Enum[].class.isAssignableFrom</code> will do it.</p>

<pre><code>import javax.swing.SortOrder;

public class Main {

    private SortOrder[] sortOrders;

    public static void main(String[] args) throws SecurityException,
            NoSuchFieldException {
        Field sortOrdersField = Main.class.getDeclaredField(""sortOrders"");

        System.out.println(isEnumArray(sortOrdersField));
    }

    private static boolean isEnumArray(Field field) {
        Class&lt;?&gt; type = field.getType();
        return Enum[].class.isAssignableFrom(type);
    }
}
</code></pre>
","2","25198417"
"<p>Yes, it can be done, as @Scorpion says.  In fact, the solution is probably pretty simple: no more than 10 lines of executable code ... if I correctly understand the problem.</p>

<p>No, there isn't a convenience method in the JDK to do this.  And I'm not aware of one in any of the ""commons"" libraries.  (Reason: this particular problem is too specialized to be useful to more than a handful of programmers.)</p>

<p>This should be a sufficient answer for you to go and implement the solution yourself.</p>

<hr>

<p>Should I / we provide you a potted solution?  IMO, no.</p>

<ul>
<li><p>StackOverflow is not a ""we write your code for free"" service.</p></li>
<li><p>If you do it yourself you will learn more: read the excellent <a href=""http://mattgemmell.com/2008/12/08/what-have-you-tried"" rel=""nofollow"">""What have you tried?""</a> blog article.</p></li>
</ul>

<p>(And even if someone did feel like writing the code for you, you didn't give a clear enough description of the problem to implement ... without making lots of guesses.)</p>
","1","7370065"
"<p>Iterate over the Array. First initialize the maximum value to the first element of the array and then for each element optimize it if the element under consideration is greater.</p>
","2","16325168"
"<p>In Java, there are no multi-dimension arrays. There are arrays of arrays. So:</p>

<pre><code>int[][] array = new int[2][3];
</code></pre>

<p>It actually consists of two arrays, each has three elements.</p>
","2","11641985"
"<p>If you want to remove duplicates from ArrayList means find the below logic,</p>

<pre><code>public static Object[] removeDuplicate(Object[] inputArray)
{
    long startTime = System.nanoTime();
    int totalSize = inputArray.length;
    Object[] resultArray = new Object[totalSize];
    int newSize = 0;
    for(int i=0; i&lt;totalSize; i++)
    {
        Object value = inputArray[i];
        if(value == null)
        {
            continue;
        }

        for(int j=i+1; j&lt;totalSize; j++)
        {
            if(value.equals(inputArray[j]))
            {
                inputArray[j] = null;
            }
        }
        resultArray[newSize++] = value;
    }

    long endTime = System.nanoTime()-startTime;
    System.out.println(""Total Time-B:""+endTime);
    return resultArray;
}
</code></pre>
","0","203984"
"<p>If you implement the <a href=""http://download.oracle.com/javase/7/docs/api/java/lang/Iterable.html"" rel=""nofollow""><code>Iterable</code></a> interface, you can use a <a href=""http://download.oracle.com/javase/1,5.0/docs/guide/language/foreach.html"" rel=""nofollow""><code>for-each loop</code></a>. Related examples may be found <a href=""http://blog.dreasgrech.com/2010/03/javas-iterators-and-iterables.html"" rel=""nofollow"">here</a>. </p>
","3","7370065"
"<p>While Matt B's may be true in one sense, it may help to think of Java multidimensional array without thinking about geometeric matrices at all.  Java multi-dim arrays are simply arrays of arrays, and each element of the first-""dimension"" can be of different size from the other elements, or in fact can actually store a null ""sub""-array.  See comments under <a href=""https://stackoverflow.com/q/6630990/433348"">this question</a> </p>
","21","11641985"
"<p>Whilst this isn't strictly an answer to this question I think it's useful.</p>

<p>Arrays and Collections can bother be converted to Iterable which can avoid the need for performing a hard conversion.</p>

<p>For instance I wrote this to join lists/arrays of stuff into a string with a seperator</p>

<pre><code>public static &lt;T&gt; String join(Iterable&lt;T&gt; collection, String delimiter) {
    Iterator&lt;T&gt; iterator = collection.iterator();
    if (!iterator.hasNext())
        return """";

    StringBuilder builder = new StringBuilder();

    T thisVal = iterator.next();
    builder.append(thisVal == null? """": thisVal.toString());

    while (iterator.hasNext()) {
        thisVal = iterator.next();
        builder.append(delimiter);
        builder.append(thisVal == null? """": thisVal.toString());
    }

    return builder.toString();
}
</code></pre>

<p>Using iterable means you can either feed in an ArrayList or similar aswell as using it with a <code>String...</code> parameter without having to convert either.</p>
","2","11986593"
"<p>No, because Java doesn't <em>have</em> multi-dimensional arrays. It only has jagged arrays, i.e. arrays of arrays.</p>
","7","9637130"
"<p>If you can change the order of the elements:</p>

<pre><code> int[] myArray = new int[]{1, 3, 8, 5, 7, };
 Arrays.sort(myArray);
 int max = myArray[myArray.length - 1];
</code></pre>

<p>If you can't change the order of the elements:</p>

<pre><code>int[] myArray = new int[]{1, 3, 8, 5, 7, };
int max = Integer.MIN_VALUE;
for(int i = 0; i &lt; myArray.length; i++) {
      if(myArray[i] &gt; max) {
         max = myArray[i];
      }
}
</code></pre>
","15","16325168"
"<p>Have a max int and set it to the first value in the array. Then in a for loop iterate through the whole array and see if the max int is larger than the int at the current index.</p>

<pre><code>int max = array.get(0);

for (int i = 1; i &lt; array.length; i++) {
    if (array.get(i) &gt; max) {
      max = array.get(i);
    }
}
</code></pre>
","17","16325168"
"<p>I think it's more a matter of which JVM implementation does copying and which does pinning, not what runtime conditions might determine that choice, although I can certainly imagine that say an object in permgen space might be more amenable to being pinned than a brand new one.</p>

<p>The decision is the JVM's, not yours.</p>
","1","16525131"
"<p>Use some kind of <a href=""http://en.wikipedia.org/wiki/QuickSort"" rel=""nofollow"">QuickSort</a> or <a href=""http://en.wikipedia.org/wiki/Mergesort"" rel=""nofollow"">MergeSort</a>
if you want to implement fast sorting on your own.</p>

<p>Otherwise use the built in java sort functions.</p>
","0","12482275"
"<p>Because it's a collection of utilities to work with arrays. The other examples you've mentioned are actually instances of a particular type of collection. </p>

<p>For example, the same naming convention has been followed in Guava for Lists, Sets, Maps etc.</p>
","4","26951385"
"<pre><code>public class Totalsum {

  public static void main(String[] args){

  int[] y={6,1,5,9,5};
  int[] z={2,13,6,15,2};

  int Total= sumLargeNumber(y,z,5);

  System.out.println(""The Total sum is ""+Total); //call method
}

public static int sumLargeNumber(int a[], int b[], int size) {
  int total=0;

  for(int i=0; i&lt; size; i++) {
    if(a[i] &gt; b[i]){
      total=total+a[i];
    }

    else {
      total=total+b[i];
    }
  }
  return total;
}
</code></pre>
","0","3899696"
"<p>When you have the the Power bring it to good use... <code>Why reinvent the wheel ???</code></p>

<p>Use  <code>Arrays.sort()</code> to <strong>sort the Array.</strong></p>

<p><strong>-</strong> If what you hold in the Array is some kind of object and it needs to be sorted in More than One way.... then first convert it in to a ArrayList (or List) using <code>Arrays.asList(array)</code></p>

<p><strong>Eg:</strong></p>

<pre><code>Song[] dog = new Song[10];
 ArrayList&lt;Song&gt; list = new ArrayList&lt;Song&gt;(Arrays.asList(arr));
</code></pre>

<p>Then use <code>java.util.Comparator</code> Interface, to sort the Object on basis of more than one attribute. </p>

<p><strong>Eg:</strong>
          Class Song can be sorted on the basis of its track title or Singer and more using <code>Comparator</code> Interface.</p>

<p><strong>-</strong> Using <code>Collections</code> are <strong>lot more flexible</strong> than <code>Array</code>.</p>
","6","12482275"
"<p>If you're trying to assign hard-coded values, you can use:</p>

<pre><code>byte[] bytes = { (byte) 204, 29, (byte) 207, (byte) 217 };
</code></pre>

<p>Note the cast because Java bytes are signed - the cast here will basically force the overflow to a negative value, which is probably what you want.</p>

<p>If you're <em>actually</em> trying to parse a string, you need to do that - split the string into parts and parse each one.</p>

<p>If you're trying to convert a string into its binary representation under some particular encoding, you should use <code>String.getBytes</code>, e.g.</p>

<pre><code>byte[] abc = ""204.29.207.217"".getBytes(""UTF-8"");
</code></pre>

<p>(Note that conventionally the <code>[]</code> is put as part of the type of the variable, not after the variable name. While the latter is allowed, it's discouraged as a matter of style.)</p>
","27","7371354"
"<p>The Utility classes which deals with <code>Arrays</code>, <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html"" rel=""nofollow noreferrer""><code>Files</code></a>, <a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/file/Paths.html"" rel=""nofollow noreferrer""><code>Paths</code></a>, <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html"" rel=""nofollow noreferrer""><code>Objects</code></a> or <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html"" rel=""nofollow noreferrer""><code>Collections</code></a> are plural. Exactly because they are not an Array or a Collection but rather a number of utility functions to work on them. You can even see that in the <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html"" rel=""nofollow noreferrer"">Javadoc</a> intro:</p>

<blockquote>
  <p>This class contains various methods for manipulating arrays</p>
</blockquote>

<p>Some of those classes are fairly new additions in 1.7. So this explains their common naming convention. I am not sure if there is a written conventions for it, but it is surely a practical one.</p>
","12","26951385"
"<p>No, Java is a strongly-typed language. So you cannot add a <code>String</code> and an <code>int</code> to the same array if the array is typed as either <code>String</code> or <code>int</code>.</p>

<p>However if your array is typed as <code>Object</code>, you can add a <code>String</code> and an <code>Integer</code> (an integer literal will be autoboxed) to that same array. This is not recommended and is probably a sign that you should think more about your design. The first question you need to ask yourself is <em>why</em> you need to do this. If you do have a valid reason, then it would be better to convert from one to the other instead of having an array typed as <code>Object</code>.</p>

<p>Having a catch-call array where you can shove in any object in a bad idea for many reasons:</p>

<ul>
<li>You are enforcing no separation between the objects. Are the objects actually related to each other? If so you type then using an interface or create an abstract class that each of the types extend.</li>
<li>Since you have no separation between the objects, anything you pull out of the array is an <code>Object</code>. How would you know what it is? You need to inspect its type explicitly. This is an extremely cumbersome and unmaintainable design. </li>
<li>You essentially end up losing type-safety and will not be able to benefit from type-mismatch errors that will show up during compilation. This will hide possible errors in your code where you may have forgotten to inspect the type, or where you are casting an object to the wrong type. This can lead to all kinds of nightmarish bugs.</li>
<li>Your code is going to be littered with explicit checks and casts and will be unmaintainable (by you or anyone else).</li>
<li>Your code leaks abstraction everywhere. No one can look at the array and realize what the array contains. Anyone who uses your code needs to remember an overwhelming amount of detail as to what types of objects the array can contain. </li>
<li>Obfuscation is never a valid reason. Code should be clear, easy to read, easy to maintain, and easy to understand (for you and for anyone else who will read your code). Any code that looks obfuscated or is ""clever"" either needs to be rewritten or documented extensively to explain the reason for its ""cleverness"". As far as obfuscating the source, it is a non-issue since you're going to be distributing the <code>.class</code> files anyway. You can run that through a decompiler to look at the source code. There is nothing you can do <em>at the source level</em> to satisfactorily obfuscate your code; you're only going to make it difficult for you or anyone else to maintain. Obfuscation can be done at the byte-code level and so that doesn't really apply to this situation.</li>
</ul>
","6","7986688"
"<pre><code>  arrayList.set(index i,String replaceElement);
</code></pre>
","181","5617175"
"<p>The code is the same as this:</p>

<pre><code>private String[][][] var;
</code></pre>

<p>All these forms are equivalent:</p>

<pre><code>private String[][][] var;
private String[][] var[];
private String[] var[][];
private String var[][][];
</code></pre>

<p>And they all mean the same: a three-dimensional array of strings. The <code>String var[][][]</code> syntax may seem a bit weird, but it's like that for making C/C++ programmers feel right at home in Java (that's how you normally declare an array type in C/C++).</p>

<p>In Java, the <code>String[][][] var</code> syntax is preferred, as it makes clear that the <em>type</em> of <code>var</code> is <code>String[][][]</code>, in the other syntax and its different variations the type information is split before and after the variable - although it's perfectly legal from the compiler's view point, it's harder to read.</p>

<p>Even weirder, all these method declarations are legal and equivalent:</p>

<pre><code>String[][][] m()  {return null;}
String[][] m() [] {return null;}
String[] m() [][] {return null;}
String m() [][][] {return null;}
</code></pre>
","8","12523961"
"<blockquote>
  <p>I googled it a lot and found nothing! Could someone help me with
  filling an array of characters from user input, please?</p>
</blockquote>

<p>My Google said, try this one..</p>

<p><strong>Option 1 :</strong></p>

<pre><code>    import java.io.*;
   class array {

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String tmp = br.readLine();
        int length = tmp.length();
        char c[] = new char[length];
        tmp.getChars(0, length, c, 0);
        CharArrayReader input1 = new CharArrayReader(c);
        int i;
        System.out.print(""input1 is:"");
        while ((i = input1.read()) != -1) {
            System.out.print((char) i);
        }

    }
}
</code></pre>

<p><strong>Option 2:</strong></p>

<pre><code>class array
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println(""Please enter elements..."");
        char[] a=sc.next().toCharArray();
        System.out.println(""Array elements are : "");
        for (int i=0;i&lt;a.length;i++)
            System.out.println(a[i]);
    }
}
</code></pre>

<p><em>But, in this case, it won't accept after space character.</em></p>

<p><strong>Before, start your coding in Java, you must know these terms :</strong></p>

<p><a href=""http://docs.oracle.com/javase/1.4.2/docs/api/java/io/BufferedReader.html"" rel=""noreferrer"">BufferedReader</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Exception_handling"" rel=""noreferrer"">Exception handling</a></p>
","7","13878437"
"<p>Yes it is possible, but it is not good practice.</p>

<pre><code>Object[] myObjects = new Object[] {array1[i], array2[i], ""name1"", value1, value2, ""name2"",  value1, value....};
</code></pre>

<p>It must be array of objects</p>
","3","7986688"
"<p>No. Java doesn't have multi-dimensional arrays.  What it has is arrays of arrays (etc) but each level can be a different size.</p>

<pre><code>int[][] ints = { { 1 }, {1,2,3}, {5,6} };
</code></pre>
","6","9637130"
"<p>In your string array you could have ""123"" and then convert it to an int later when you need it.</p>
","0","7986688"
"<p>from <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort(byte[])"" rel=""nofollow"">java doc</a>:</p>

<blockquote>
  <p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort
  by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This
  algorithm offers O(n log(n)) performance on many data sets that cause
  other quicksorts to degrade to quadratic performance, and is typically
  faster than traditional (one-pivot) Quicksort implementations.</p>
</blockquote>
","1","34110553"
"<p>If you want to be able to read a word and split it into an array of characters you can use.</p>

<pre><code>char[] chars = scanner.next().toCharArray();
</code></pre>
","0","13878437"
"<p>All array types are subclasses of <code>Object</code> so you can use any array type in a generic which <code>extends Object</code> as <code>T</code> does by default, even arrays of primitive.</p>
","1","36680772"
"<p>I know this post is really old, but I have to reply because although BalusC's answer is marked as correct, it's not completely correct.</p>

<p>You have to write the query adding ""[]"" to foo like this:</p>

<pre><code>foo[]=val1&amp;foo[]=val2&amp;foo[]=val3
</code></pre>
","191","3061273"
"<p>It is a collection of utilities that deals with arrays, and doesn't represent the array itself. Also there is another class with name <code>Array</code>. Check this <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html"" rel=""nofollow"">https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Array.html</a></p>
","4","26951385"
"<p>There isn't an elegant way in vanilla Java.</p>

<h1>Google Guava</h1>

<p>The <a href=""https://github.com/google/guava"" rel=""noreferrer"">Google Guava</a> library is great - check out their <a href=""http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Iterables.html#getLast-java.lang.Iterable-"" rel=""noreferrer""><code>Iterables</code> class</a>. This method will throw a <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/NoSuchElementException.html?is-external=true"" rel=""noreferrer""><code>NoSuchElementException</code></a> if the list is empty, as opposed to an <a href=""http://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html"" rel=""noreferrer""><code>IndexOutOfBoundsException</code></a>, as with the typical <code>size()-1</code> approach - I find a <code>NoSuchElementException</code> much nicer, or the ability to specify a default:</p>

<pre><code>lastElement = Iterables.getLast(iterableList);
</code></pre>

<p>You can also provide a default value if the list is empty, instead of an exception:</p>

<pre><code>lastElement = Iterables.getLast(iterableList, null);
</code></pre>

<p>or, if you're using Options:</p>

<pre><code>lastElementRaw = Iterables.getLast(iterableList, null);
lastElement = (lastElementRaw == null) ? Option.none() : Option.some(lastElementRaw);
</code></pre>
","218","687833"
"<p>Like others have said. Java does not have true multidimensional arrays but instead has arrays of arrays. In order to get the length of a particular array you just need to get the length member variable for that array:</p>

<pre><code>int[][] ints = { { 1 }, {1,2,3}, {5,6} };
ints[0].length == 1
ints[1].length == 3
</code></pre>
","2","9637130"
"<p>No, you don't. A quality implementation (<code>Hashtable</code>/<code>HashMap</code>) will resize itself automatically as the number of elements increases.</p>

<p>If you are talking about your own implementation, the answer depends on whether the hash table is capable of increasing the number of buckets as its size grows.</p>

<p>If you are worried about the performance implications of the resizing, the correct approach is to profile this in the context of your overall application.</p>
","3","15859558"
"<p>You can't add a primitive types (including int) to an array with Objects such as String.  However, autoboxing of int to Integer will make this possible if you declare an Object[] array.</p>

<pre><code>Object[] array = new Object[2];
array[0] = ""Hello"";
array[1] = 42;
</code></pre>

<p>Though I wouldn't recommend doing this if modeling this String and int as attributes of a class would work.</p>
","0","7986688"
"<p>Another case where a zero length array can be useful:
To return an array containing all of the elements in a list : </p>

<pre><code>&lt;T&gt; T[ ] toArray(T[ ] a)
</code></pre>

<p>A zero length array can be used to pass the type of the array into this method. For example:</p>

<pre><code>ClassA[ ] result = list.toArray(new ClassA[0]);
</code></pre>

<p>A zero length array is still an instance of Object which holds zero elements.</p>
","4","4612471"
"<p>You need to read each byte from your <code>InputStream</code> and write it to a <code>ByteArrayOutputStream</code>. </p>

<p>You can then retrieve the underlying byte array by calling <code>toByteArray()</code>:</p>

<pre><code>InputStream is = ...
ByteArrayOutputStream buffer = new ByteArrayOutputStream();

int nRead;
byte[] data = new byte[16384];

while ((nRead = is.read(data, 0, data.length)) != -1) {
  buffer.write(data, 0, nRead);
}

return buffer.toByteArray();
</code></pre>
","459","1264709"
"<p>Oscar's answer is pretty good. If one were to read <code>String[][] var[]</code> in English, one would say ""var is an array of two-dimensional String arrays"" thus ""var is a three-dimensional String array""</p>
","1","12523961"
"<p>This is the important error message. </p>

<blockquote>
  <p>Cannot make a static reference to the non-static method
  getStudentID(); from the type Student.</p>
</blockquote>

<p>You need to call <code>getStudentID()</code> on an instance of the class, and not the class itself. You can try something like this. </p>

<pre><code>public static void print_all() {

    System.out.println(""Student ID\tRecent Grades\tName\t\tE-Mail\t\t\tAge"");
    for (Student w : studentlist) {
        System.out.print(w.getStudentID() + ""\t\t"");
        System.out.print(w.getGrades() + ""\t"");
        System.out.print(w.getFirstname()+ "" "");
        System.out.print(w.getLastname()+ ""\t"");
        System.out.print(w.getEmail()+ ""\t"");
        System.out.print(w.getAge()+ ""\t"");
        System.out.println("" "");
    }
}
</code></pre>

<p>Calling <code>Student.getStudentID()</code> would only work if there was a static (shared) ID for all the students. This is not the case here. You can look at <a href=""https://stackoverflow.com/a/413904/1525953"">this post</a> for a more complete explanation of the static keyword in java. </p>
","0","38077529"
"<p>The error says it all. The method getStudentID() is a non-static method of the Student class. The call Student.getStudentID() is a static call and hence the error. Invoke the method getStudentID() on an instance of a Student.  </p>
","0","38077529"
"<p><a href=""http://docs.oracle.com/javase/specs/jls/se7/html/index.html"" rel=""nofollow"">The Java Language Specification</a> says </p>

<blockquote>
  <p>""Brackets are allowed in declarators as a nod to the tradition of C
  and C++. The general rules for variable declaration, however, permit
  brackets to appear on both the type and in declarators, so that the
  local variable declaration""</p>
</blockquote>

<p>in <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html#jls-10.2"" rel=""nofollow"">JLS 10.2</a> . In my opinion square brackets (<code>[]</code>) in ""types"" make more sense of an array than that is in declared variables. But in order to confirm to the tradition of C/C++ it was done as the text says in JLS. Another thing is , mixing the square bracket with both types and variables would be confusing to the readers/programmers. </p>
","3","12523961"
"<p>Yes, that is possible, here is example of iterating through them</p>

<pre><code>public static void main(String[] args) {
        int[][] numbers = new int[][] { { 1, 2, 3 }, { 1, 2, 3, 4 }, { 1, 2, 3, 4, 5 } };
        for(int i = 0; i&lt;numbers.length;i++) {
            for(int j = 0; j &lt; numbers[i].length; j++) {
                System.out.print(numbers[i][j]);
            }
            System.out.println("""");
        }
    }
</code></pre>

<p>output:</p>

<pre><code>123
1234
12345
</code></pre>
","0","38684014"
"<p>Write a wrapper function that accepts only the allowed type, and hide the collection. That was standard best-practice pre-Java-5.</p>

<pre><code>private final List strings = new ArrayList();

public void add(String s)
{
    strings.add(s);
}

public String remove(String s)
{
    return (String) strings.remove(s);
}

// etc...
</code></pre>

<p>Yes, this sucks.</p>

<p>Might I ask: is there a reason you're not using generics? They <em>are</em> bytecode-compatible with Java 1.4</p>
","2","10569724"
"<p>This is an example that shows you when the <code>[]</code> position makes a difference.</p>

<pre><code>String[] arr, arr2[];
</code></pre>

<p>The <code>arr</code> is an array of <code>String</code> whereas the <code>arr2</code> is an array of arrays of <code>String</code>.</p>

<p>It can as you see be beneficial if you want to declare different arrays on the same line.</p>

<p>And in your example it could have been another <code>var2</code> declared on the same line:</p>

<pre><code>private String[][] var[], var2;
</code></pre>
","1","12523961"
"<p>Two options, (I am assuming C# here, but all applies to pretty much all OO languages).</p>

<p>1) Inherit from collection type of choice (or its interfaces), override all methods to throw exception on wrong type, something like this:</p>

<pre><code>
public class MyType
{
    // Your type here
}

public class MyTypeCollection : ArrayList
{
    public override int Add(object value)
    {
        if (!(value is MyType))
        {
            throw new ArgumentException(""value must be of type MyType"");
        }

        return base.Add(value);
    }

    public int Add(MyType myType)
    {
        return base.Add(myType);
    }

    // Other overrides here
}
</code></pre>

<p>or
2) (probably better), create your own type altogether and implement interfaces as desirable for collections and use a non-generic, non-typed collection internally. Something like this:</p>

<pre><code>

public class MyTypeCollection2 : IEnumerable
{
    private readonly ArrayList _myList = new ArrayList();

    public void Add(MyType myType)
    {
        _myList.Add(myType);
    }

    // Other collection methods

    public IEnumerator GetEnumerator()
    {
        yield return _myList.Cast&lt;MyType&gt;();
    }
}

</code></pre>

<p>Make sure to implement all interfaces you will care about. In the .NET Framework the interfaces implemented for ArrayList are: IList, ICloneable</p>

<p>Hope this helps.</p>
","1","10569724"
"<p>Yes it definitely is possible, just have an array of raw objects.</p>

<p>For example:</p>

<pre><code>Object[] arr = new Object[10];
arr[0] = 10; // boxed to Integer class
arr[1] = ""foo""; // String class
</code></pre>

<p>Then you can use <code>instanceof</code> to determine the type of object stored at a particular index.</p>

<p>For example:</p>

<pre><code>if (arr[0] instanceof Integer) ((Integer) arr[0]) += 10;
</code></pre>

<p>Note that this is not necessarily a good practise to get used to, but it does have applications.</p>
","0","7986688"
"<p>HashMap, ArrayList, etc are objects. They are data structures which offer different features and have different uses. </p>

<p><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html"" rel=""nofollow"">Arrays</a> (or <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html"" rel=""nofollow"">Collections</a>) on the other hand is <em>not</em> an object. Arrays is a class which features only static utility methods that can perform convenient operations on arrays.</p>
","2","26951385"
"<p>Java always knows exactly how big each element of the array is going to be, because Java has only two kinds of arrays: arrays of primitives or arrays of object references.</p>

<p>If it's an array of primitives (<code>int</code>, <code>long</code>, etc.) it's the size of the primitive; and if it's an array of objects then it's the size of references to objects (pointers).</p>
","4","25705053"
"<p>No, in fact is bad to have it fixed to a certain value.
For more info you can start here with <a href=""http://en.wikipedia.org/wiki/Hash_table#Dynamic_resizing"" rel=""nofollow"">Wikipedia</a>.</p>
","0","15859558"
"<p>From <a href=""http://www.horstmann.com/articles/BetterCleaner.html"" rel=""nofollow"">a quick Google search</a></p>

<p>The class name List is now ambiguous because there are two classes java.awt.List and java.util.List. You can resolve the ambiguity by adding a specific import of the class name:</p>

<pre><code>import java.awt.*;
import java.util.*;
import java.util.List;
</code></pre>

<p>However, if you need to refer to both java.awt.List and java.util.List in the same source file, then you have crossed the limits of the import mechanism. You can use an import statement to shorten one of the names to List, but you need to reference the other by its full name whenever it occurs in the source text.</p>
","1","11278974"
"<p>It turned out that there is a decent method in <code>JDK</code>'s <code>URLConnection</code> class, please refer to the following answer: <a href=""https://stackoverflow.com/questions/51438/getting-a-files-mime-type-in-java#847849"">Getting A File&#39;s Mime Type In Java</a></p>

<p>If one needs to extract file extension from byte array instead of file, one should simply use <code>java.io.ByteArrayInputStream</code> (class to read bytes specifically from byte arrays) instead of <code>java.io.FileInputStream</code> (class to read bytes specifically from files) like in the following example:</p>

<pre><code>byte[] content = ;
InputStream is = new ByteArrayInputStream(content);
String mimeType = URLConnection.guessContentTypeFromStream(is);
 //...close stream
</code></pre>

<p>Hope this helps...</p>
","42","10040330"
"<p>It's up to author and code conversions how to name classes.</p>
","2","26951385"
"<p>The problem is java.awt also has a List inside it, so the compiler doesn't know which one you are using when you call List.</p>

<p>I think you'll have call your list like so:</p>

<pre><code>java.util.List list = new java.util.List();
</code></pre>

<p>So this way the compiler knows which 'List' you are referring to.</p>
","1","11278974"
"<p>You need to supply an encoding, otherwise you get the system default encoding, essentially a random value.</p>

<pre><code>String value = new String(byteArray, encoding);
</code></pre>
","3","4275482"
"<p>Enum is not number. But you can do SIZE.ordinal()</p>
","0","26355786"
"<p>There is an ambiguity in the naming conventions of List in  class awt and util, so we can handle it in 2 ways:</p>

<ol>
<li><p>Use import</p>

<p><code>import java.awt.*;</code></p>

<p><code>import java.util.List;</code></p>

<p><code>import java.util.*;</code></p></li>
<li><p>Use the full path, as mentioned in Head First Java,""either use import or the full name""</p>

<p><code>java.util.List&lt;String&gt; list = new java.util.ArrayList&lt;String&gt;();</code></p></li>
</ol>
","2","11278974"
"<p>Yes, you can have different column count for each row.</p>

<p><code>data_type [][] array = new data_type[row][]</code></p>

<p><code>array[0] = new data_type[size1]</code></p>

<p><code>array[1] = new data_type[size2]</code></p>

<p>P.S : Why don't you try on your system, before asking such questions.</p>

<p>P.P.S : Here i have assumed that <code>row &gt;=2</code>.</p>
","1","38684014"
"<p>Strictly speaking: No.<br>
Otherwise: Yes for most practical purposes:</p>

<pre><code>Object[] array = { 42, ""foo"" };
</code></pre>

<p>Please note, that the <code>42</code> is not an <code>int</code> but an `Integer´. But due to autoboxing and unboxing you wont notice the difference. The tradeoff is of course performance and garbage collector overhead.</p>

<p>Also the array must be of type <code>Object[]</code>, not of type <code>String[]</code> nor of type <code>int[]</code>.</p>
","1","7986688"
"<p>You can use <code>java.util.ArrayList</code> to do this. You will need to make sure that you check carefully what you are getting when you pull items out though.</p>
","0","7986688"
"<pre><code>DefaultComboBoxModel dml= new DefaultComboBoxModel();
for (int i = 0; i &lt; &lt;ArrayList&gt;.size(); i++) {
  dml.addElement(&lt;ArrayList&gt;.get(i).getField());
}

&lt;ComboBoxName&gt;.setModel(dml);
</code></pre>

<p>Understandable code.Edit<code>&lt;&gt;</code> with type as required.</p>
","4","1291704"
"<p>You could do something like this</p>

<pre><code>String[] myStrings = { ""One"", ""Two"", ""Three"" };
</code></pre>

<p>or in expression</p>

<pre><code>functionCall(new String[] { ""One"", ""Two"", ""Three"" });
</code></pre>

<p>or</p>

<pre><code>String myStrings[];
myStrings = new String[] { ""One"", ""Two"", ""Three"" };
</code></pre>
","136","8549747"
"<p>If you've landed here looking for a quick array-to-string conversion, try <a href=""http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html#toString%28java.lang.Object%5B%5D%29"" rel=""noreferrer""><strong>Arrays.toString()</strong></a>.</p>

<blockquote>
  <p>Creates a String representation of the <code>Object[]</code> passed. The result is
  surrounded by brackets (<code>""[]""</code>), each element is converted to a String
  via the <code>String.valueOf(Object)</code> and separated by <code>"", ""</code>. If the array is
  <code>null</code>, then <code>""null""</code> is returned.</p>
</blockquote>
","6","1515437"
"<p>Here's the code. It doesn't look like good practice, though.</p>

<pre><code>int[] x = new int[EnumClass.values().length];
</code></pre>

<p>You can then access the element by <code>ordinal()</code></p>

<pre><code>int val = x[enumVar.ordinal()];
</code></pre>

<p>Still doesn't look like good practice.</p>

<p>Consider using <code>Map&lt;EnumClass, AtomicInteger&gt;</code> like <code>EnumMap&lt;EnumClass, AtomicInteger&gt;</code>. Why atomic integer? because it can have it's value modified instead of assigning a new instance all the time (at the cost of possibly unnecessary synchronization). That's a different issue though.</p>
","2","26355786"
"<p>By using the array initializer list syntax, ie:</p>

<pre><code>String myArray[] = { ""one"", ""two"", ""three"" };
</code></pre>
","6","8549747"
"<p>A similar alternative</p>

<pre><code>/**
 * @param delimiter 
 * @param inStr
 * @return String
 */
public static String join(String delimiter, String... inStr)
{
    StringBuilder sb = new StringBuilder();
    if (inStr.length &gt; 0)
    {
        sb.append(inStr[0]);
        for (int i = 1; i &lt; inStr.length; i++)
        {
            sb.append(delimiter);                   
            sb.append(inStr[i]);
        }
    }
    return sb.toString();
}
</code></pre>
","2","1515437"
"<pre><code>import java.util.Scanner;
public class sort {

  public static void main(String args[])
    {
        int i,n,t;          

        Scanner sc=new Scanner(System.in);

        System.out.print(""Enter the size of array"");

        n=sc.nextInt();

        int a[] = new int[n];

        System.out.println(""Enter elements in array"");

        for(i=0;i&lt;n;i++)
        {
            a[i]=sc.nextInt();
        }
        t=a[1];

        for(i=0;i&lt;n;i++)
        {
            if(a[i]&gt;t)

                t=a[i];
        }
        System.out.println(""Greates integer is"" +t);
    }
}
</code></pre>
","-1","2795350"
"<p>Normally you can't change the name of a variable (be it an array, or any other data type) after you've defined it, it's set in stone in the source code of the program. Perhaps you meant something else?</p>
","2","16203595"
"<p>so the idea is to dublicate consonants and put ""o"" between them, like t becomes tot, s becomes sos. Vocals are just copied. So you need a method that tells you if a given character is a vocal or consonant to base your decision on that.</p>

<pre><code>public static boolean isConsonant(char inputChar){

    final String consonantsx = ""bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXzZ""; 
    char consonants[] = consonantsx.toCharArray(); // String to charr

    for(int i=0; i &lt; consonants.length;i++){
        if(inputChar == consonants[i]){ //note that in Strings u use the equals method instead of ""==""
            return true;
        }
    }

    return false;
}
</code></pre>

<p>Given this method you can use it in the ""translator method"".</p>

<pre><code>    public String rovarSpraket(String normalString) {

    char[] array = normalString.toCharArray(); // Input to a char array

    System.out.println(""På rövarspråk:"");

    String slang = """";

    for (int i = 0; i &lt; normalString.length(); i++) {

        String add = """" + array[i];

        if(Goran.isConsonant(array[i])){

            add += ""o"" + array[i];

        }

        slang += add;

        }

    return slang;
}
</code></pre>

<p>This translates stubborn to sostotubobboborornon like in the wikipedia article <a href=""https://en.wikipedia.org/wiki/R%C3%B6varspr%C3%A5ket"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/R%C3%B6varspr%C3%A5ket</a>.</p>
","0","40729079"
"<p>You can achieve the desired effect by mapping a String to the array using <code>Map&lt;String,Array&gt;</code>. See this answer for more details: <a href=""https://stackoverflow.com/questions/6729605/dynamic-variable-names-in-java"">Assigning variables with dynamic names in Java</a></p>
","0","16203595"
"<p>I am going to walk you through what I corrected and changed in your code to make it work in order to make it quick and easy for you to comprehend why your code doesn't work and why my answer fixes it.</p>

<p>The mistakes you made are basic ones and frankly you shouldn't have to much of a hard time correcting them yourself if you would use a debugger that walks you step by step in how your code works. You should look on how to use a debugger (for example the debugger used in Eclipse, hopefully you are using an IDE to make your life easier).</p>

<p>Firstly, when you are looking for a consonant in your code, you are only walking through the half of it because of your condition <code>for(int x = 0; x&lt;20; x++)</code> since your string holding the consonants if of a length of 40 characters. This means you are missing consonants like the letter s.</p>

<p>Then you are correctly the consonants you find according to your Swedish language game. But you are never handling characters that are not of these found consonants. You should make a case where you handle these ""non consonant"" letters, may they be vowels or any kind of character (like punctuation marks and so on). I am fixing this with the use of a simple boolean here.</p>

<p>Keep in mind that my goal here is to change your code as little as I can, thus I went for adding a boolean to handle your cases (checking the presence of a consonant). There are, obviously, many other ways to implement what you are trying to do.</p>

<p>Here come the changes you should add to your code:</p>

<pre><code>    /*This comes after your print ""På rövarspråk:""*/
    boolean isConsonant = false; //Boolean to check wether there is a consonant or not
    for(int i = 0; i&lt;length; i++) {
        //You didn't go through the whole consonants list you made with your prevision condition
        for(int x = 0; x&lt;consonants.length; x++){
            if(array[i] == consonants[x])
            {
                isConsonant = true; //Set the boolean accordingly
                String add = array[i]+""o""+array[i];
                slang = slang + add;
                break;
            }
        }
        if(!isConsonant){ //If we don't have a consonant, add the char to the result string
            slang += array[i];
        }
        isConsonant = false; //Reset the boolean for the next character
    }
    /*Here you can print the result (slang) if you want, as you did*/
</code></pre>
","1","40729079"
"<p>You'll need to create a target array of equal size to the original array, and iterate over it, converting element by element.</p>

<p>Example:</p>

<pre><code>double[] d = { 2.0, 3.1 };
String[] s = new String[d.length];

for (int i = 0; i &lt; s.length; i++)
    s[i] = String.valueOf(d[i]);
</code></pre>
","6","11353768"
"<p>For below enum</p>

<pre><code> enum test{VALUE_ONE, ... , SIZE};
</code></pre>

<p>Use SIZE like this</p>

<pre><code>int[] x = new int[test.SIZE.ordinal()];
</code></pre>
","0","26355786"
"<p>You can use: <code>int[] x = new int[SIZE.ordinal()]; int var = x[SOME_VALUE.ordinal()];</code>
Its position in its enum declaration, where the initial constant is assigned an ordinal of zero.</p>

<p>Or set special number for each enum elements. like:</p>

<pre><code>enum A {
   VALUE_ONE(0),
   SIZE(1),
   ;

   int value;

   private A( int value) {
      this.value = value;
   }

   public int getValue() {
       return this.value;
   }
}

int[] x = new int[A.SIZE.getValue()];
int var = x[A.VALUE_ONE.getValue()];
</code></pre>
","0","26355786"
"<p>If you were looking for what to use in android, it is:</p>

<pre><code>String android.text.TextUtils.join(CharSequence delimiter, Object[] tokens)
</code></pre>

<p>for example:</p>

<pre><code>String joined = TextUtils.join("";"", MyStringArray);
</code></pre>
","71","1515437"
"<p>Use an <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/EnumMap.html"" rel=""nofollow"">EnumMap</a> - it was intended for just this case.</p>

<pre><code>enum Value {
    VALUE_ONE, ... , VALUE_LAKH
}
Map&lt;Value, Integer&gt; x = new EnumMap&lt;&gt;();
x.put(Value.VALUE_ONE, 13);
</code></pre>

<p>Internally uses an array (<code>Integer[]</code>). The only disadvantage is using <code>Integer</code> instead of <code>int</code>. And assumedly java 9 or 10 will introduce primitive generic types (<code>List&lt;int&gt;</code> and such).</p>

<p>BTW <code>EnumSet</code> exists too, and is as efficient as <code>BitSet</code>.</p>
","1","26355786"
"<p>You want to initialize an array. (For more info - <a href=""http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""nofollow"">Tutoria</a>l)</p>

<pre><code>int []ar={11,22,33};

String []stringAr={""One"",""Two"",""Three""};
</code></pre>

<p>From the <a href=""http://java.sun.com/docs/books/jls/second_edition/html/arrays.doc.html"" rel=""nofollow"">JLS</a></p>

<p>The <code>[]</code> may appear as part of the type at the beginning of the declaration, or as part of the declarator for a particular variable, or both, as in this example:</p>

<pre><code>byte[] rowvector, colvector, matrix[];
</code></pre>

<p>This declaration is equivalent to:</p>

<pre><code>byte rowvector[], colvector[], matrix[][];
</code></pre>
","2","8549747"
"<pre><code>int [][] matrix = new int[10][20];
for(int i = 0; i &lt; 10; i++) {
    for(int j = 0; j &lt; 20; j++) {
        // read information from somewhere
        matrix[i][j] = information;
    }
}
</code></pre>
","3","27094597"
"<p>Another way to create an array with String apart from</p>

<pre><code>String[] strings =  { ""abc"", ""def"", ""hij"", ""xyz"" };
</code></pre>

<p>is to use split.  I find this more readable if there are lots of Strings.</p>

<pre><code>String[] strings =  ""abc,def,hij,xyz"".split("","");
</code></pre>

<p>or the following is good if you are parsing lines of strings from another source.</p>

<pre><code>String[] strings =  (""abc\n"" +
                     ""def\n"" +
                     ""hij\n"" +
                     ""xyz"").split(""\n"");
</code></pre>
","4","8549747"
"<p>As already mentioned you have to iterate and convert every item from double to String.</p>

<p>Alternatively it's also possible to avoid an explicit iteration and do the following:</p>

<pre><code>// source array
Double[] d_array = new Double[] { 1, 2, 3, 4 };

// create a string representation like [1.0, 2.0, 3.0, 4.0]
String s = Arrays.toString(d_array);

// cut off the square brackets at the beginning and at the end
s = s.substring(1, s.length - 1);

// split the string with delimiter "", "" to produce an array holding strings
String[] s_array = s.split("", "");
</code></pre>
","0","11353768"
"<p>In java the rows are done first, because a 2 dimension array is considered two separate arrays. Starts with the first row 1 dimension array.</p>
","0","11641985"
"<p>the problem is you are initializing your return array at the same size of the input x array. int[] will default its values to 0. </p>

<p>What you should do is if you find an odd, then subtract the size by one, then initialize the array, this way you wont have ""empty"" bins that are defaulted to 0</p>
","0","40935905"
"<p>Java matrices are arrays of arrays, for example first row can be 10-elements while second row cen be 40 element long. I think it is not contiguous when not being square-matrix. But you can be sure when iterating through last index-block it is contiguous.</p>

<pre><code> a[100][500][64]

 a[5][5][0 to 63] contiguous

 a[5][0 to 5][5] not contiguous

 a[0 to 5][5][5] not contiguous and maybe there will be cache-critical stalls
</code></pre>
","0","12431188"
"<p>There is no way of telling, since even using JNI insulates you from the actual implementation.</p>

<p>That being said, it is probably true that most practical implementations allocate array elements as contiguous internal blocks of memory.</p>
","4","12431188"
"<p>I do it this way using a StringBuilder:</p>

<pre><code>public static String join(String[] source, String delimiter) {
    if ((null == source) || (source.length &lt; 1)) {
        return """";
    }

    StringBuilder stringbuilder = new StringBuilder();
    for (String s : source) {
        stringbuilder.append(s + delimiter);
    }
    return stringbuilder.toString();
} // join((String[], String)
</code></pre>
","-1","1515437"
"<blockquote>
  <p>There is simple shorthand technique I use most of the times..</p>
</blockquote>

<pre><code>String op = new String;
for (int i : is) 
{
    op += candidatesArr[i-1]+"","";
}
op = op.substring(0, op.length()-1);
</code></pre>
","-2","1515437"
"<p>When you are searching for some kind of answer and you do not know the exact size it is a good idea to use <code>List</code> for example <code>ArrayList</code> which can help in your case: </p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class Main {

    public static void main(String[] args) {
        // TODO Auto-generated method stub
        int[] a = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        List&lt;Integer&gt; result = filterOdd(a);
        for (Integer i : result) {
            System.out.println(i);
        }
    }

    public static List&lt;Integer&gt; filterOdd(int[] m) {
        return filterOddHelp(m, 0, m.length - 1);
    }

    public static List&lt;Integer&gt; filterOddHelp(int[] x, int i, int j) {
        List&lt;Integer&gt; returnArray = new ArrayList&lt;Integer&gt;();
        if (i &lt;= j) {
            returnArray = filterOddHelp(x, i + 1, j);
            if (x[i] % 2 != 0) {
                returnArray.add(x[i]);
            }
        }
        return returnArray;
    }
}
</code></pre>

<p>Console: </p>

<pre><code>9
7
5
3
1
</code></pre>

<p>Consider using <code>List</code> when you do not know how big of an array you will need.</p>
","-1","40935905"
"<p>If you want to access any of the words in the array, then you can do so. You do not need to give them all variable names. For instance, say you have your words array.
To print the 3rd word in the word array to the console:</p>

<pre><code>System.out.println(words[2]);
</code></pre>

<p>Noting that the first element in an array is element 0.</p>
","0","16281618"
"<p>The Java specs do not require either choice, and in fact do not offer any way of observing either choice.</p>

<p>If I write a JVM in Javascript, for example, arrays would probably be non-contiguous.</p>

<p>That said, I would strongly assume that most actual JVMs do use contiguous memory.</p>
","4","12431188"
"<pre><code>int [][] arr = new int[x][y];
for(int i = 0; i &lt; x; i++) {        // it will run you through the lines 
    for(int j = 0; j &lt; y; j++) {    // this will run you through each cell in the raw selected
        arr[i][j] = &lt;the thing you want to fill here&gt; ;
    }
}
</code></pre>

<p>you can look at a matrix as an array of arrays<br>
the <strong>first</strong> <code>for</code> is to run trough the array<br>
the <strong>second</strong> is <code>for</code> the cells in each array </p>
","0","27094597"
"<p>You already have your values stored as variables, they are called :</p>

<pre><code>word[0]
word[1]
word[2]
word[3]
word[4]
word[5]
</code></pre>

<p>…</p>
","0","16281618"
"<p>In most JVMs the entire heap is continous, so you can reasonably assume that arrays are allocated continously.</p>

<p>Note: Even if an Array of references are continuous, but the objects they reference could be anywhere.  They will probably be together but they might not me.</p>

<p>e.g.</p>

<pre><code>String[] strings = ""a,b,c,d,e,f"".split("","");
</code></pre>

<p>Strings is an array of references, the individual String objects and their <code>char[]</code> objects could be anywhere. Note: all the Strings are likely to use the same <code>char[]</code></p>
","0","12431188"
"<p>I would display your list using a <code>JList</code>.</p>

<p>Read the section from the Swing tutorial on <a href=""https://docs.oracle.com/javase/tutorial/uiswing/components/list.html"" rel=""nofollow noreferrer"">How to Use List</a> for working examples that show how to add data to the <code>ListModel</code> of the <code>JList</code>.</p>

<p>Basically instead of adding the strings to a <code>List</code> you add them to a <code>DefaultListModel</code> and add the model to the <code>JList</code>.</p>
","4","41007357"
"<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html"" rel=""noreferrer""><code>Properties</code></a> implements <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html"" rel=""noreferrer""><code>Map</code></a> which has a <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html#keySet%28%29"" rel=""noreferrer""><code>keySet()</code></a> method which returns a <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html"" rel=""noreferrer""><code>Set</code></a> with all keys. The <code>Set</code> in turn has a <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html#toArray%28T%5B%5D%29"" rel=""noreferrer""><code>toArray()</code></a> method which allows you to get the values as a plain array.</p>

<p>So, this should do:</p>

<pre><code>String[] keys = properties.keySet().toArray(new String[0]);
</code></pre>
","7","9100780"
"<p>You can restrict user to enter another value by this: (This program is for if You are taking values from user). This will asks for number until you enter number within 0 to 9.</p>

<p>You can make your code according to this. (This is just for your reference, How can you restrict user to enter wrong thing)</p>

<pre><code>Scanner scan=new Scanner(System.in);
int i=-1;
i=scan.nextInt();
while(i&lt;=0 &amp;&amp; i&gt;=9){
    i=scan.nextInt();
}
</code></pre>

<p>EDIT</p>

<p>As per your comment, In that case you need to change this as:</p>

<pre><code>String s="""";
while(!s.matches(""^[0-9A-F]+$"")){
    s=scan.nextLine();
}
</code></pre>
","0","13842670"
"<p>Did you mean inputting an array of dates.This code would help..</p>

<pre><code>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

public class Datinput {

    public static void main(String args[]) {
        int n;
        ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        String da[] = new String[n];
        SimpleDateFormat sdf = new SimpleDateFormat(""dd/MM/yyyy"");
        sdf.setLenient(false);
        Date date[] = new Date[n];
        in.nextLine();
        for (int i = 0; i &lt; da.length; i++) {
            da[i] = in.nextLine();
        }
        for (int i = 0; i &lt; da.length; i++) {

            try {
                date[i] = sdf.parse(da[i]);
            } catch (ParseException e) {

                e.printStackTrace();
            }
        }

        in.close();
    }
}
</code></pre>
","1","1801044"
"<p>I would create a class to hold the RGB values and have it check that the correct values are entered.  See the test code below.... you can expand as you need to handle more cases.</p>

<pre><code>import java.util.*;

public class jtest
{
  public static void main(String args[])
  {
    new jtest();
  }

  public jtest()
  {
    ArrayList&lt;RGB&gt; RGBarray = new ArrayList&lt;RGB&gt;();

    try
    {
    RGBarray.add(new RGB(""F""));
    RGBarray.add(new RGB(""J""));
    }
    catch(BadRGBValueException BRGBVE)
    {
      BRGBVE.printStackTrace();
    }
  }

  class BadRGBValueException extends Exception
  {
    public BadRGBValueException(String message)
    {
      super(message);
    }
  }

  class RGB
  {
    public RGB(String input) throws BadRGBValueException
    {
      if (!input.matches(""^[0-9A-F]+$""))
      {
        throw new BadRGBValueException(input + "" is not a valid RGB value"");
      }

      value = input;
    }

    private String value = null;
  }
}
</code></pre>
","0","13842670"
"

<p>Just for the <em>""I've the shortest one""</em> challenge, here are mines ;)</p>

<p><strong>Iterative:</strong></p>

<pre class=""lang-java prettyprint-override""><code>public static String join(String s, Object... a) {
    StringBuilder o = new StringBuilder();
    for (Iterator&lt;Object&gt; i = Arrays.asList(a).iterator(); i.hasNext();)
        o.append(i.next()).append(i.hasNext() ? s : """");
    return o.toString();
}
</code></pre>

<p><strong>Recursive:</strong></p>

<pre class=""lang-java prettyprint-override""><code>public static String join(String s, Object... a) {
    return a.length == 0 ? """" : a[0] + (a.length == 1 ? """" : s + join(s, Arrays.copyOfRange(a, 1, a.length)));
}
</code></pre>
","5","1515437"
"<p>This three lines of code can remove the duplicated element from ArrayList or any collection.</p>

<pre><code>List&lt;Entity&gt; entities = repository.findByUserId(userId);

Set&lt;Entity&gt; s = new LinkedHashSet&lt;Entity&gt;(entities);
entities.clear();
entities.addAll(s);
</code></pre>
","3","203984"
"<p>The error refers to the fact that <code>ArrayUtils</code> cannot be found among your classes, the standard Java runtime or the libraries in your classpath.</p>

<p><code>ArrayUtils</code> is part of <a href=""https://commons.apache.org/"" rel=""nofollow"">Apache Commons</a>, you need to include that jar library in your project and to add an <code>import org.apache.commons.lang.ArrayUtils</code> on top, to make this work.</p>
","2","30014741"
"<p>I dont see the need to make a single iterator when invoking the two from the arrays works just fine as per example:</p>

<pre><code>int 2dArray[][];
for(int 1dArray[]: 2dArray){
    for(int i: 1dArray){
        //do stuff
    }
}
</code></pre>
","1","7370065"
"<p>The following shows the declaration of an array, but the array is not initialized:</p>

<pre><code> int[] myIntArray = new int[3];
</code></pre>

<p>The following shows the declaration as well as initialization of the array:</p>

<pre><code>int[] myIntArray = {1,2,3};
</code></pre>

<p>Now, the following also shows the declaration as well as initialization of the array:</p>

<pre><code>int[] myIntArray = new int[]{1,2,3};
</code></pre>

<p>But this third one shows the property of anonymous array-object creation which is pointed by a reference variable ""myIntArray"", so if we write just ""new int[]{1,2,3};"" then this is how anonymous array-object can be created.</p>

<p>If we just write:</p>

<pre><code>int[] myIntArray;
</code></pre>

<p>this is not declaration of array, but the following statement makes the above declaration complete:</p>

<pre><code>myIntArray=new int[3];
</code></pre>
","30","1200621"
"<p>I assume you meant <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html"" rel=""nofollow noreferrer""><code>ArrayList</code></a> when you said ""array"", since in Java you can't ""add"" to a full array.</p>

<p>Firstly if you're ""inserting at the end"" you're actually <em>appending</em> to the end not, ""inserting"". This distinction is important because <em>inserting</em> into an ArrayList at an arbitrary position is an O(n) operation, because all elements to the right must be ""shifted"" along by one position to make room for the element being inserted.</p>

<p>Adding to (the tail of) a <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html"" rel=""nofollow noreferrer""><code>LinkedList</code></a> is always a O(1) (constant time) operation.</p>

<p>Adding to an ArrayList is usually a O(1) operation, but <em>may</em> be a O(n) operation if the backing array is full, because a new array must be allocated and every element copied across. In the general case of the array not being full, the performance of ArrayList is (slightly) faster than LinkedList, but the difference is very small.</p>

<p>The amortised cost of both is the same, but if constant time is required every time, only a LinkedList can do it.</p>
","8","43834422"
"<p>Appending an element to the end of <code>Array</code> would be faster then Adding to a <code>LinkedList</code> as adding to a <code>LinkedList</code> always means creation of a cell at the end of the list and then adding a value to it. In Array you just add a value to existing cell. However, in <code>Array</code> if it is already full and doesn't have a space you will get <code>IndexOutOfBoundsException</code> while in the <code>LinkedList</code> you will never have this problem as the List will always grow according to your needs. Also there is distinct difference between <code>LinkedList</code> and <code>ArrayList</code> with <code>ArrayList</code> there is a random access which means the access to any element is always O(1) while in <code>LinkedList</code>it is always sequential access which means that access time will differ depending on the index and in worst case scenario is O(n). However, Appending to <code>LinkedList</code> is Always O(1) but not so in <code>ArrayList</code> With ArrayList if it is not full it will be O(1) but if it is full it will first grow by more then one cell and only ten it will add the value, so the worst case scenario is O(n)</p>
","0","43834422"
"<p>try <code>Collections.reverse(yourArrayList);</code></p>

<p>for javadoc, <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#reverse(java.util.List)"" rel=""nofollow"">docs.oracle.com/...</a></p>
","0","30014741"
"<p>Method <code>newInstance()</code> belongs to the class called <code>Class</code>. Javadoc:</p>

<blockquote>
  <p>Creates a new instance of the class represented by this Class object. The class is instantiated as if by a new expression with an empty argument list.</p>
</blockquote>

<p>So these two are equivalent:</p>

<pre><code>ArrayList a = new ArrayList();
ArrayList b = ArrayList.class.newInstance();
</code></pre>

<p>You can do this for every class, but it is not recommended because you lose compile-time safety (it may fail at run-time if there is no no-arg constructor) and cannot track usages.</p>
","2","28747534"
"<p>The accepted answer is correct: using <strong>Arrays.hashCode</strong> gives identical results for byte[] with the same values.
<strong>Arrays.deepHashCode</strong> is necessary if you have a nested (deep) structure.</p>

<pre><code>import java.util.Arrays;

public class A {

    public static void main(String[] args) {
        byte[] a = {10, 32, -43, 80};
        byte[] b = {13, -40};
        byte[] c = {10, 32, -43, 80};

        System.out.println(""NOTE: A and C have identical values, B differs"");
        System.out.println(""Using byte[].hashCode(): A and C have different hash codes"");
        System.out.println(""a = "" + a.hashCode());
        System.out.println(""b = "" + b.hashCode());
        System.out.println(""c = "" + c.hashCode());

        System.out.println(""Using Arrays.hashCode(): A and C have identical hash codes"");
        System.out.println(""a = "" + Arrays.hashCode(a));
        System.out.println(""b = "" + Arrays.hashCode(b));
        System.out.println(""c = "" + Arrays.hashCode(c));

        System.out.println(""Using Arrays.deepHashCode(): A and C have identical hash codes"");
        System.out.println(""a = "" + Arrays.deepHashCode(new Object[]{a}));
        System.out.println(""b = "" + Arrays.deepHashCode(new Object[]{b}));
        System.out.println(""c = "" + Arrays.deepHashCode(new Object[]{c}));
    }
}
</code></pre>

<p>This results in output:</p>

<pre><code>NOTE: A and C have identical values, B differs
Using byte[].hashCode(): A and C have different hash codes
a = 141847843
b = 329849131
c = 1119051810
Using Arrays.hashCode(): A and C have identical hash codes
a = 1250930
b = 1324
c = 1250930
Using Arrays.deepHashCode(): A and C have identical hash codes
a = 1250961
b = 1355
c = 1250961
</code></pre>

<p>Here's an example of when <strong>Arrays.deepHashCode</strong> is necessary</p>

<pre><code>import java.util.Arrays;

public class B {
    public static void main(String[] args) {
        Object[] d = {""abc"", ""def"", new String[]{""ghi""}};
        Object[] e = {""abc"", ""def"", new String[]{""ghi""}};

        System.out.println(""NOTE: D and E have identical nested values"");
        System.out.println(""Using Object[].hashCode(): different"");
        System.out.println(""d = "" + d.hashCode());
        System.out.println(""f = "" + e.hashCode());

        System.out.println(""Using Arrays.hashCode(): still different"");
        System.out.println(""d = "" + Arrays.hashCode(d));
        System.out.println(""e = "" + Arrays.hashCode(e));

        System.out.println(""Using Arrays.deepHashCode(): identical"");
        System.out.println(""d = "" + Arrays.deepHashCode(d));
        System.out.println(""e = "" + Arrays.deepHashCode(e));
    }
}
</code></pre>

<p>output:</p>

<pre><code>NOTE: D and E have identical nested values
Using Object[].hashCode(): different
d = 241990244
f = 1943487137
Using Arrays.hashCode(): still different
d = 1057745997
e = 709187068
Using Arrays.deepHashCode(): identical
d = 95807651
e = 95807651
</code></pre>
","6","4671858"
"<p>With Java 8, you can do this:</p>

<pre><code>int[] haystack = {1, 2, 3};
int needle = 3;

boolean found = Arrays.stream(haystack).anyMatch(x -&gt; x == needle);
</code></pre>

<p>You'd need to do </p>

<pre><code>boolean found = Arrays.stream(haystack).anyMatch(x -&gt; needle.equals(x));
</code></pre>

<p>if you're working with objects.</p>
","14","3384203"
"<p>Try <a href=""https://code.google.com/p/guava-libraries/"" rel=""nofollow"">Guava</a>. I haven't tested it but seems like it has what you need. toByteArray is listed in <a href=""https://code.google.com/p/guava-libraries/wiki/IOExplained"" rel=""nofollow"">their IO tools</a>.</p>
","0","11540990"
"<p><strong>Code:</strong></p>

<pre><code>List&lt;String&gt; duplicatList = new ArrayList&lt;String&gt;();
duplicatList = Arrays.asList(""AA"",""BB"",""CC"",""DD"",""DD"",""EE"",""AA"",""FF"");
//above AA and DD are duplicate
Set&lt;String&gt; uniqueList = new HashSet&lt;String&gt;(duplicatList);
duplicatList = new ArrayList&lt;String&gt;(uniqueList); //let GC will doing free memory
System.out.println(""Removed Duplicate : ""+duplicatList);
</code></pre>

<p><strong>Note:</strong> Definitely, there will be memory overhead.</p>
","2","203984"
"<p>You need to write your own comparator and use <code>Collections.sort(list, comparator)</code> on your <code>ArrayList</code>, which will bring the top 3 integers to the top(this is purely based on the logic in your comparator).</p>
","0","17540251"
"<p>use Collections.sort to sort and retrieve the first three values</p>
","0","17540251"
"<p>This is a program to show how to give input from system and also calculate sum at each level and average.</p>

<pre><code>package NumericTest;

import java.util.Scanner;

public class SumAvg {


 public static void main(String[] args) {

 int i,n;
 System.out.println(""Enter the number of inputs"");
 Scanner sc = new Scanner(System.in);
 n=sc.nextInt();
 int a[] = new int [n];

    System.out.println(""Enter the inputs"");
   for(i=0;i&lt;n;i++){
   a[i] = sc.nextInt();
  System.out.println(""Inputs are "" +a[i]);
 }

  int sum = 0;
  for(i=0;i&lt;n;i++){
 sum = sum +a[i];
  System.out.println(""Sums : "" +sum);
 }
  int avg ;
  avg = sum/n;
  System.out.println(""avg : "" +avg);
  }
 }
</code></pre>
","0","2795350"
"<p>An alternative in Java 8:</p>

<pre><code>String[] strings = list.stream().toArray(String[]::new);
</code></pre>

<p>Java 11+:</p>

<pre><code>String[] strings = list.toArray(String[]::new);
</code></pre>
","185","4042434"
"<p>Put all the elements into a <code>TreeSet</code> using <code>TreeSet(Collection c)</code> constructor then use <code>TreeSet.descendingIterator</code> to get the first 3 elements. A list may contain duplicates,  using TreeSet guarantees that you retrieve 3 distinct largest values.</p>
","0","17540251"
"<p>Do you like my 3-lines way using only String class's methods?</p>

<pre><code>static String join(String glue, String[] array) {
    String line = """";
    for (String s : array) line += s + glue;
    return (array.length == 0) ? line : line.substring(0, line.length() - glue.length());
}
</code></pre>
","1","1515437"
"<pre><code>List&lt;Integer&gt; list;
Collections.sort(list);
List&lt;Integer&gt; top3 = new ArrayList&lt;Integer&gt;(list.subList(list.size() -3, list.size()));
</code></pre>

<p>I could have simply used the subList, but the list returned from subList() is a <em>view</em> on the base list, so changes made there would be reflected in top3.</p>
","7","17540251"
"<p>The @jonathan-stafford solution is OK. But this don't preserve the list order.</p>

<p>If you want preserve the list order you have to use this:</p>

<pre><code>public static &lt;T&gt; void removeDuplicate(List &lt;T&gt; list) {
Set &lt;T&gt; set = new HashSet &lt;T&gt;();
List &lt;T&gt; newList = new ArrayList &lt;T&gt;();
for (Iterator &lt;T&gt;iter = list.iterator();    iter.hasNext(); ) {
   Object element = iter.next();
   if (set.add((T) element))
      newList.add((T) element);
   }
   list.clear();
   list.addAll(newList);
}
</code></pre>

<p>It's only to complete the answer. Very good!</p>
","0","203984"
"<p>Hello imagine that you have the following code:</p>

<pre><code>public class Test { 
    public static void printArray(int []arr){
        for (int i : arr) {
            System.out.print(i);
        }
    }
    public static void main(String[] args) {

        int arr[]={1,2,3,4,5,6};
        printArray(arr);
    }
}
</code></pre>

<p>The output is <code>123456</code>. If you want to call the printArrayMethod in a single line you have to use a anonymous array like the following:</p>

<pre><code>printArray(new int[]{1,2,3,4,5,6});
</code></pre>

<p>You cant use something like the following:</p>

<pre><code>printArray({1,2,3,4,5,6});
</code></pre>

<p>It is going to provoke a compilation fail.</p>

<p>And the question is, Why do I need to use an anonymous array and not a normal array like the first example.</p>

<p>Check the following code:</p>

<pre><code>public class Test { 
    public static void printArray(int []arr){
        for (int i : arr) {
            System.out.print(i);
        }
    }
    public static void main(String[] args) {
        //Many code
        printArray(new int[]{1,2,3,4,5,6});
        //Many code
    }
}
</code></pre>

<p>If you use a normal array this array is going to alive in your heap during all the main method execution and with the anonymous array you are only use this array to the printArray method and after this the object is going to be eligible to the garbage collector.</p>
","1","31056815"
"<p>If you want to serialize boolean array, check this: <a href=""https://stackoverflow.com/questions/9349519/how-to-convert-boolean-array-to-binary-and-vice-versa-in-java"">How to convert boolean array to binary and vice versa in Java?</a></p>

<p>If you want to use bits instead of booleans, check <code>BitSet</code> class: <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html"" rel=""nofollow noreferrer"">http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html</a></p>

<blockquote>
  <p>This class implements a vector of bits that grows as needed. Each
  component of the bit set has a boolean value. The bits of a BitSet are
  indexed by nonnegative integers. Individual indexed bits can be
  examined, set, or cleared. One BitSet may be used to modify the
  contents of another BitSet through logical AND, logical inclusive OR,
  and logical exclusive OR operations.</p>
  
  <p>By default, all bits in the set initially have the value false.</p>
</blockquote>

<p>You can use these methods:</p>

<p><a href=""http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html#set%28int%29"" rel=""nofollow noreferrer"">BitSet#set(int)</a> to set the bit to <code>true</code> at specified position.<br>
<a href=""http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html#clear%28int%29"" rel=""nofollow noreferrer"">BitSet#clear(int)</a> to set the bit to <code>false</code> at specified position.</p>
","2","20281335"
"<pre><code>        List&lt;String&gt; result = new ArrayList&lt;String&gt;();
        Set&lt;String&gt; set = new LinkedHashSet&lt;String&gt;();
        String s = ""ravi is a good!boy. But ravi is very nasty fellow."";
        StringTokenizer st = new StringTokenizer(s, "" ,. ,!"");
        while (st.hasMoreTokens()) {
            result.add(st.nextToken());
        }
         System.out.println(result);
         set.addAll(result);
        result.clear();
        result.addAll(set);
        System.out.println(result);

output:
[ravi, is, a, good, boy, But, ravi, is, very, nasty, fellow]
[ravi, is, a, good, boy, But, very, nasty, fellow]
</code></pre>
","1","203984"
"<p>Make use of <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html#subList%28int,%20int%29"" rel=""nofollow"">List#subList(int fromIndex,int toIndex)</a> </p>

<blockquote>
  <p>Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. </p>
</blockquote>

<pre><code>yourList.subList(yourList.size() -n, yourList.size());
</code></pre>

<p>As per sublist docs </p>
","1","17540251"
"<p>If you mean anonymous arrays like anonymous class where it was declared and instantiated at the same time without a name. The example below shows when you would use it.</p>
<p>For example, you have a method which expects an array of <code>int</code> as the argument in the parameter list.</p>
<pre><code>public void fillPolygon(int[] xPoints, int[] yPoints, nPoints)
</code></pre>
<p>To invoke this method:</p>
<pre><code>int[] xPoints = {1,2,3};
int[] yPoints = {4,5,6};
g.fillPolygon(xPoints, yPoints, 3);
</code></pre>
<p>You can also write it as:</p>
<pre><code>g.fillPolygon(new int[]{1,2,3}, new int[]{4,5,6}, 3);
</code></pre>
<blockquote>
<p>In what scenario anonymous arrays are used?</p>
</blockquote>
<p><strong>A:</strong> Use it when you are only going to use it <em>once</em> because you do not keep a reference (name) for the arrays.</p>
<p><strong>Q:</strong> So what is the benefit of using &quot;anonymous array&quot;?</p>
<p><strong>A:</strong> It keeps your codes concise.</p>
","1","31056815"
"<p>Use a <code>Set&lt;Integer&gt;</code>, duplicates will not be stored.</p>
","0","21025225"
"<p>It depends on the size of the list and what performance you want. If the list is ""small"" then any of the earlier solutions will suffice, depending on your requirements.</p>

<p>If the list is ""large"" and performance is important, then you should iterate through the list and keep the 3 largest as you go.</p>

<p>Another trade-off is your time and bugs vs using libraries. An of the library approaches mentioned will work in less of your programmer-time than a custom-coded solution</p>
","0","17540251"
"<p>Java 8 streams provide a very simple way to remove duplicate elements from a list. Using the distinct method.
If we have a list of cities and we want to remove duplicates from that list it can be done in a single line - </p>

<pre><code> List&lt;String&gt; cityList = new ArrayList&lt;&gt;();
 cityList.add(""Delhi"");
 cityList.add(""Mumbai"");
 cityList.add(""Bangalore"");
 cityList.add(""Chennai"");
 cityList.add(""Kolkata"");
 cityList.add(""Mumbai"");

 cityList = cityList.stream().distinct().collect(Collectors.toList());
</code></pre>

<p><a href=""http://netjs.blogspot.com/2015/08/how-to-remove-duplicate-elements-from-arraylist-java.html"" rel=""noreferrer"">How to remove duplicate elements from an arraylist</a></p>
","26","203984"
"<p>The best way is called <code>LinkedHashSet&lt;Integer&gt;</code> if you need order or just <code>Set&lt;Integer&gt;</code> (any implementation) if you don't</p>
","0","21025225"
"<pre><code>int[] row = list.get(rowNumber);
row[columnNumber] = value;
</code></pre>
","2","18379513"
"<p>You can insert a specified element at a specified position using the <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/Vector.html#add%28int,%20E%29"" rel=""nofollow"">add method</a>.</p>
","1","18379513"
"<pre><code>Vector&lt;int[]&gt; vector=new Vector&lt;int[]&gt;();
vector.get(0)[0]=1;
</code></pre>
","1","18379513"
"<pre><code>    boolean duplicate = false;
    int input = 5;
    int[] a = new int[5];
    for(int x : a){
        if(x == input){
            duplicate = true;
            break;
        }
    }
    if(!duplicate){
        a[pos] = input;
    }
</code></pre>
","0","21025225"
"<p>you can use <code>set</code> as described <a href=""http://www.tutorialspoint.com/java/util/vector_set.htm"" rel=""nofollow"">here</a></p>

<pre><code>Vector&lt;int[]&gt; v = new Vector&lt;int[]&gt;[10];
v.set(0, new int[10]);
</code></pre>

<p>and then get a value</p>

<pre><code>int[] curr = c.get(0);
</code></pre>
","1","18379513"
"<p>Iterate through the list and keep removing the elements till you find that String.</p>

<pre><code>for (int i=0; i&lt;list.size(); i++) {
  if (!(list.get(i).equal(""String""))) {
    list.remove(0);
  }
}
</code></pre>
","0","21127642"
"<p>list.add(int index, String Element);</p>
","1","18379513"
"<p>you can add elements to arraylist using  <strong>add</strong>   metheod.</p>

<pre><code>    int[] x={1,2,3,4,5};
 ArrayList&lt;int[]&gt; demo = new  ArrayList&lt;int[]&gt;();
    demo.add(x);
</code></pre>

<p>you can,  inserts the specified element at the specified position in this list. </p>

<pre><code>  add(int index, E element)
</code></pre>

<p><strong>index</strong> : index at which the specified element is to be inserted.
<strong>element</strong> element to be inserted here must be integer array </p>

<pre><code>   demo.add(5, x);
</code></pre>

<p>element inserted in 5th position in arraylist</p>
","0","18379513"
"<p>You should be able to achieve this by using <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html#indexOf%28java.lang.Object%29"" rel=""nofollow"">indexOf</a> and <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html#subList%28int,%20int%29"" rel=""nofollow"">subList</a>. </p>

<p>Consider reading the linked documentation for more information.</p>

<p><strong>Code example:</strong></p>

<pre><code>list.subList(0, list.indexOf(searched_string)).clear();
</code></pre>
","0","21127642"
"<p>It's there for historical reasons: it's there since JDK 1.0, while the Java class <code>Arrays</code> where this method logically belongs has not been introduced until Java 1.2 release.</p>
","1","18546555"
"<p>Most likely this is what they had in mind.</p>

<pre><code>List&lt;String&gt; words = ...

String word = words.remove(0);
</code></pre>

<p>The method <code>remove(int)</code> return the object removed from the list.</p>
","1","32206776"
"<p>Get the index of the newly added element.  Use this index to get a sublist and pass the sublist to the <code>removeAll</code> method:</p>

<p><strong>Removing</strong></p>

<pre><code>//addition = newly added String     
list.removeAll(new ArrayList&lt;String&gt;(list.subList(0,list.indexOf(addition))));
</code></pre>

<p><strong>Full Example</strong></p>

<pre><code>public class ArrayListSortDelete {
    public static void main(String[] args) {
        String addition = ""BB"";
        List&lt;String&gt; list = new ArrayList(Arrays.asList(new String[] { ""A"", ""B"", ""C"", ""D"" }));
        list.add(addition);
        Collections.sort(list);

        System.out.println(""Before"");
        for (String s : list) {
            System.out.println(s);
        }

            //new ArrayList&lt;String&gt;() avoids concurrent modification.
        list.removeAll(new ArrayList&lt;String&gt;(list.subList(0,list.indexOf(addition))));

        System.out.println(""After:"");
        for (String s : list) {
            System.out.println(s);
        }

    }

}
</code></pre>
","4","21127642"
"<p>This should be alright</p>

<pre><code>ArrayList&lt;String&gt; yourList;
String query;    

int index = yourList.indexOf(query);
for (int a=0; a&lt;index; a++) {
    yourList.remove(0);
}
</code></pre>
","3","21127642"
"<p>Try using</p>

<pre><code>array[row][col] = object
</code></pre>

<p>Hope this helps!</p>
","0","32388743"
"<p>You are comparing the whole array <code>A</code> with the string.</p>

<p>try comparing the individual elements.</p>

<pre><code>if (A[compCount -1].equals(animal)) {
  System.out.println(""String "" + animal + "" was found using "" + compCount + "" comparisions."");
  break;
 }
</code></pre>

<p>Also note that you should <code>break</code> after printing.</p>

<p>Also it would be better still to use equalsIgnoreCase</p>
","6","22341024"
"<p>Try this,</p>

<pre><code>String[] A = {""cat"", ""dog"", ""mouse"", ""fox"", ""bear"", ""wolf"", ""eagle"", ""moose"", ""parrot"", ""rabbit""};
String animal = (args[0]);

if(Arrays.asList(A).contains(animal))
   {
      System.out.println("" String "" + animal + "" was found using "" + compCount + "" comparisions. "");
   }
   else
   {
      System.out.println("" String "" + animal + "" could not be found, and "" + compCount + "" comparisons were performed. "");
   }
</code></pre>
","0","22341024"
"<p>`</p>

<pre><code>import java.util.*;
class a_class{
    private int i;
    public a_class(int k){
        i=k;
    }
    public void print(){
        System.out.print(i+""\t"");
    }
}
class Stack_help{
    public static void main(String []args){
        a_class [][]a=new a_class[4][4];//creating a new array of 2d objects
        for(int i=0;i&lt;4;i++){
            for(int j=0;j&lt;4;j++){
                a[i][j] = new a_class(i);
                a[i][j].print();
            }
            System.out.println(""\n"");
        }
    }
}
</code></pre>

<p>`</p>

<p>Probably what you are asking just run this code you will get your answer</p>
","1","32388743"
"<p>Though Kevin Bowersox have given an answer, I am here to give you an alternative  :)</p>

<p>Another way to interpret your problem is:</p>

<p>Given an array list, and a new element, remove all elements in the array list that is less than the new element, then put the new element in the list and sort the list.</p>

<p>Here is one way:</p>

<pre><code>ArrayList&lt;String&gt; oList = .....;
List&lt;String&gt; newList = new LinkedList&lt;String&gt;(); // tmp list to store the result
String newElement = ...;

for (String s: oList) {
    if (s.compareTo(newElement) &gt;= 0) { //  s &gt;= newElement
        newList.add(s);
    }
}
newList.add(newElement);

// put the result back to oList
oList.clear();
oList.putAll(newList);

// sort the result
Collections.sort(oList);

// now oList contains what you want
</code></pre>

<p>You may even do it in-place in the oList without help of a temp list (but remove of arrayList is not efficient).</p>
","0","21127642"
"<p>Without actual code:</p>

<ol>
<li>iterate thorough the array </li>
<li>count the 1s you found </li>
<li>if you found a 0 then start over the count </li>
<li>check after increasing the counter: if the counter reaches 3 then return with <code>true</code> </li>
<li>if you reached the end of the array and no more elements then return with <code>false</code></li>
</ol>

<p>Something like this, I hope I could help.</p>
","2","22836633"
"<p>I write my own sorting algorithms in my personal projects without looking at any formal sorting algorithms. It keeps my programming edges sharpend, plus it's interesting to see what you can come up with on your own, compared to the more formal sorting algorithms.</p>
","1","3279447"
"<p>The easiest method is to use the <code>toArray(IntFunction&lt;A[]&gt; generator)</code> method with an array constructor reference. This is suggested in the <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#toArray-java.util.function.IntFunction-"" rel=""noreferrer"">API documentation for the method</a>.</p>

<pre><code>String[] stringArray = stringStream.toArray(String[]::new);
</code></pre>

<p>What it does is find a method that takes in an integer (the size) as argument, and returns a <code>String[]</code>, which is exactly what (one of the overloads of) <code>new String[]</code> does.</p>

<p>You could also write your own <code>IntFunction</code>:</p>

<pre><code>Stream&lt;String&gt; stringStream = ...;
String[] stringArray = stringStream.toArray(size -&gt; new String[size]);
</code></pre>

<p>The purpose of the <code>IntFunction&lt;A[]&gt; generator</code> is to convert an integer, the size of the array, to a new array.</p>

<p>Example code:</p>

<pre><code>Stream&lt;String&gt; stringStream = Stream.of(""a"", ""b"", ""c"");
String[] stringArray = stringStream.toArray(size -&gt; new String[size]);
Arrays.stream(stringArray).forEach(System.out::println);
</code></pre>

<p>Prints:</p>

<pre><code>a
b
c
</code></pre>
","1263","23079003"
"<p>Since you cannot use array and cannot create any new method. You can do something like this:</p>

<p><strong>Output:</strong></p>

<pre><code> O  .  .  .  . 
 .  .  .  .  . 
 .  .  .  .  . 
 .  .  .  .  . 
 .  .  .  .  E 
</code></pre>

<p><strong>Codes:</strong></p>

<pre><code>    int playerX=0, playerY=0;  //holds player's location
    int exitX = 4, exitY = 4;  //holds exit's location

    //Print map
    for(int x=0; x&lt;5; x++){
        for(int y=0; y&lt;5; y++)
            if(x == playerX &amp;&amp; y == playerY)
                System.out.print("" O ""); //print player location
            else if(x == exitX &amp;&amp; y == exitY)
                System.out.print("" E "");
            else    
                System.out.print("" . "");
        System.out.println("""");     
    }
    /*
    //Update player's position on movement
    if (movement == DOWN)
        playerY = Math.min(playerY+1 , 5);
    else if (movement == UP)
        playerY = Math.max(playerY-1 , 0);
    else if (movement == LEFT)
        playerX = Math.max(playerX-1 , 0);
    else else if (movement == RIGHT)
        playerX = Math.max(playerY+1 , 5);  
    */
</code></pre>

<p>You can enclose every thing in a while loop, and repeat the loop so long player's location is not same as exit's location.</p>
","1","32664647"
"<p>The interface however defines the size() method, which returns an int.</p>

<pre><code>Returns the number of elements in this list. If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
</code></pre>

<p>So, no limit, but after you reach Integer.MAX_VALUE, the behaviour of the list changes a bit</p>

<p>ArrayList (which is tagged) is backed by an array, and is limited to the size of the array - i.e. Integer.MAX_VALUE</p>
","2","3767979"
"<p>Since this is home work I am not going to give an answer but rather a hint.</p>

<p>Draw the 5x5 maze you want on paper or whatever. Now you have 25 points. That is 25 conditions of x,y. That is you can make 25 if else statements. Loop through and test your if else chain for each move and rendering.</p>

<p>Yes that many conditions is tedious but I'm sure the point of the assignment is test your ability to properly construct a chain of conditions (you could also use a switch statement using strings for cords but probably not a good idea).</p>
","1","32664647"
"<p><code>ArrayList</code> has the basic data structure:</p>

<pre><code>private transient Object[] elementData;
</code></pre>

<p>When we actually create an <code>ArrayList</code> the following piece of code is executed:</p>

<pre><code> this.elementData = new Object[initial capacity];
</code></pre>

<p><code>ArrayList</code> can be created in the two ways mentioned below:</p>

<ol>
<li><code>List list = new ArrayList();</code></li>
</ol>

<p>The default constructor is invoked and will internally create an array of <code>Object</code> with default size 10.</p>

<ol start=""2"">
<li><code>List list = new ArrayList(5);</code></li>
</ol>

<p>When we create an <code>ArrayList</code> in this way, constructor with an integer argument is invoked and 
create an array of <code>Object</code> with default size 5.</p>

<p>Inside the <code>add</code> method there is check whether the current size of filled elements is greater/equal to the maximum size of the
<code>ArrayList</code> then it will create new <code>ArrayList</code> with the size new <code>arraylist = (current arraylist*3/2)+1</code> and copy the data from old to
new array list.</p>
","2","3467965"
"<p>In Java 8 you can use </p>

<p>1) Stream API :</p>

<pre><code>String[] a = new String[] {""a"", ""b"", ""c""};
String result = Arrays.stream(a).collect(Collectors.joining("", ""));
</code></pre>

<p>2) new String.join method: <a href=""https://stackoverflow.com/a/21756398/466677"">https://stackoverflow.com/a/21756398/466677</a> </p>

<p>3) java.util.StringJoiner class: <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html"" rel=""noreferrer"">http://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html</a></p>
","57","1515437"
"<pre><code>public static void main(String[] args){
    ArrayList&lt;Object&gt; al = new ArrayList&lt;Object&gt;();
    al.add(""abc"");
    al.add('a');
    al.add('b');
    al.add('a');
    al.add(""abc"");
    al.add(10.3);
    al.add('c');
    al.add(10);
    al.add(""abc"");
    al.add(10);
    System.out.println(""Before Duplicate Remove:""+al);
    for(int i=0;i&lt;al.size();i++){
        for(int j=i+1;j&lt;al.size();j++){
            if(al.get(i).equals(al.get(j))){
                al.remove(j);
                j--;
            }
        }
    }
    System.out.println(""After Removing duplicate:""+al);
}
</code></pre>
","11","203984"
"<p>This will do...</p>

<pre><code>    byte[] source = new byte[2048];
    byte[] target = new byte[1024];  

// fill source with some data...

    Array.Copy(source, buffer, 1024);
</code></pre>
","0","3405195"
"<p>With Guava you can do this in one line:</p>

<pre><code>int[] array = Ints.toArray(Lists.newArrayList(Ints.stringConverter().convertAll(Splitter.on("","").split(""1,2,3,4,5""))));
</code></pre>

<p>or so (if you don't require an array):</p>

<pre><code>Iterable&lt;Integer&gt; ints = Ints.stringConverter().convertAll(Splitter.on("","").split(""1,2,3,4,5""));
</code></pre>
","0","15271306"
"<p>Here is my answer without using any other data structure like set or hashmap etc.</p>

<pre><code>public static &lt;T&gt; ArrayList&lt;T&gt; uniquefy(ArrayList&lt;T&gt; myList) {

    ArrayList &lt;T&gt; uniqueArrayList = new ArrayList&lt;T&gt;();
    for (int i = 0; i &lt; myList.size(); i++){
        if (!uniqueArrayList.contains(myList.get(i))){
            uniqueArrayList.add(myList.get(i));
        }
    }

    return uniqueArrayList;
}
</code></pre>
","0","203984"
"<p>You cannot. You must declare the array outside the loop. This may seem strange at first but what if the condition for the loop to run even once is never met? How could you possibly then access an array which was never even created?</p>
","6","10068234"
"<p>To Get in One Dimension Array. </p>

<pre><code>    String[] arr1 = new String[hashmap.size()];
    String[] arr2 = new String[hashmap.size()];
    Set entries = hashmap.entrySet();
    Iterator entriesIterator = entries.iterator();

    int i = 0;
    while(entriesIterator.hasNext()){

        Map.Entry mapping = (Map.Entry) entriesIterator.next();

        arr1[i] = mapping.getKey().toString();
        arr2[i] = mapping.getValue().toString();

        i++;
    }
</code></pre>

<p><br>
To Get in two Dimension Array.   <br></p>

<pre><code>   String[][] arr = new String[hashmap.size()][2];
   Set entries = hashmap.entrySet();
   Iterator entriesIterator = entries.iterator();

   int i = 0;
   while(entriesIterator.hasNext()){

    Map.Entry mapping = (Map.Entry) entriesIterator.next();

    arr[i][0] = mapping.getKey().toString();
    arr[i][1] = mapping.getValue().toString();

    i++;
}
</code></pre>
","3","1090556"
"<p>In Java, List permits ordered access of their elements. They can have duplicates because their lookup key is the position not some hash code, every element can be modified while they remain in the list where as Set represents a collection of unique elements and while elements are in set, they must not be modified.While there is no restriction preventing you from modifying elements in a set, if an element is modified, then it could become forever lost in the set.</p>

<pre><code>public static void main(String[] args) {  
           List&lt;String&gt; l = new ArrayList&lt;String&gt;();  
           l.add(""A"");  
           l.add(""B"");  
           l.add(""C"");  
           l.add(""A"");  
           System.out.println(""Before removing duplicates: "");  
           for (String s : l) {  
                System.out.println(s);  
           }  
           Set&lt;String&gt; set = new HashSet&lt;String&gt;(l);  
           List&lt;String&gt; newlist = new ArrayList&lt;String&gt;(set);  
           System.out.println(""after removing duplicates: "");  
           for (String s : newlist) {  
                System.out.println(s);  
           }  
      }  
</code></pre>

<p>for reference , refer this link <a href=""http://techno-terminal.blogspot.in/2015/11/how-to-remove-duplicates-from-arraylist.html"" rel=""nofollow"">How to remove duplicates from ArrayList</a> </p>
","-1","203984"
"<p>You cannot. Java uses block scope, so variables declared within any block (such as a loop) are not accessible from outside. You'll need to assign them to something that has an outer scope.</p>
","0","10068234"
"<p>In Java, this is normally done with a class.</p>

<pre><code>class C {
public String name;
public int num;
}
</code></pre>

<p>(later)</p>

<pre><code>C[] myArray = new C[5];
myArray[3] = new C();
myArray[3].name = ""Ford"";
myArray[3].num = 42;
</code></pre>

<p>name and num should typically be made private and accessed with getters and setters, but this is beyond the point.</p>
","2","23345232"
"<p>No, it never will. It would never make <em>sense</em> to return null, and if you look at the implementation it definitely won't. (I realize it's generally better to rely on the documented guarantees than the implementation, but I see no reason to suppose it would ever return null here.)</p>

<p>In particular, the <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html"" rel=""nofollow"">documentation</a> states:</p>

<blockquote>
  <p>Creates a newly allocated byte array.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>Returns: the current contents of this output stream, as a byte array.</p>
</blockquote>

<p>Those wouldn't be correct if it returned null, would it?</p>
","4","10071120"
"<p>Would something like this work better ? </p>

<pre><code>public static void removeDuplicates(ArrayList&lt;String&gt; list) {
Arraylist&lt;Object&gt; ar     = new Arraylist&lt;Object&gt;();
Arraylist&lt;Object&gt; tempAR = new Arraylist&lt;Object&gt;();
while (list.size()&gt;0){
    ar.add(list(0));
    list.removeall(Collections.singleton(list(0)));
}
list.addAll(ar);
</code></pre>

<p>}</p>

<p>That should maintain the order and also not be quadratic in run time.</p>
","0","203984"
"<p>Zoyd has it right, that this should be done with a class. Here's a more complete example.</p>

<pre><code>class MyClass 
{
    private String name;
    private int num;

    public MyClass(String name, int num)
    {
        this.name = name;
        this.num = num;
    }

    public String getName()
    {
        return name;
    }

    public int getNum()
    {
        return num;
    }
}


MyClass[] array = new MyClass[5];
array[0] = new MyClass(""name1"", 5);
array[1] = new MyClass(""name2"", 8);
...
</code></pre>

<p>If name or num ever need to change after original creation, then you can add setters for them.</p>
","2","23345232"
"<p>It would return <code>null</code> in one way ;)</p>

<pre><code>ByteArrayOutputStream baos = new ByteArrayOutputStream()
{
    public byte[] toByteArray()
    {
        return null;
    }
};
System.out.println(baos.toByteArray());
</code></pre>

<p><strong>OUTPUT:</strong></p>

<pre><code>null
</code></pre>
","0","10071120"
"<p>If you're willing to use a third-party library, you can use the method <code>distinct()</code> in <a href=""http://www.eclipse.org/collections/"" rel=""nofollow"">Eclipse Collections</a> (formerly GS Collections).</p>

<pre><code>ListIterable&lt;Integer&gt; integers = FastList.newListWith(1, 3, 1, 2, 2, 1);
Assert.assertEquals(
    FastList.newListWith(1, 3, 2),
    integers.distinct());
</code></pre>

<p>The advantage of using <code>distinct()</code> instead of converting to a Set and then back to a List is that <code>distinct()</code> preserves the order of the original List, retaining the first occurrence of each element. It's implemented by using both a Set and a List.</p>

<pre><code>MutableSet&lt;T&gt; seenSoFar = UnifiedSet.newSet();
int size = list.size();
for (int i = 0; i &lt; size; i++)
{
    T item = list.get(i);
    if (seenSoFar.add(item))
    {
        targetCollection.add(item);
    }
}
return targetCollection;
</code></pre>

<p>If you cannot convert your original List into an Eclipse Collections type, you can use ListAdapter to get the same API.</p>

<pre><code>MutableList&lt;Integer&gt; distinct = ListAdapter.adapt(integers).distinct();
</code></pre>

<p><strong>Note:</strong> I am a committer for Eclipse Collections.</p>
","5","203984"
"<p>If you are already using Apache Commons Lang, the  <a href=""http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/RandomUtils.html"" rel=""nofollow noreferrer""><code>RandomUtils</code></a>  makes this a one-liner:</p>
<pre><code>byte[] randomBytes = RandomUtils.nextBytes(20);
</code></pre>
<p>Note: this does not produce cryptographically-secure bytes.</p>
","18","5683206"
"<pre><code>    int row=10;
    int col=10;

    Object [][] objArray=new Object[row][col];

    objArray[0][0]=181818;
    objArray[0][1]=""Hello String"";

    System.out.println(objArray[0][0]);     
    System.out.println(objArray[0][1]);
</code></pre>

<p>You can use Object for that.</p>

<p>Plus you need to search before you post it. There is already answer here. <a href=""https://stackoverflow.com/questions/10063354/two-dimensional-array-of-different-types"">Two-dimensional array of different types</a></p>
","0","23345232"
"<p>No it wouldn't. Ever. Look into the code ByteArrayOutputStream.toByteArray:</p>

<pre><code>public synchronized byte toByteArray()[] {
    return Arrays.copyOf(buf, count);
}
</code></pre>

<p>Arrays.copyOf:</p>

<pre><code>public static byte[] copyOf(byte[] original, int newLength) {
    byte[] copy = new byte[newLength];
    System.arraycopy(original, 0, copy, 0,
                     Math.min(original.length, newLength));
    return copy;
}
</code></pre>
","0","10071120"
"<p>This solution has nothing to do with arrays, but if you've got <code>{name, num}, {name, num}</code> data, you might want to consider using a map. </p>

<pre><code>Map&lt;String, Double&gt; map = new HashMap&lt;String, Double&gt;();

Double valueX = 123.456;
Double valueY = 654.321;
map.put(""nameX"", valueX);
map.put(""nameY"", valueY);

Double valueX = c.get(""name"");
for(String name:c.keySet()) {
   System.out.println(""name:""+name+""\tvalue:""+c.get(name));
}
</code></pre>
","0","23345232"
"<p>Operation on array in java is not thread safe. Instead you may use <code>ArrayList</code> with <code>Collections.synchronizedList()</code>   </p>

<p>Suppose we are trying to populate a synchronized ArrayList of String. Then you can add item to the list like - </p>

<pre><code>List&lt;String&gt; list = 
         Collections.synchronizedList(new ArrayList&lt;String&gt;());

       //Adding elements to synchronized ArrayList
       list.add(""Item1"");
       list.add(""Item2"");
       list.add(""Item3""); 
</code></pre>

<p>Then access them from a <code>synchronized</code> block like this - </p>

<pre><code>synchronized(list) {
       Iterator&lt;String&gt; iterator = list.iterator(); 
       while (iterator.hasNext())
       System.out.println(iterator.next());
}  
</code></pre>

<p>Or you may use a thread safe variant of ArrayList - <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/CopyOnWriteArrayList.html"" rel=""nofollow noreferrer"">CopyOnWriteArrayList</a>. A good example can be found <a href=""http://beginnersbook.com/2013/12/how-to-synchronize-arraylist-in-java-with-example/"" rel=""nofollow noreferrer"">here</a>. </p>

<p>Hope it will help.</p>
","4","29153404"
"<pre><code>ArrayList&lt;String&gt; city=new ArrayList&lt;String&gt;();
city.add(""rajkot"");
city.add(""gondal"");
city.add(""rajkot"");
city.add(""gova"");
city.add(""baroda"");
city.add(""morbi"");
city.add(""gova"");

HashSet&lt;String&gt; hashSet = new HashSet&lt;String&gt;();
hashSet.addAll(city);
city.clear();
city.addAll(hashSet);
Toast.makeText(getActivity(),"""" + city.toString(),Toast.LENGTH_SHORT).show();
</code></pre>
","2","203984"
"<p>Yes you can use the <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html#subList%28int,%20int%29""><code>subList</code> method</a>:</p>

<pre><code>List&lt;...&gt; list2 = list1.subList(startIndex, endIndex);
</code></pre>

<p>This returns a view on that part of the original list, it does not copy the data.<br>
If you want a copy:</p>

<pre><code>List&lt;...&gt; list2 = new ArrayList&lt;...&gt; (list1.subList(startIndex, endIndex));
</code></pre>
","16","11880534"
"<p>You will not get an invalid state when changing arrays using multiple threads. However if a certain thread has edited a value in the array, there is no guarantee that another thread will see the changes. Similar issues occur for non-volatile variables.</p>
","5","29153404"
"<p>My spin.</p>

<pre><code>public static String join(Object[] objects, String delimiter) {
  if (objects.length == 0) {
    return """";
  }
  int capacityGuess = (objects.length * objects[0].toString().length())
      + ((objects.length - 1) * delimiter.length());
  StringBuilder ret = new StringBuilder(capacityGuess);
  ret.append(objects[0]);
  for (int i = 1; i &lt; objects.length; i++) {
    ret.append(delimiter);
    ret.append(objects[i]);
  }
  return ret.toString();
}

public static String join(Object... objects) {
  return join(objects, """");
}
</code></pre>
","2","1515437"
"<p>Try using BitSet to get the representation of the byte number...</p>
<h1>Example:</h1>
<p>independently of the signed or not....</p>
<pre><code>public static void main(String[] args) {
    byte b1 = (byte) 129;
    BitSet bits = BitSet.valueOf(new byte[]{b1});
    System.out.println(bits); //
}
</code></pre>
","1","36521411"
"<p>array operations are not threadsafe. you can either lock on a field, i would recommend to add a field e.g. named LOCK and do the</p>

<pre><code>void add(){
 syncronized(LOCK) {
  // add
 }
}

void get(int i){
 synchronized(LOCK){ 
   // return
 }
}
</code></pre>

<p>or simply use</p>

<pre><code>java.util.concurrent.*
</code></pre>
","1","29153404"
"<pre><code>/create an ArrayList object
    ArrayList arrayList = new ArrayList();

    //Add elements to Arraylist
    arrayList.add(""1"");
    arrayList.add(""2"");
    arrayList.add(""3"");
    arrayList.add(""4"");
    arrayList.add(""5"");

    /*
       To get a sub list of Java ArrayList use
       List subList(int startIndex, int endIndex) method.
       This method returns an object of type List containing elements from
       startIndex to endIndex - 1.
    */

    List lst = arrayList.subList(1,3);

    //display elements of sub list.
    System.out.println(""Sub list contains : "");
    for(int i=0; i&lt; lst.size() ; i++)
      System.out.println(lst.get(i));
</code></pre>
","0","11880534"
"<p>I used almost the same as @kmccoy, but instead of a <code>keySet()</code> I did this</p>

<pre><code>hashMap.values().toArray(new MyObject[0]);
</code></pre>
","7","1090556"
"<pre><code>int [][] arr = new int[height][width];
</code></pre>
","2","36734301"
"<p><em>As with many questions lately, Java 8 to the rescue:</em></p>

<hr>

<p>Java 8 added a new static method to <code>java.lang.String</code> which does exactly what you want:</p>

<pre><code>public static String join(CharSequence delimeter, CharSequence... elements);
</code></pre>

<p>Using it:</p>

<pre><code>String s = String.join("", "", new String[] {""Hello"", ""World"", ""!""});
</code></pre>

<p>Results in:</p>

<pre><code>""Hello, World, !""
</code></pre>
","18","1515437"
"<p>Not using built-in language features. You can easily write a method to do it, of course, but there's nothing built-in - and I suspect that it's sufficiently rarely useful that it's not in many third party utility libraries (such as Guava) either.</p>
","3","12964800"
"<p>Array takes up less space and are typically faster, ArrayList lets you add and remove elements from your array (can be useful for a lot of reasons).</p>
","1","30531000"
"<p>I don't think so, but you could use a simple for-loop:</p>

<pre><code>int foo[n];

for(int i = 0; i &lt; n; i++) foo[i] = i;
</code></pre>

<p>And if you want a method try something like this:</p>

<pre><code>public void initialize(int[] array, int start, int end) {
    int array_length = array.length;
    if (end &gt; array_length) end = array_length;

    for (int i = start; i &lt; end; i++) {
        array[i - start] = i;
    }
}

// In any other point in your code
int foo[] = new int[6];
initialize(foo, 0, 10);
</code></pre>

<p>Another way would be to make a Range class to add this functionality:</p>

<pre><code>import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

public class Range implements Iterable&lt;Integer&gt; {
    Integer array[];

    public Range(int size) {
        this(0, size - 1);
    }

    public Range(int start, int end) {
        array = new Integer[end - start];

        for (int i = start; i &lt; end; i++) {
            array[i - start] = i;
        }
    }

    public List&lt;Integer&gt; asList() {
        return Arrays.asList(array);
    }

    @Override
    public Iterator&lt;Integer&gt; iterator() {
        return Arrays.asList(array).iterator();
    }
}
</code></pre>

<p>Here is an usage example:</p>

<pre><code>Range range = new Range(4, 10);

for (int i : range) {
    System.out.println(i);
}
</code></pre>

<p>I'm sure that this code can be improved but it isn't worth it.</p>
","2","12964800"
"<p>Suppose we have a list of <code>String</code> like:</p>

<pre><code>List&lt;String&gt; strList = new ArrayList&lt;&gt;(5);
// insert up to five items to list.        
</code></pre>

<p>Then we can remove duplicate elements in multiple ways.</p>

<h2>Prior to Java 8</h2>

<pre><code>List&lt;String&gt; deDupStringList = new ArrayList&lt;&gt;(new HashSet&lt;&gt;(strList));
</code></pre>

<p><strong>Note:</strong> If we want to maintain the insertion order then we need to use <code>LinkedHashSet</code> in place of <code>HashSet</code></p>

<h2>Using Guava</h2>

<pre><code>List&lt;String&gt; deDupStringList2 = Lists.newArrayList(Sets.newHashSet(strList));
</code></pre>

<h2>Using Java 8</h2>

<pre><code>List&lt;String&gt; deDupStringList3 = strList.stream().distinct().collect(Collectors.toList());
</code></pre>

<p><strong>Note:</strong>  In case we want to collect the result in a <strong>specific list implementation</strong> e.g. <code>LinkedList</code> then we can modify the above example as:</p>

<pre><code>List&lt;String&gt; deDupStringList3 = strList.stream().distinct()
                 .collect(Collectors.toCollection(LinkedList::new));
</code></pre>

<p>We can use <code>parallelStream</code> also in the above code but it may not give expected performace benefits. Check this <a href=""https://stackoverflow.com/questions/53645037/will-parallel-stream-work-fine-with-distinct-operation"">question</a> for more.</p>
","58","203984"
"<p>Use append mode:</p>

<pre><code>FileWriter output = new FileWriter(""result.txt"", true);
PrintWriter write = new PrintWriter(new BufferedWriter(output));
</code></pre>
","0","27087037"
"<p>Array is perfect, if you have a fixed number of items. It is fast and can be accessed by index.</p>

<p>ArrayList is more flexible, the list can easily extended by using add() function. ArrayList can also be accessed by index (using get(int i)).</p>

<p>So at the end it boils down to fixed length or not.</p>
","0","30531000"
"<pre><code>int n = 10;
int[] arr = new int[n+1];
</code></pre>

<p><code>for</code> loops has flexible syntax, so you can do even this:</p>

<pre><code>for ( int i = 0; i &lt; arr.length; arr[i] = i++ );
</code></pre>

<p>P.S. <br/>
If you want less code than above, you can do this:</p>

<pre><code>int i = 0;
for ( int c : arr ) { arr[i] = i++; }
</code></pre>

<p>P.P.S. <br/>
Despite the fact that these pieces of code are laconic, for me they seems unclear, and smells bad.</p>
","1","12964800"
"<p>If you are importing or you have an array (of type string) in your code and you have to convert it into arraylist (offcourse string) then use of collections is better.
like this:</p>

<pre><code>String array1[] = getIntent().getExtras().getStringArray(""key1""); or
String array1[] = ...
then

List&lt;String&gt; allEds = new ArrayList&lt;String&gt;();
Collections.addAll(allEds, array1);
</code></pre>
","2","3746639"
"<p>Your code looks good so far.</p>

<p>I suggest you do what you are trying to achieve: you basically renumber each line.</p>

<ol>
<li>You should introduce a variable, set it to an initial number (1,
based on your example).</li>
<li>You use the new number when writing it out
to the file.</li>
<li>You increment the variable.</li>
</ol>

<p>I am intentionally not posting the exact code for you to improve. Comment if you need more help.</p>
","2","32538460"
"<p>You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array).</p>

<p><em>For primitive types:</em></p>

<pre><code>int[] myIntArray = new int[3];
int[] myIntArray = {1,2,3};
int[] myIntArray = new int[]{1,2,3};
</code></pre>

<p><em>For classes, for example String, it's the same:</em></p>

<pre><code>String[] myStringArray = new String[3];
String[] myStringArray = {""a"",""b"",""c""};
String[] myStringArray = new String[]{""a"",""b"",""c""};
</code></pre>

<p><strong>Extra Info:</strong>
<em>If you are knew to coding in Java here are some tutorials:<a href=""http://www.youtube.com/watch?v=Cfd9DOnuF9w"" rel=""nofollow"">http://www.youtube.com/watch?v=Cfd9DOnuF9w</a></em></p>

<p><strong><em>-HAPPY CODING!</em></strong></p>
","0","27402861"
"<p>In case of printing several graphics images, one per page, use the page index to iterate through these pages and print one on each page. For example, if several images are represented in the following array:</p>

<pre><code>BufferedImage[] images = new BufferedImage[10];
</code></pre>

<p>then use the print() method as shown in the following code fragment:</p>

<pre><code>public int print(Graphics graphics,
           PageFormat pageFormat, int pageIndex)
           throws PrinterException {

    if (pageIndex &lt; images.length) {
        graphics.drawImage(images[pageIndex], 100, 100, null);
        return PAGE_EXISTS;
    } else {
        return NO_SUCH_PAGE:
    }
}
</code></pre>

<p>If the document is continuous, the application must calculate how much content can fit on each page, and break the page at that point. If text document consists of many lines, then an application must calculate how many of these lines can fit entirely on a page. The Point class creates a point representing a location in (x,y)</p>

<p>To calculate the height of a single line of text, use the FontMetrics class.</p>

<pre><code>Font font = new Font(""Serif"", Font.PLAIN, 10);
FontMetrics metrics = graphics.getFontMetrics(font);
int lineHeight = metrics.getHeight();
</code></pre>

<p>The PageFormat parameter describes the printable area of the page. In particular, to find the vertical span of the page use the following code fragment:</p>

<pre><code>double pageHeight = pageFormat.getImageableHeight();
</code></pre>

<p>Use the following code fragment to calculate the number of lines that fit on a page and the number of page breaks:</p>

<pre><code>int linesPerPage = ((int)pageHeight)/lineHeight);
int numBreaks = (textLines.length-1)/linesPerPage;
int[] pageBreaks = new int[numBreaks];
for (int b=0; b &lt; numBreaks; b++) {
    pageBreaks[b] = (b+1)*linesPerPage; 
}
</code></pre>

<p>Use the print() method to calculate the printable area for the following reasons:</p>

<p>Text measurement depends on the FontRenderContext and this is implicit in the FontMetrics object returned by the printer graphics which is not available except inside the print() method.
The page format may not be disclosured until printing occurs. Since if the user selected a landscape mode in the print dialog, then this setting needs to be accounted for. The PageFormat object passed into the print() method provides this information.
The page break positions are used as represented in the following code fragment:</p>

<pre><code>/* Draw each line that is on this page.
 * Increment 'y' position by lineHeight
 * for each line.
 */
int y = 0; 
int start = (pageIndex == 0) ? 0 : pageBreaks[pageIndex-1];
int end   = (pageIndex == pageBreaks.length)
                 ? textLines.length : pageBreaks[pageIndex];
for (int line=start; line&lt;end; line++) {
    y += lineHeight;
    g.drawString(textLines[line], 0, y);
}
</code></pre>

<p>If a document contains 100 lines and only 48 lines fit on a page, then an application prints 3 pages with page breaks after 48 and 96 lines of text. The remaining 4 lines are printed on the last page. The complete code for this example is in PaginationExample.java.</p>
","1","17440349"
"<p>You have two choices:</p>

<ol>
<li>Use an array.</li>
</ol>

<blockquote>
<pre><code>public class Value {
  public String name;
  public int number;
}

...
public Value[] values = new Value[10];
....
</code></pre>
</blockquote>

<ol start=""2"">
<li>Use a map which has much more comfort, specially you can use the name as key to get a value</li>
</ol>

<blockquote>
<pre><code>....
public Map&lt;String, int&gt; valueMap = new HashMap&lt;String,int&gt;();
valueMap.put(""Sample"",10);
int value = valueMap.get(""Sample"");
...
</code></pre>
</blockquote>
","0","27402861"
"<pre><code>private static void filterSpecifiedLine(String skipLine) throws IOException {
        List&lt;String[]&gt; lines = Files.lines(Paths.get(""./Phonebook.txt""))
                .map(l -&gt; l.split(""::""))
                .filter(s -&gt; !s[0].equals(skipLine))
                .map(s -&gt; Arrays.copyOfRange(s, 1, s.length))
                .collect(Collectors.toList());
        List&lt;String&gt; generated = IntStream.range(0, lines.size())
                .mapToObj(i -&gt; (i + 1) + ""::"" + String.join(""::"", lines.get(i)))
                .collect(Collectors.toList());

        Files.write(Paths.get(""./Phonebook1.txt""), generated);
}
</code></pre>

<p>I have used <strong><em>Stream</em></strong> to come true a simplify version.</p>
","1","32538460"
"<p>Arrays and <code>ArrayList</code>s serve different, though sometimes overlapping, purposes.</p>

<p>But aside from that, the simple fact is that you don't code in a vacuum, and so you're going to use APIs that involve arrays, so learning about them isn't optional. Arrays are an absolutely fundamental structure in computer science.</p>
","4","18085279"
"<p>You can also do it this way, and preserve order:</p>

<pre><code>// delete duplicates (if any) from 'myArrayList'
myArrayList = new ArrayList&lt;String&gt;(new LinkedHashSet&lt;String&gt;(myArrayList));
</code></pre>
","29","203984"
"<p>You can use a Map data structure instead of an array. This is basically a type of Collection that has key-value pairs. Your string name can be used as the key and the value is your integer.</p>

<pre><code>Map&lt;String,Integer&gt; myMap = new HashMap&lt;String, Integer&gt;;

MyMap.put(""someone"", 6);
</code></pre>

<p>Note that using a HashMap has a speed advantage over an array during lookup. The complexity of HashMap lookup is O(log(n)) while that of an array is O(n).</p>
","0","27402861"
"<p>Check out <a href=""http://way2java.com/arrays/array-vs-arraylist/"" rel=""nofollow noreferrer"">this comparison</a>.</p>

<p>As you can see, there are important differences between the two constructs. You'll find APIs using one or the other (or both), and you have to understand the pros/cons and the functional differences between the two.</p>

<p>One particular difference is that a native array can store primitives without the inefficiencies of boxing/unboxing. That's significant when you have sizeable arrays representing data streams / data sets.</p>

<p>Note also that an <code>ArrayList</code> is <em>not</em> covariant. That is, an <code>Integer[]</code> is a <code>Number[]</code>, but an <code>ArrayList&lt;Integer&gt;</code> is not a <code>ArrayList&lt;Number&gt;</code>. See <a href=""http://www.ibm.com/developerworks/java/library/j-jtp01255/index.html"" rel=""nofollow noreferrer"">here</a> for more details.</p>
","6","18085279"
"<p>What did you expect the statement to do?</p>

<pre><code>System.out.printf(""(x,y): (%f,%f)"");
</code></pre>

<p>You never gave any values. Try actually giving some values for the <code>%f</code> markers:</p>

<pre><code>System.out.printf(""(x,y): (%f,%f)"", this.x, this.y);
</code></pre>

<p>You should read the The Java™ Tutorials: <a href=""https://docs.oracle.com/javase/tutorial/java/data/numberformat.html"" rel=""nofollow"">Formatting Numeric Print Output</a>.</p>
","2","33310553"
"<p>You can let the user input the data as a String delimited by space (or other delimiters)</p>

<p>After you receive the string of input, tokenized the data into tokens where you can store them into a data structure of your choice (array, array list..etc).</p>

<p>You may use <code>String.split()</code> when tokenizing them.</p>

<p><strong>For example:</strong></p>

<pre><code>String input = sc.nextLine();
String[] tokens = input.split("" "");
int[] data = new int[tokens.length];

for(int x=0; x&lt;tokens.length; x++)
    data[x] = Integer.parseInt(tokens[x]);

//Input: 11 22 33 44
//data[0] will be 11
//data[1] will be 22
//data[2] will be 33 and so on
</code></pre>

<p>;</p>
","1","40713234"
"<p>An <code>Object[]</code> can hold both <code>String</code> and <code>Integer</code> objects.  Here's a simple example:</p>

<pre><code>    Object[] mixed = new Object[2];
    mixed[0] = ""Hi Mum"";
    mixed[1] = Integer.valueOf(42);
    ...
    String message = (String) mixed[0];
    Integer answer = (Integer) mixed[1];
</code></pre>

<p>However, if you put use an <code>Object[]</code> like this, you will typically need to use <code>instanceof</code> and / or type casts when accessing the elements.</p>

<p>Any design that routinely involves <code>instanceof</code> and/or type casts needs to be treated with suspicion.  In most cases, there is a better (more object-oriented, more efficient, less fragile) way of achieving the same ends.</p>

<p>In your particular use-case, it sounds like what you really need is a mapping object that maps from <code>String</code> (names) to <code>Integer</code> (numbers of stocks).  And the nice thing about Java is that there are existing library classes that provide this functionality; e.g. the <code>HashMap&lt;K,V&gt;</code> class, with <code>String</code> as the key type and <code>Integer</code> as the value type.</p>

<p>Another possibility might be an array, <code>List</code> or <code>Set</code> of some custom or generic pair class.  These have different semantic properties to <code>Map</code> types.</p>
","2","27402861"
"<p>It is very important to have a proper foundation in programming fundamentals. These fundamentals include things like variable types, functions, arguments, arrays, and so on. Without a proper foundation, everything else you learn can collapse since you don't have a proper foundation. In other words, lets say you want to learn a language, you could start to learn whole phrases by memorization, but it is nice to get some words rolling off the tongue and start digesting and piecing how you can make sentences out of words instead of brute forcing it and memorizing all the sentences you need.</p>
","2","18085279"
"<p>Create a <strong>Random</strong> object with a seed and get the array random by doing:</p>

<pre><code>public static final int ARRAY_LENGTH = 20;

byte[] byteArray = new byte[ARRAY_LENGTH];
new Random(System.currentTimeMillis()).nextBytes(byteArray);
// get fisrt element
System.out.println(""Random byte: "" + byteArray[0]);
</code></pre>
","4","5683206"
"<p>Well, one good reason is that the <code>hashCode</code> based data structures (<code>HashSet</code>, <code>HashMap</code>) use an array to store the bins, and arrays are limited to <code>int</code> indices. You will gain nothing by a <code>long</code> <code>hashCode()</code> if you must map it to an <code>int</code> array index.</p>
","9","49489116"
"<p>There are two types of array.<br/> </p>

<h2>One Dimensional Array</h2>

<p>Syntax for default values:</p>

<pre><code>int[] num = new int[5];
</code></pre>

<p>Or (less preferred)</p>

<pre><code>int num[] = new int[5];
</code></pre>

<p>Syntax with values given (variable/field initialization):</p>

<pre><code>int[] num = {1,2,3,4,5};
</code></pre>

<p>Or (less preferred)</p>

<pre><code>int num[] = {1, 2, 3, 4, 5};
</code></pre>

<p>Note: For convenience  int[] num is preferable because it clearly tells that you are talking here about array. Otherwise no difference. Not at all.<br/></p>

<h2>Multidimensional array</h2>

<h3>Declaration</h3>

<pre><code>int[][] num = new int[5][2];
</code></pre>

<p>Or</p>

<pre><code>int num[][] = new int[5][2];
</code></pre>

<p>Or</p>

<pre><code>int[] num[] = new int[5][2];
</code></pre>

<h3>Initialization</h3>

<pre><code> num[0][0]=1;
 num[0][1]=2;
 num[1][0]=1;
 num[1][1]=2;
 num[2][0]=1;
 num[2][1]=2;
 num[3][0]=1;
 num[3][1]=2;
 num[4][0]=1;
 num[4][1]=2;
</code></pre>

<p>Or</p>

<pre><code> int[][] num={ {1,2}, {1,2}, {1,2}, {1,2}, {1,2} };
</code></pre>

<h3>Ragged Array (or Non-rectangular Array)</h3>

<pre><code> int[][] num = new int[5][];
 num[0] = new int[1];
 num[1] = new int[5];
 num[2] = new int[2];
 num[3] = new int[3];
</code></pre>

<p>So here we are defining columns explicitly.<br/>
<b>Another Way:</b>  </p>

<pre><code>int[][] num={ {1}, {1,2}, {1,2,3,4,5}, {1,2}, {1,2,3} };
</code></pre>

<h2>For Accessing:</h2>

<pre><code>for (int i=0; i&lt;(num.length); i++ ) {
    for (int j=0;j&lt;num[i].length;j++)
        System.out.println(num[i][j]);
}
</code></pre>

<p>Alternatively:</p>

<pre><code>for (int[] a : num) {
  for (int i : a) {
    System.out.println(i);
  }
}
</code></pre>

<p>Ragged arrays are multidimensional arrays.<br/>
For explanation see multidimensional array detail at <a href=""http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""noreferrer"">the official java tutorials</a></p>
","290","1200621"
"<p>It is important for you to learn arrays if you wish to have a better understanding of what happens ""behind the scenes"", or if you want to learn a lower level language like C or assembly languages.</p>

<p>May I ask where you are learning Java? Is this for school/college? If so, please try to get something out of working with Arrays, because they will be used in courses like Data Structures and especially if you start using a language that doesn't have an ArrayList equivalent.</p>

<p>Learn all you can about it. Understanding what's happening is rewarding.</p>
","2","18085279"
"<p>Numbering an items in the java array should start from zero. This was i think we can have access to Integer.MAX_VALUE+1 an items.</p>
","0","3767979"
"<p>Answer of JB Nizet is correct, but in case you did this to transform to a CSV like string, with Java 8 you can now do:</p>
<pre><code>Set&lt;String&gt; mySet = new HashSet&lt;&gt;(Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;));
System.out.println(String.join(&quot;, &quot;, mySet));

Output is: a, b, c
</code></pre>
<p>This allows to bypass array notation (the <code>[]</code>).</p>
","4","5474656"
"<p>There are many things you can do with arrays that you can't do with <code>ArrayList</code>s.  For example,</p>

<ol>
<li>Read multiple bytes or code-units from a file using a <code>byte[]</code> or a <code>char[]</code></li>
<li>Call a native numeric or graphics library that deals with vectors, or matrices represented as <code>float[]</code>s or <code>double[]</code>s</li>
</ol>

<p>You can use other non-primitive-array abstractions instead of <code>ArrayList</code>, but sometimes the best way to represent a contiguous region of memory divided into numeric units is using an array.</p>
","4","18085279"
"<p>Java 7 introduced <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html"" rel=""nofollow noreferrer"">ThreadLocalRandom</a> which is <strong><em>isolated to the current thread</em></strong>.</p>

<p>This is an another rendition of <a href=""https://stackoverflow.com/a/5683221/330457"">maerics's solution</a>.</p>

<pre class=""lang-java prettyprint-override""><code>final byte[] bytes = new byte[20];
ThreadLocalRandom.current().nextBytes(bytes);
</code></pre>
","8","5683206"
"<p>Unlike in C# where you have the <a href=""http://msdn.microsoft.com/en-us/library/system.array.indexof.aspx"" rel=""noreferrer"">Array.IndexOf</a> method, and JavaScript where you have the <a href=""http://www.w3schools.com/jsref/jsref_indexof_array.asp"" rel=""noreferrer"">indexOf</a> method, Java's API (the <code>Array</code> and <code>Arrays</code> classes in particular) have no such method. </p>

<p>This method indexOf (together with its complement lastIndexOf) is defined in the <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""noreferrer"">java.util.List</a> interface. Note that indexOf and lastIndexOf are not overloaded and only take an Object as a parameter.</p>

<p><strong>If your array is sorted</strong>, you are in luck because the Arrays class defines a series of overloads of the binarySearch method that will find the index of the element you are looking for with best possible performance (O(log n) instead of O(n), the latter being what you can expect from a sequential search done by indexOf). There are four considerations:</p>

<ol>
<li><p>The array must be sorted either in natural order or in the order of a Comparator that you provide as an argument, or at the very least all elements that are ""less than"" the key must come before that element in the array and all elements that are ""greater than"" the key must come after that element in the array;</p></li>
<li><p>The test you normally do with indexOf to determine if a key is in the array (verify if the return value is not -1) does not hold with binarySearch. You need to verify that the return value is not less than zero since the value returned will indicate the key is not present but the index at which it would be expected if it did exist;</p></li>
<li><p>If your array contains multiple elements that are equal to the key, what you get from binarySearch is undefined; this is different from indexOf that will return the first occurrence and lastIndexOf that will return the last occurrence.</p></li>
<li><p>An array of booleans might appear to be sorted if it first contains all falses and then all trues, but this doesn't count. There is no override of the binarySearch method that accepts an array of booleans and you'll have to do something clever there if you want O(log n) performance when detecting where the first true appears in an array, for instance using an array of Booleans and the constants Boolean.FALSE and Boolean.TRUE.</p></li>
</ol>

<p><strong>If your array is not sorted and not primitive type</strong>, you can use List's indexOf and lastIndexOf methods by invoking the <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#asList%28T...%29"" rel=""noreferrer"">asList</a> method of java.util.Arrays. This method will return an AbstractList interface wrapper around your array. It involves minimal overhead since it does not create a copy of the array. As mentioned, this method is not overloaded so this will only work on arrays of reference types.</p>

<p><strong>If your array is not sorted and the type of the array <em>is</em> primitive</strong>, you are out of luck with the Java API. Write your own for loop, or your own static utility method, which will certainly have performance advantages over the asList approach that involves some overhead of an object instantiation. In case you're concerned that writing a brute force for loop that iterates over all of the elements of the array is not an elegant solution, accept that that is exactly what the Java API is doing when you call indexOf. You can make something like this:</p>

<pre><code>public static int indexOfIntArray(int[] array, int key) {
    int returnvalue = -1;
    for (int i = 0; i &lt; array.length; ++i) {
        if (key == array[i]) {
            returnvalue = i;
            break;
        }
    }
    return returnvalue;
}
</code></pre>

<p>If you want to avoid writing your own method here, consider using one from a development framework like Guava. There you can find an implementation of <a href=""http://google.github.io/guava/releases/20.0/api/docs/com/google/common/primitives/Ints.html#indexOf-int:A-int-"" rel=""noreferrer"">indexOf</a> and <a href=""http://google.github.io/guava/releases/20.0/api/docs/com/google/common/primitives/Ints.html#lastIndexOf-int:A-int-"" rel=""noreferrer"">lastIndexOf</a>. </p>
","16","4962361"
"<p>No you cannot. <a href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""nofollow""><code>Array</code></a> index must be <code>integer</code>. </p>

<p>And if you want to pair them up, look at <a href=""https://docs.oracle.com/javase/tutorial/collections/interfaces/map.html"" rel=""nofollow""><code>Map</code></a>, where you can use String as a key and value <a href=""https://docs.oracle.com/javase/tutorial/collections/interfaces/map.html"" rel=""nofollow""><code>Map&lt;String,String&gt;.</code></a></p>

<pre><code>Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();
map.put(""ab"",""ab""); //adding key-value;

String value map.get(""ab""); //gives you ""ab""
</code></pre>
","4","32492556"
"<p><code>JList</code> provides a constructor <code>JList(Object[])</code> which you can call after unpacking your <code>ArrayList&lt;String&gt;</code> using <code>toArray()</code></p>

<pre><code>list = new JList(arr.toArray())
</code></pre>
","1","41024961"
"<p>If you want a cryptographically strong random number generator (also thread safe) without using a third party API, you can use <code>SecureRandom</code>.</p>

<p>Java 6 &amp; 7:</p>

<pre><code>SecureRandom random = new SecureRandom();
byte[] bytes = new byte[20];
random.nextBytes(bytes);
</code></pre>

<p>Java 8 (even more secure):</p>

<pre><code>byte[] bytes = new byte[20];
SecureRandom.getInstanceStrong().nextBytes(bytes);
</code></pre>
","47","5683206"
"<pre><code>String []array = { ""I"",""DO"",""NOT"",""RESIZE"" };
</code></pre>
","0","18085279"
"<p>Object[] myArray = new Object7;
Object myObject = myArray[5]; // get object at index 5 then make changes to your object</p>
","0","19345260"
"<p>Check out this answer which adds the route to the ArrayList. This way you can add all routes to an ArrayList - <a href=""https://stackoverflow.com/a/17007360/1649353"">https://stackoverflow.com/a/17007360/1649353</a></p>
","0","42545941"
"<p>Just compare the order and the array with a for-loop:</p>

<pre><code>public boolean isArrayInOrder(int[] array, int... order) {
    if(array.length == order.length) {
        for(int i = 0; i &lt; array.length; ++i) {
            if(array[i] != order[i]) return false;
        }
        return true;
    }
    return false;
}
</code></pre>
","0","34770246"
"<p>Damian Vash's first method (the one using Arrays.copyOfRange()) adds zeros to the end of the last chunk if the input is not exactly a multiple of chunksize.</p>

<p>You might want to use this instead:</p>

<pre><code>public static List&lt;byte[]&gt; divideArray(byte[] source, int chunksize) {

    List&lt;byte[]&gt; result = new ArrayList&lt;byte[]&gt;();
    int start = 0;
    while (start &lt; source.length) {
        int end = Math.min(source.length, start + chunksize);
        result.add(Arrays.copyOfRange(source, start, end));
        start += chunksize;
    }

    return result;
}
</code></pre>

<p>and in case it's useful, the same thing using ArrayList's:</p>

<pre><code>  public static List&lt;List&lt;String&gt;&gt; divideList(List&lt;String&gt; source, int chunksize) {
    List&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;List&lt;String&gt;&gt;();
    int start = 0;
    while (start &lt; source.size()) {
      int end = Math.min(source.size(), start + chunksize);
      result.add(source.subList(start, end));
      start += chunksize;
    }
    return result;
  }
</code></pre>
","13","3405195"
"<p>Create the array:</p>

<pre><code>type[] arrayName = new type[size];
</code></pre>

<p>Example:</p>

<pre><code>int[] someNumbers = new int[10]; // array with 10 slots
</code></pre>

<p>To get an element, simply use <code>arrayName[index]</code>. Arrays are <code>0-based</code>, so getting the 5th element is done by <code>someNumbers[4]</code>.</p>

<p>Let's say we have an array of Persons and you want to change a person address.</p>

<pre><code>Person personObj = arrayOfPersons[3]; // get the 4th person
personObj.setAddress(""New York"");
</code></pre>

<p>That's it! You're done!</p>

<p>Additional notes:
You will get an <code>ArrayIndexOutOfBoundsException</code> if you try to access an element outside the array(using a negative index or an index greater or equal that the array length).</p>
","0","19345260"
"<p>Use <a href=""https://en.wikipedia.org/wiki/Radix_sort"" rel=""nofollow"">Radix Sort</a>, which is O(n)</p>

<pre><code> public void radixsort(int[] input) {
  final int RADIX = 10;
  // declare and initialize bucket[]
  List&lt;Integer&gt;[] bucket = new ArrayList[RADIX];
  for (int i = 0; i &lt; bucket.length; i++) {
    bucket[i] = new ArrayList&lt;Integer&gt;();
  }

  // sort
  boolean maxLength = false;
  int tmp = -1, placement = 1;
  while (!maxLength) {
    maxLength = true;
    // split input between lists
    for (Integer i : input) {
      tmp = i / placement;
      bucket[tmp % RADIX].add(i);
      if (maxLength &amp;&amp; tmp &gt; 0) {
        maxLength = false;
      }
    }
    // empty lists into input array
    int a = 0;
    for (int b = 0; b &lt; RADIX; b++) {
      for (Integer i : bucket[b]) {
        input[a++] = i;
      }
      bucket[b].clear();
    }
    // move to next digit
    placement *= RADIX;
  }
}
</code></pre>

<p><code>code</code> <a href=""http://www.geekviewpoint.com/java/sorting/radixsort"" rel=""nofollow"">Ref</a></p>
","2","34999539"
"<p>You should use:</p>

<pre><code>List&lt;List&lt;String&gt;&gt; example = new ArrayList&lt;List&lt;String&gt;&gt;();
</code></pre>
","0","36593692"
"<pre><code>String array[] = new String {"" "", ""hi"", ""there"", "" "", ""how""};
</code></pre>

<p>use a for cicle:</p>

<pre><code>int empty
for(int i=0; i&lt;=array.length(); i++){
    if(array[i].equals("" "") || array[i].equals("""")){
        empty++;
    }
}
System.out.println(""empty values: "" + empty);
</code></pre>
","1","22083312"
"<p>This is used for your Custom Objects list </p>

<pre><code>   public List&lt;Contact&gt; removeDuplicates(List&lt;Contact&gt; list) {
    // Set set1 = new LinkedHashSet(list);
    Set set = new TreeSet(new Comparator() {

        @Override
        public int compare(Object o1, Object o2) {
            if (((Contact) o1).getId().equalsIgnoreCase(((Contact) o2).getId()) /*&amp;&amp;
                    ((Contact)o1).getName().equalsIgnoreCase(((Contact)o2).getName())*/) {
                return 0;
            }
            return 1;
        }
    });
    set.addAll(list);

    final List newList = new ArrayList(set);
    return newList;
}
</code></pre>
","1","203984"
"<p>Do you mean to add extra properties to this class?</p>

<p>I suppose you have an array </p>

<p><code>String[] data = new String[]{""a"", ""b"", ""c""}</code></p>

<p>To add extra properties, may be you can try to create a wrapper:</p>

<pre><code>class Wrapper&lt;T&gt; {

    private T origin

    public String name;
    public String desc

    public Wrapper(T data) {
        origin = data;
    }
}
</code></pre>

<p>To add extra properties:</p>

<pre><code>Map&lt;String, Wrapper&gt; extraProperties = new HashMap&lt;String, Wrapper&gt;();

Wrapper&lt;String&gt; w = new Wrapper&lt;String&gt;(data[1]);
w.name = ""a name"";
w.desc = ""description""

extraProperties.put(data[1], w);
</code></pre>

<p>To access the extra properties:</p>

<pre><code>if(extraProperties.contains(data[1])) {
    extraProperties.get(data[1]).name
    extraProperties.get(data[1]).desc
}
</code></pre>
","0","19345260"
"<p>This is a very simple one-liner.</p>

<pre><code>java.util.Collections.frequency(java.util.Arrays.asList(myArray), """");
</code></pre>
","0","22083312"
"<p>All depends on your visualization of the array. Rows and Columns are properties of <strong>visualization</strong> (probably in your imagination) of the array, not the array itself. </p>

<p><strong>It's exactly the same as asking is number ""5"" red or green?</strong></p>

<p>I could draw it red, I could draw it greed right? Color is not an integral property of a number. In the same way representing 2D array as a grid of rows and columns is not necessary for existence of this array. </p>

<p>2D array has just <strong><em>first dimention</em></strong> and <strong><em>second dimention</em></strong>, everything related to visualizing those is purely your flavour.</p>

<p>When I have char array <code>char[80][25]</code>, I may like to print it on console rotated so that I have 25 rows of 80 characters that fits the screen without scroll. </p>

<p>I'll try to provide viable <strong>example when representing 2D array as rows and columns doesn't make sense at all</strong>: Let's say I need an array of 1 000 000 000 integers. My machine has 8GB of RAM, so I have enough memory for this, but if you try executing <code>var a = new int[1000000000]</code>, you'll most likely get OutOfMemory exception. That's because of memory fragmentation - there is no consecutive block of memory of this size. Instead you you can create 2D array 10 000 x 100 000 with your values. Logically it is 1D array, so you'd like to draw and imagine it as a single sequence of values, but due to technical implementation it is 2D.</p>
","5","11641985"
"<p><strong>Update</strong>: Question was later modified to ask specifically for an implementation in Java. The algorithm and explanation in Python remain valid, but I've also added Java implementation below.</p>

<hr>

<p>Use a <a href=""https://en.wikipedia.org/wiki/Hash_table"" rel=""nofollow noreferrer"">hashmap</a> (or a set) to test for existence in <code>C</code> with time complexity <code>O(1)</code> (on average). Then all you need is to iterate over all pairs <code>(a,b) | a &lt;- A, b &lt;- B</code>, for a total time complexity of <code>O(n^2)</code>.</p>

<p>For example, in <strong>Python</strong> you could do it like this:</p>

<pre><code>c = set(C)
for a in A:
    for b in B:
        if a + b in c:
            print a, b, a + b
</code></pre>

<p>Quick test:</p>

<pre><code>&gt;&gt;&gt; A = [1,2,3]
&gt;&gt;&gt; B = [3,4,5]
&gt;&gt;&gt; C = [1,4,7]
&gt;&gt;&gt; c = set(C)
&gt;&gt;&gt; for a in A:
...     for b in B:
...         if a + b in c:
...             print a, b, a + b
... 
1 3 4
2 5 7
3 4 7
</code></pre>

<p>Or, a shorter version with a list comprehension:</p>

<pre><code>&gt;&gt;&gt; c = set(C)
&gt;&gt;&gt; [(a,b,a+b) for a in A for b in B if a+b in c]
[(1, 3, 4), (2, 5, 7), (3, 4, 7)]
</code></pre>

<hr>

<p>The <strong>Java</strong> implementation is essentially the same. The key observation is to use <code>java.util.HashSet</code> for checking if the sum <code>A[i]+B[j]</code> is present in the array <code>C</code>:</p>

<pre><code>import java.util.HashSet;

class Pairs {
    public static void main(String[] args) {
        Integer[] A = new Integer[]{1,2,3};
        Integer[] B = new Integer[]{3,4,5};
        Integer[] C = new Integer[]{1,4,7};

        HashSet&lt;Integer&gt; c = new HashSet&lt;Integer&gt;();
        for (int i = 0; i &lt; C.length; i++) {
            c.add(C[i]);
        }

        for (int i = 0; i &lt; A.length; i++) {
            for (int j = 0; j &lt; B.length; j++) {
                if (c.contains(A[i] + B[j])) {
                    System.out.format(""%d %d %d%n"", A[i], B[j], A[i]+B[j]);
                }
            }
        }
    }
}
</code></pre>
","-1","45101681"
"<p>There is a simpler problem: given two arrays and a number find all combinations from the arrays which give sum=number. It can be solved in O(n).</p>

<p>We can use its solution as part of solution for the larger one:</p>

<p>(I'm assuming that all elements are different - it simplifies things a bit)</p>

<pre><code>sort(A)
sort(B)
sort(C)
for(int indexC=0;indexC&lt;N;++indexC)
    int indexA=0
    int indexB=N-1
    while(indexA&lt;0)
        //find all combinations in A,B with sum=C[indexC]
        int sum=A[indexA]+B[indexB]
        if(sum==C[indexC])
            OutputCombination(indexA,indexB,indexC)
        if(sum&lt;C[indexC])
            ++indexA
        else if(sum&gt;C[indexC])
            --indexB
        else
            ++indexA
            --indexB
</code></pre>
","0","45101681"
"<p>That seems complicated … but still, this is how:</p>

<pre><code>char[][][][] board = new char[3][3][3][3];
</code></pre>

<p>This sounds like a Sudoku board. It'd be much, much easier if you defined a 9x9 2D <code>char</code> array, taking care of iterating over the right zones whenever you have to (simply by controlling the looping variables). Trust me, thinking in terms of a 4D array is gonna be a headache.</p>
","2","24855711"
"<p>To get ""str1, str2"" from ""str1"", ""str2"", """" :</p>

<pre><code>Stream.of(""str1"", ""str2"", """").filter(str -&gt; !str.isEmpty()).collect(Collectors.joining("", "")); 
</code></pre>

<p>Also you can add extra null-check</p>
","0","1515437"
"<p>You are not checking if the ""computer"" won, if the computer didnt won, and player either, then you can turn the tieGame flag true</p>
","0","37199056"
"<p>Using Java 8 Streams:</p>

<p>List of List</p>

<pre><code>List&lt;List&lt;String&gt;&gt; listOfList = Stream.of(list1, list2, list3).collect(Collectors.toList());
</code></pre>

<p>List of Strings</p>

<pre><code>List&lt;String&gt; list = Stream.of(list1, list2, list3).flatMap(Collection::stream).collect(Collectors.toList());
</code></pre>

<p>Using Java 9 List.of static factory method (Warning: this list is immutable and disallows null)</p>

<pre><code>List&lt;List&lt;String&gt;&gt; = List.of​(list1, list2, list3);
</code></pre>

<p>Where <code>list1, list2, list3</code> are of type <code>List&lt;String&gt;</code></p>
","3","8625247"
"<p>Google the items below and apply them on your code.</p>

<ul>
<li>Java String lowercase</li>
<li>Java String remove punctuations</li>
</ul>
","-2","36843289"
"<p>The problem is this expression in the if statement:</p>

<pre><code>GameBoard[0][0] == player &amp;&amp; GameBoard[0][1] == player &amp;&amp; GameBoard[0][2] == player &amp;&amp;
                    GameBoard[1][0] == player &amp;&amp; GameBoard[1][1] == player &amp;&amp; GameBoard[1][2] == player &amp;&amp;
                    GameBoard[2][0] == player &amp;&amp; GameBoard[2][1] == player &amp;&amp; GameBoard[2][2] == player
</code></pre>

<p>You're checking to see if the player is in every board position.</p>

<p>You want to determine that there wasn't a winner.  That means checking that none of the the rows, columns and diagonals have the same player.</p>
","1","37199056"
"<p>public static char[] normalisieren(char[] text) throws IOException {</p>

<pre><code>    BufferedReader keyboard = new BufferedReader(new 
</code></pre>

<p>FileReader(""c:/readIt.txt""));</p>

<pre><code>    String texte;

     ArrayList&lt;String&gt; reText = new ArrayList&lt;String&gt;();

        while((texte = keyboard.readLine()) != null){
            reText.add(texte);
        }

        String[] stringArr = reText.toArray(new String[0]);
        for(int i = 0; i &lt; stringArr.length; i++){
      //  System.out.println(stringArr[i]);
        String str = stringArr[i].toLowerCase();
        System.out.println(str);
        }
        return text;
}

public static void main(String[] args) throws IOException {
    normalisieren(null);
}
</code></pre>
","-1","36843289"
"<blockquote>
  <p>how can I assign a name and description for element 1?</p>
</blockquote>

<p>That depends on your class, but here's a (bad) example:</p>

<pre><code>YourClass[] array = .... ;           // wherever it comes from
array[1].name = ""World"";             // if name is a member of your class
array[1].setDescription(""whatever""); // if there is a setter for description
</code></pre>

<p>Note that element 1 is the second element of the array as indeces start with 0.</p>
","0","19345260"
"<p>For example your <code>object</code> here is of a <code>class</code> type <code>Car</code>. And your <code>Car object</code> has a method called <code>setNumberPlate(String x)</code> which is something like : </p>

<pre><code>void setNumberPlate (String str)
{
   //numberPlate is a String data member of your Car class
   numberPlate = str;
}
</code></pre>

<p>The reason you need to have a method is because its a good practice to keep the data members of your <code>class</code> <code>private</code>. So, for example, here's the class : </p>

<pre><code>Class Car
{
   private String numberPlate;

   public void setNumberPlate(String str)
   {
      numberPlate = str;
   }

}
</code></pre>

<p>Then you can access this method in another class.
If you store your objects in an <code>array</code>, then this is what you do.</p>

<p><code>Car[] arr = new Car[10];</code></p>

<p><code>arr[0].setNumberPlate(""UIA9490"");</code></p>
","0","19345260"
"<h2>Edit: Andrey's answer has been updated so the following no longer applies.</h2>
<p>Andrey's answer (the highest voted at the time of writing) is slightly
incorrect. I would have added this as comment but I am not
reputable enough.</p>
<p>In Andrey's answer:</p>
<pre><code>char[] chars = {'c', 'h', 'a', 'r', 's'}
byte[] bytes = Charset.forName(&quot;UTF-8&quot;).encode(CharBuffer.wrap(chars)).array();
</code></pre>
<p>the call to array() may not return the desired value, for example:</p>
<pre><code>char[] c = &quot;aaaaaaaaaa&quot;.toCharArray();
System.out.println(Arrays.toString(Charset.forName(&quot;UTF-8&quot;).encode(CharBuffer.wrap(c)).array()));
</code></pre>
<p>output:</p>
<pre><code>[97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 0]
</code></pre>
<p>As can be seen a zero byte has been added. To avoid this use the following:</p>
<pre><code>char[] c = &quot;aaaaaaaaaa&quot;.toCharArray();
ByteBuffer bb = Charset.forName(&quot;UTF-8&quot;).encode(CharBuffer.wrap(c));
byte[] b = new byte[bb.remaining()];
bb.get(b);
System.out.println(Arrays.toString(b));
</code></pre>
<p>output:</p>
<pre><code>[97, 97, 97, 97, 97, 97, 97, 97, 97, 97]
</code></pre>
<p>As the answer also alluded to using passwords it might be worth
blanking out the array that backs the ByteBuffer (accessed via the
array() function):</p>
<pre><code>ByteBuffer bb = Charset.forName(&quot;UTF-8&quot;).encode(CharBuffer.wrap(c));
byte[] b = new byte[bb.remaining()];
bb.get(b);
blankOutByteArray(bb.array());
System.out.println(Arrays.toString(b));
</code></pre>
","19","5513144"
"<p>Create Array Class:</p>

<pre><code>public class 2DChar {

    private char[][] elem = new char[3][3];

    //getters, setters...     

}
</code></pre>

<p>Create Array of Array elements:</p>

<pre><code>2DChar[][] 2dCharArray = new 2DChar[3][3];
</code></pre>

<p>Initialise it:</p>

<pre><code>for(int i = 0; i &lt; 2dCharArray.lenght(); i++) {
   for(int j = 0; j &lt; 2dCharArray[i].lenght(); j++) {
      2dCharArray[i][j] = new 2DChar();
      //set value, etc...
   }
}
</code></pre>
","1","24855711"
"<p>Assuming you're ultimately just trying to get a list of words that are in both files:</p>

<pre><code>Scanner fileReader = new Scanner(file);
Set&lt;String&gt; words = new HashSet&lt;&gt;();

while (fileReader.hasNext()) {
  String s = fileReader.next();
  words.add(s);
}
fileReader.close();

Scanner otherFileReader = new Scanner(otherFile);
List&lt;String&gt; wordsInBothFiles = new ArrayList&lt;&gt;();

while (otherFileReader.hasNext()) {
  String s = otherFileReader.next();
  if (words.contains(s)) {
    wordsInBothFiles.add(s);
  }
}
otherFileReader.close();

// Do whatever it is you have to do with the shared words, like printing them:
// for (String s : wordsInBothFiles) {
//   System.out.println(s);
// }
</code></pre>
","0","33325063"
"<p>Say like this:</p>

<pre><code>ImageIcon[][] arr = new ImageIcon[10][5];
</code></pre>

<p>Note that after this line, the array elements will be uninitialized (they will be all equal to null).</p>

<p>If you want to initialize them, you need to loop through your array and call some of the <code>ImageIcon</code> constructors e.g.</p>

<pre><code>arr[i][j] = new ImageIcon();
</code></pre>
","1","20928381"
"<p>This could also work:</p>

<pre><code>Object[][] array = new Object[3][3];
char[][] subArray = new char[][] {{'a','b','c'},
                                  {'d','e','f'},
                                  {'g','h','i'}};
array[0][0] = subArray;
// initialize remaining arrays here
</code></pre>
","0","24855711"
"<p>If you check the <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html#nextLine--"" rel=""nofollow"">documentation</a> it will usually explain why a method throws an exception. In this case ""no line was found"" means you've hit the end of your file. There are two possible ways this error could come about:</p>

<pre><code>String nextLine = scanner.nextLine(); //problem 1: reads a file with no lines
while (scanner.hasNextLine()) {
   linearSearch(words,nextLine);
   System.out.println(nextLine);
} 
scanner.nextLine(); //problem 2: reads after there is not next line
</code></pre>

<p>Since you loop appears to be infinite I'd wager you're getting the exception from the first line and can fix it by adding the following check before <code>String nextLine = scanner.nextLine();</code>:</p>

<pre><code>if(!scanner.hasNextLine()) {
    System.out.println(""empty file: ""+filePath)
    return; //or break or otherwise terminate
}
</code></pre>

<p>Beyond that you may still have some other issues but hopefully this resolves your present problem.</p>
","0","33325063"
"<p>you can use nested loop in follow :</p>

<pre><code>ArrayList&lt;Class1&gt; l1 = new ArrayList&lt;Class1&gt;();
ArrayList&lt;Class1&gt; l2 = new ArrayList&lt;Class1&gt;();

        Iterator iterator1 = l1.iterator();
        boolean repeated = false;

        while (iterator1.hasNext())
        {
            Class1 c1 = (Class1) iterator1.next();
            for (Class1 _c: l2) {
                if(_c.getId() == c1.getId())
                    repeated = true;
            }
            if(!repeated)
                l2.add(c1);
        }
</code></pre>
","1","203984"
"<p>Pass the arraylist in constructor of another class. </p>
","2","21395722"
"<p>In case you're using Functional Java library and for some reason can't use Streams from Java 8 (which might be the case when using Android + Retrolambda plugin), here is a functional solution for you:</p>

<pre><code>String joinWithSeparator(List&lt;String&gt; items, String separator) {
    return items
            .bind(id -&gt; list(separator, id))
            .drop(1)
            .foldLeft(
                    (result, item) -&gt; result + item,
                    """"
            );
}
</code></pre>

<p>Note that it's not the most efficient approach, but it does work good for small lists.</p>
","0","1515437"
"<p>Well, the fastest way might be create an auxiliar object that is composed by boths Integers and array letting you to use boths by equal</p>
","0","33484725"
"<p>Change <code>GameBoard[0][0] == player</code> to <code>GameBoard[0][0] != 0</code> for all 9 conditions.</p>
","0","37199056"
"<p>Using the hashCode is to have N buckets where the hashCode % N determines the bucket of elements, hopefully being 1 (no conflicting hashCodes).</p>

<p>For N, for the hash code, an int is entirely sufficient; indeed one needs to have most variety in the lower bits; having a long without using the higher bits (when N would be a power of 2), would be counter productive.</p>

<p>Speed of course is a requirement too: int being slightly better on the final CPU.</p>
","3","49489116"
"<p>You could have googled once before you posted your question here, anyway check this <a href=""http://candidjava.com/java-example-program-for-delete-duplicate-element-in-an-array/"" rel=""nofollow noreferrer"">link</a> out.</p>

<p>A part of an array cannot be deleted. You have two options, either you can shift elements to the left or create a new array without the duplicate elements and delete the old array.</p>

<p>This might solve your query.</p>
","-2","48123844"
"<p>A Java 8 solution could look something like this:</p>

<pre><code>import java.util.stream.Stream;

public class ArrayConverter {

public static String[] flatten(String[][] array) {
    // Create a stream of the given array
    return Stream.of(array)
            // Map each of its elements to a stream (thus creating a
            // one-dim-array inside the stream, so to say)
            .flatMap(Stream::of)
            // Retrieve the stream as array, explicitly calling String to
            // keep the type
            .toArray(size -&gt; new String[size]);
}

}
</code></pre>

<p>I consciously left out generic types in this example since it makes the Array Initialization somewhat confusing. Let me know if you need it tho.</p>

<p>Notably; if you want to use this conversion for Arrays of primitive types you should use the corresponding flat Methods of the Stream Class.
E.g. if you're using int-Arrays use:</p>

<pre><code>Stream.flatMapToInt(...)
</code></pre>

<p>to retrieve an <code>IntStream</code> with actual primitive int-Values thus dodging autoboxing into <code>Integer</code> Objects.</p>

<p><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-"" rel=""nofollow noreferrer"">JavaDoc of Stream for reference</a></p>
","0","663632"
"<p>You have to create the target array first, and provide it as input for the <code>toArray</code> method:</p>

<pre><code>list.toArray(Array.ofDim[POJO](list.size))
</code></pre>

<p>This API shifts all the problems with array instantiation from the <code>toArray</code> method to you, so it is your responsibility to make sure that <code>POJO</code> is either something concrete, or to provide a <code>ClassTag</code>.</p>

<hr>

<p>You could also do the conversion in two steps, first using <code>asScala</code> from <a href=""https://www.scala-lang.org/api/2.12.3/scala/collection/JavaConverters$.html"" rel=""noreferrer""><code>JavaConverters</code></a>:</p>

<pre><code>import scala.collection.JavaConverters._
</code></pre>

<p>and then invoking <code>.toArray</code> from the Scala API (unlike Java's API, it preserves the type):</p>

<pre><code>list.asScala.toArray
</code></pre>
","5","49832401"
"<p>Pass a reference of the ArrayList from one class to another. This can be done through a method parameter such as a setter method or a constructor parameter.</p>

<p>e.g.,</p>

<p>Class1.java</p>

<pre><code>public Class1 {
  private ArrayList&lt;String&gt; myArrayList = new ArrayList&lt;String&gt;();
  private Class2 class2 = new Class2();

  public Class1() {
    myArrayList.add(""foo"");
    myArrayList.add(""bar"");
    class2.setMyArrayList(myArrayList);
}
</code></pre>

<p>Class2.java</p>

<pre><code>public Class2 {
  private ArrayList&lt;String&gt; myArrayList;

  public void setMyArrayList(ArrayList&lt;String&gt; myArrayList) {
    this.myArrayList = myArrayList;
  }
}
</code></pre>
","2","21395722"
"<p>Both int (Integer wrapper) and array's common base class is Object. So create <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html"" rel=""nofollow"">ArrayList</a> using Object type. </p>

<pre><code>ArrayList&lt;Object&gt; list= new ArrayList&lt;Object&gt;();
</code></pre>

<p>But this is <strong>not the right way</strong> to solve this problem and there is no use of Generics here to make run-time safety. So, re-design your program and allocate each type in seperate list or use any other appropriate <a href=""https://docs.oracle.com/javase/tutorial/collections/intro/"" rel=""nofollow"">Collection</a> type.</p>
","3","33484725"
"<pre><code>   /* program below takes an string from user, splits into character and display as array of characters. */  

     package com.demo.mum;

        import java.io.BufferedReader;
        import java.io.IOException;
        import java.io.InputStreamReader;

        /**
         * @author cyruses
         * 
         */

        public class CharacterArray {

            public static void main(String args[]) throws IOException {
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                System.out.println(""Enter the string:"");
                String tmp = br.readLine();
                int strLen = tmp.length();
                char c[] = new char[strLen];
                for (int i = 0; i &lt; c.length; i++) {
                    c[i] = tmp.charAt(i);
                }
                System.out.println(""Displaying character Array"");
                for (int i = 0; i &lt; c.length; i++) {
                    System.out.println(c[i]);
                }
        }
</code></pre>
","0","13878437"
"<p>If you want to have only unique records you can use HashSet, however as you mentioned you want to remove all elements which are duplicates, you can use this simplest piece of code to do it, what you will need to do is create a new list which will only contain uniques and remove duplicates..take a look</p>

<pre><code>List cleanList = new ArrayList&lt;Integer&gt;();
for(int n=0;n&lt;list.size();n++){

  if(!cleanList.contains(list.get(n))){
    cleanList.add(list.get(n));
  }else{
    cleanList.remove(list.get(n));
  }
}
</code></pre>

<p>The result in cleanList will be 3, 5. See if you can use this or get ideas from the above script</p>
","-1","48123844"
"<p>You could make a method:</p>

<pre><code>public byte[] toBytes(char[] data) {
byte[] toRet = new byte[data.length];
for(int i = 0; i &lt; toRet.length; i++) {
toRet[i] = (byte) data[i];
}
return toRet;
}
</code></pre>

<p>Hope this helps</p>
","-5","5513144"
"<p>Use a class which has an <code>int</code> and an array as its instance variables. Then create an <code>ArrayList</code> like</p>

<pre><code>import java.util.ArrayList;

public class Hello {
    public static void main(String[]args) {
        ArrayList&lt;Intarray&gt; myArrayList = new ArrayList&lt;Intarray&gt;();

        int[] arr = {3,4,5};

        myArrayList.add(new Intarray(2,arr));
    }
}

class Intarray {
    private int numbers;
    private int[] myArray;

    public Intarray(int numbers, int[] myArray){
        this.numbers = numbers;
        this.myArray = myArray;
    }
}
</code></pre>
","0","33484725"
"<p>First Step you need to create a list instance through Arrays.asList();</p>

<pre><code>String[] args = new String[]{""one"",""two"",""three""};
List&lt;String&gt; list = Arrays.asList(args);//it converts to immutable list
</code></pre>

<p>Then you need to pass 'list' instance to <code>new ArrayList();</code></p>

<pre><code>List&lt;String&gt; newList=new ArrayList&lt;&gt;(list);
</code></pre>
","7","6026813"
"<p>May this can help you:</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;

public class RemoveDuplicateElement {

    public static void main(String[] args) {
        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(Arrays.asList(1,2,1,3,5));
        ArrayList&lt;Integer&gt; duplicateElementsRemovedList = new ArrayList&lt;Integer&gt;();
        for (Integer elementToSearch :list) {
            int found=0;
            for (Integer element :list) {
                if(elementToSearch.equals(element)) {
                    found++;
                }
            }
            if(found==1)
            {
                duplicateElementsRemovedList.add(elementToSearch);
            }
        }
        for (Integer element :duplicateElementsRemovedList) {
            System.out.println(element);
        }

    }

}
</code></pre>
","0","48123844"
"<p>With <a href=""http://jdk.java.net/11/"" rel=""nofollow noreferrer"">JDK/11</a>, you can make use of the <code>writeBytes(byte b[])</code> API which eventually calls the  <code>write(b, 0, b.length)</code> as suggested in the <a href=""https://stackoverflow.com/a/18575536/1746118"">answer by Josh</a>.</p>

<pre><code>/**
 * Writes the complete contents of the specified byte array
 * to this {@code ByteArrayOutputStream}.
 *
 * @apiNote
 * This method is equivalent to {@link #write(byte[],int,int)
 * write(b, 0, b.length)}.
 *
 * @param   b     the data.
 * @throws  NullPointerException if {@code b} is {@code null}.
 * @since   11
 */
public void writeBytes(byte b[]) {
    write(b, 0, b.length);
}
</code></pre>

<p>The sample code would simply transform into --</p>

<pre><code>byte[] bytes = new byte[100];
ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);
baos.writeBytes(bytes);
</code></pre>
","0","18575480"
"<p>I use micro-util class for getting last (and first) element of list:</p>

<pre><code>public final class Lists {

    private Lists() {
    }

    public static &lt;T&gt; T getFirst(List&lt;T&gt; list) {
        return list != null &amp;&amp; !list.isEmpty() ? list.get(0) : null;
    }

    public static &lt;T&gt; T getLast(List&lt;T&gt; list) {
        return list != null &amp;&amp; !list.isEmpty() ? list.get(list.size() - 1) : null;
    }
}
</code></pre>

<hr>

<p>Slightly more flexible:</p>

<pre><code>import java.util.List;

/**
 * Convenience class that provides a clearer API for obtaining list elements.
 */
public final class Lists {

  private Lists() {
  }

  /**
   * Returns the first item in the given list, or null if not found.
   *
   * @param &lt;T&gt; The generic list type.
   * @param list The list that may have a first item.
   *
   * @return null if the list is null or there is no first item.
   */
  public static &lt;T&gt; T getFirst( final List&lt;T&gt; list ) {
    return getFirst( list, null );
  }

  /**
   * Returns the last item in the given list, or null if not found.
   *
   * @param &lt;T&gt; The generic list type.
   * @param list The list that may have a last item.
   *
   * @return null if the list is null or there is no last item.
   */
  public static &lt;T&gt; T getLast( final List&lt;T&gt; list ) {
    return getLast( list, null );
  }

  /**
   * Returns the first item in the given list, or t if not found.
   *
   * @param &lt;T&gt; The generic list type.
   * @param list The list that may have a first item.
   * @param t The default return value.
   *
   * @return null if the list is null or there is no first item.
   */
  public static &lt;T&gt; T getFirst( final List&lt;T&gt; list, final T t ) {
    return isEmpty( list ) ? t : list.get( 0 );
  }

  /**
   * Returns the last item in the given list, or t if not found.
   *
   * @param &lt;T&gt; The generic list type.
   * @param list The list that may have a last item.
   * @param t The default return value.
   *
   * @return null if the list is null or there is no last item.
   */
  public static &lt;T&gt; T getLast( final List&lt;T&gt; list, final T t ) {
    return isEmpty( list ) ? t : list.get( list.size() - 1 );
  }

  /**
   * Returns true if the given list is null or empty.
   *
   * @param &lt;T&gt; The generic list type.
   * @param list The list that has a last item.
   *
   * @return true The list is empty.
   */
  public static &lt;T&gt; boolean isEmpty( final List&lt;T&gt; list ) {
    return list == null || list.isEmpty();
  }
}
</code></pre>
","29","687833"
"<pre><code>@SuppressWarnings(""unchecked"")
    public static &lt;E,T&gt; E[] hashMapKeysToArray(HashMap&lt;E,T&gt; map)
    {
        int s;
        if(map == null || (s = map.size())&lt;1)
            return null;

        E[] temp;
        E typeHelper;
        try
        {
            Iterator&lt;Entry&lt;E, T&gt;&gt; iterator = map.entrySet().iterator();
            Entry&lt;E, T&gt; iK = iterator.next();
            typeHelper = iK.getKey();

            Object o = Array.newInstance(typeHelper.getClass(), s);
            temp = (E[]) o;

            int index = 0;
            for (Map.Entry&lt;E,T&gt; mapEntry : map.entrySet())
            {
                temp[index++] = mapEntry.getKey();
            }
        }
        catch (Exception e)
        {
            return null;
        }
        return temp;
    }
//--------------------------------------------------------
    @SuppressWarnings(""unchecked"")
    public static &lt;E,T&gt; T[] hashMapValuesToArray(HashMap&lt;E,T&gt; map)
    {
        int s;
        if(map == null || (s = map.size())&lt;1)
            return null;

        T[] temp;
        T typeHelper;
        try
        {
            Iterator&lt;Entry&lt;E, T&gt;&gt; iterator = map.entrySet().iterator();
            Entry&lt;E, T&gt; iK = iterator.next();
            typeHelper = iK.getValue();

            Object o = Array.newInstance(typeHelper.getClass(), s);
            temp = (T[]) o;

            int index = 0;
            for (Map.Entry&lt;E,T&gt; mapEntry : map.entrySet())
            {
                temp[index++] = mapEntry.getValue();
            }
        }
        catch (Exception e)
        {return null;}

        return temp;
    }
</code></pre>
","0","1090556"
"<p>Create the array list at the Generalization level for all the objects you need in the List. In this case,i.e for int and array, it is java.lang.Object.</p>

<p>Here's a small test I ran:</p>

<pre><code>public static void main(String[] args) {
    List&lt;Object&gt; both = new ArrayList&lt;Object&gt;();
    both.add(1);
    both.add(args);
    System.out.println(both);
}
</code></pre>

<p>Produces:
[1, [Ljava.lang.String;@1db9742]</p>
","0","33484725"
"<p>You should read the line of from the file as a String, split that and convert to double. Try this:</p>

<pre><code>    try {
        Scanner scan = new Scanner(new File(""path/to/file""));

        String str = scan.nextLine();

        String[] split = str.split(""\\s+"");

        // remove first element
        String[] x = new String[split.length-1];
        for (int i = 0; i &lt; x.length; i++) {
            x[i] = split[i+1];
        }

        double[] numbers = new double[x.length];
        for (int i = 0; i &lt; x.length; i++) {
            numbers[i] = Double.parseDouble(x[i]);
        }


    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
</code></pre>

<p>I also added a bit to remove the first element since is not a <code>double</code>. You could condense the two for-loops together, avoiding having a separate x-array. This can be done as follows:</p>

<pre><code>        String[] split = str.split(""\\s+"");

        // create double array while ignoring the first element 
        double[] numbers = new double[split.length-1];
        for (int i = 0; i &lt; numbers .length; i++) {
            numbers[i] = Double.parseDouble(split[i+1]);
        }
</code></pre>
","1","48859793"
"<p><em>Check this simple code</em></p>

<pre><code>import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JFrame;


public class FirstFrame extends JFrame{

    static JComboBox&lt;ArrayList&gt; mycombo;

    FirstFrame()
    {
        this.setSize(600,500);
        this.setTitle(""My combo"");
        this.setLayout(null);

        ArrayList&lt;String&gt; names=new ArrayList&lt;String&gt;();   
        names.add(""jessy"");
        names.add(""albert"");
        names.add(""grace"");
        mycombo=new JComboBox(names.toArray());
        mycombo.setBounds(60,32,200,50);
        this.add(mycombo);
        this.setVisible(true); // window visible
    }   

    public static void main(String[] args) {

        FirstFrame frame=new FirstFrame();  

    }

}
</code></pre>
","2","1291704"
"<pre><code>import java.util.Arrays;

public class Main
{
    public static void main(String atrgs[])
    {
        int[] array = {1,2,3,4,2,4,1,1,2,3,4,5,1,2,3,4,5,6,7,4,3,2,1};
        int[] result = biggestIncreasingSeq(array);
        System.out.println(Arrays.toString(result));
    }

    public static int[] biggestIncreasingSeq(int[] array)
    {
        int bestStart = 0;
        int bestEnd = 0;

        int start = 0;
        int end = 0;

        for (int i = 1; i &lt; array.length; ++i)
        {
            // Check if this next element is no longer increasing
            if (array[i] &lt;= array[i - 1])
            {
                // No longer increasing.

                // Update the largest found array, if applicable
                if (end - start &gt; bestEnd - bestStart)
                {
                    // This was a longer sequence
                    bestEnd = end;
                    bestStart = start;
                }

                // Reset for the next sequence
                start = i;
                end = i;
            }
            else
            {
                // Still increasing, update the end
                end = i;
            }
        }

        // Save the sequence to a new array
        int[] result = new int[bestEnd - bestStart + 1];
        for (int i = bestStart; i &lt;= bestEnd; ++i)
        {
            result[i - bestStart] = array[i];
        }

        return result;
    }
}
</code></pre>
","-1","43868588"
"<p>Resizing the array is a relatively expensive operation. It wants to try and make sure that if the method gets called with <code>ensureCapacity(11)</code>, <code>ensureCapacity(12)</code>, <code>ensureCapacity(13)</code>, ... it should not have to resize the array every time. So it resizes by a reasonable chunk (increase by 50%) instead of the minimum specified.</p>
","6","26925556"
"<h2>If you are using model type List&lt; T>/ArrayList&lt; T> . Hope,it's help you.</h2>

<p><strong>Here is my code without using any other data structure like set or hashmap</strong></p>

<pre><code>for (int i = 0; i &lt; Models.size(); i++){
for (int j = i + 1; j &lt; Models.size(); j++) {       
 if (Models.get(i).getName().equals(Models.get(j).getName())) {    
 Models.remove(j);
   j--;
  }
 }
}
</code></pre>
","2","203984"
"<p>You can find the solution here</p>

<p>Longest Increasing Subsequence</p>

<p><a href=""http://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/"" rel=""nofollow noreferrer"">http://www.geeksforgeeks.org/dynamic-programming-set-3-longest-increasing-subsequence/</a></p>
","0","43868588"
"<p>Time Complexity : O(n) : Without Set</p>

<pre><code>private static void removeDup(ArrayList&lt;String&gt; listWithDuplicateElements) {
    System.out.println("" Original Duplicate List :"" + listWithDuplicateElements);
    List&lt;String&gt; listWithoutDuplicateElements = new ArrayList&lt;&gt;(listWithDuplicateElements.size());

    listWithDuplicateElements.stream().forEach(str -&gt; {
        if (listWithoutDuplicateElements.indexOf(str) == -1) {
            listWithoutDuplicateElements.add(str);
        }
    });     

    System.out.println("" Without Duplicate List :"" + listWithoutDuplicateElements);
}
</code></pre>
","0","203984"
"<p>By combining existing answers (<a href=""https://stackoverflow.com/a/26347782/3764804"">this one</a> and <a href=""https://stackoverflow.com/a/29461313/3764804"">this one</a>) the proper type safe way to add an <code>ArrayList</code> to a <code>JComboBox</code> is the following:</p>

<pre><code>private DefaultComboBoxModel&lt;YourClass&gt; getComboBoxModel(List&lt;YourClass&gt; yourClassList)
{
    YourClass[] comboBoxModel = yourClassList.toArray(new YourClass[0]);
    return new DefaultComboBoxModel&lt;&gt;(comboBoxModel);
}
</code></pre>

<p>In your <code>GUI</code> code you set the entire list into your <code>JComboBox</code> as follows:</p>

<pre><code>DefaultComboBoxModel&lt;YourClass&gt; comboBoxModel = getComboBoxModel(yourClassList);
comboBox.setModel(comboBoxModel);
</code></pre>
","1","1291704"
"<p>First replace non-letter characters with blank space, then convert String to char array:</p>

<pre><code>char[] onlyLetters = ""regex"".replaceAll(""[^A-Za-z]+"", """").toCharArray(); 
</code></pre>
","0","60315128"
"<p>As you said in your comment below your question, what you really want, is to get the individual characters of that given string, which can be achieved by the <code>toCharArray()</code> method in the <code>String</code> class.</p>

<pre class=""lang-java prettyprint-override""><code>String s = ""ABCDEfghi1234"";
char[] chars = s.toCharArray();
</code></pre>

<p>If you also need to limit the resulting chars to a defined set of characters, you have to remove all others from the string first, which can be done with a simple regex-replace.</p>

<pre class=""lang-java prettyprint-override""><code>String s = ""ABCDEfghi1234_.,-DSsf"";
s = s.replaceAll(""[^A-Za-z]"", """");
char[] chars = s.toCharArray();
</code></pre>

<p>The <code>split</code> method you used is normally used to split strings at defined positions, e.g. if you want to split a sentence, separated by spaces.</p>

<pre class=""lang-java prettyprint-override""><code>String sentence = ""The quick brown fox jumps over the lazy dog"";
String[] words = sentence.split(""\\s"");
// words now contains the extracted words of the sentence
// words[0] == ""The""
// words[1] == ""quick""
// ...
</code></pre>
","0","60315128"
"<pre><code>**Simple solution**
public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int size;
    System.out.println(""Enter the number of size of array"");
    size = sc.nextInt();
    int[] a = new int[size];
    System.out.println(""Enter the array element"");
    //For reading the element
    for(int i=0;i&lt;size;i++) {
        a[i] = sc.nextInt();
    }
    //For print the array element
    for(int i : a) {
        System.out.print(i+"" ,"");
    }
}
</code></pre>
","3","2795350"
"<p>The error is in the main code/structure of the function. Your function needs to return two variables, finalwinner and tie game. Right now your function stops at the first return statement, and sets that equal to finalwinner in the main.</p>

<p>Try something like this:</p>

<pre><code>public static boolean[] CheckForWinner(int player)
        {
            //Row and Column Check
            if (GameBoard[0][0] == player &amp;&amp; GameBoard[0][1] == player &amp;&amp; GameBoard[0][2] == player ||
                GameBoard[1][0] == player &amp;&amp; GameBoard[1][1] == player &amp;&amp; GameBoard[1][2] == player ||
                GameBoard[2][0] == player &amp;&amp; GameBoard[2][1] == player &amp;&amp; GameBoard[2][2] == player ||
                GameBoard[0][0] == player &amp;&amp; GameBoard[1][0] == player &amp;&amp; GameBoard[2][0] == player ||
                GameBoard[0][1] == player &amp;&amp; GameBoard[1][1] == player &amp;&amp; GameBoard[2][1] == player ||
                GameBoard[0][2] == player &amp;&amp; GameBoard[1][2] == player &amp;&amp; GameBoard[2][2] == player)
                {
                    boolean finalwinner=true;
                }

            //diagonal checks
            if (GameBoard[0][0]==player &amp;&amp; GameBoard[1][1]==player &amp;&amp; GameBoard[2][2]==player)
            {
                boolean finalwinner=true;
            }

            if (GameBoard[2][0]==player &amp;&amp; GameBoard[1][1]==player &amp;&amp; GameBoard[0][2]==player)
            {
                boolean finalwinner=true;
            }

            //Tie Game Check
            if (GameBoard[0][0] == player &amp;&amp; GameBoard[0][1] == player &amp;&amp; GameBoard[0][2] == player &amp;&amp;
                GameBoard[1][0] == player &amp;&amp; GameBoard[1][1] == player &amp;&amp; GameBoard[1][2] == player &amp;&amp;
                GameBoard[2][0] == player &amp;&amp; GameBoard[2][1] == player &amp;&amp; GameBoard[2][2] == player)
                {
                boolean tieGame=true;
            }
            return new boolean [] {finalwinner, tiegame};
        }

public static void main (String[] args)
                {
                System.out.println(""Tic Tac Toe Game"");
                System.out.println(""Player 1 is 1, Computer is 2"");
            Draw();
            currentplayer=1;
            while (winner!= true)
            {
                if(currentplayer==1)
                    {
                        System.out.println(""Your Turn"");
                        Player1Turn(currentplayer);
                    }
                else
                    ComputerTurn(currentplayer);

                boolean result[] = CheckForWinner(currentplayer);

                if(result[0]==true &amp;&amp; result[1]==false)
                {
                    System.out.println(""Winner is Player"" +currentplayer+ ""Congrats Champion!"");
                    System.out.println(""Beginning New Game! Press Cancel then Enter to Exit"");
                    Reset();
                }

                if(result[1]==true)
                {
                    System.out.println(""It's a Tie! Play Again."");
                    System.out.println(""Beginning New Game! Press Cancel then Enter to Exit"");
                    Reset();
                }

                if(currentplayer==1)
                    currentplayer=2;
                else if(currentplayer==2)
                    currentplayer=1;
            }

            }
</code></pre>
","0","37199056"
"<p>As @AbtPst suggested, the most suitable solution would be to have a list of lists. This can be done in many different ways. Personally, I'd create a class with two constructors.</p>

<pre><code>class NumericElement
{
    private ArrayList&lt;int&gt; elements;

    public NumericElement(int newElement)
    {
        elements = new ArrayList&lt;int&gt;();
        elements.add(newElement);
    }

    public NumericElement(ArrayList&lt;int&gt; newElements)
    {
        elements = new ArrayList&lt;int&gt;(newElements); // copying array elements to the new array.
    }

    public ArrayList&lt;int&gt; getElements()
    {
        return elements;
    }
}
</code></pre>
","0","33484725"
"<p>EDIT: <a href=""http://docs.oracle.com/javase/tutorial/java/javaOO/enum.html"" rel=""nofollow"">Info on enums</a></p>

<p>This is probably not what you'd prefer, but I strongly suggest you go for a different move/board representation:</p>

<p><strong>HOW</strong></p>

<p>Firstly, I suggest you implement your board cells as enums (since there are only 9 of them).</p>

<p>Then, implement the board as a set of 9 enums, as such:</p>

<pre><code>public enum Move {
A0, A1, A2, B0, B1, B2, C0, C1, C2; }
</code></pre>

<p>Also, implement winning patterns (e.g. a whole line, a whole diagonal) as sets of 3 enums (i.e. a subset of the board set).</p>

<p>After these changes, it gets a lot easier to check whether a player (be it you or computer) has won.</p>

<p>I recommend you add the subsets and the method that checks if a player has won inside the Move class as well. </p>

<p>A subset can be created like this:
e.g.</p>

<pre><code>static private final EnumSet&lt;Move&gt; lineA = EnumSet.of(A0,A1,A2);
</code></pre>

<p>And a check from your won method (note you need to check for all subsets) could possibly be:</p>

<pre><code>moves.containsAll(lineA)
</code></pre>

<p>where moves is the set of moves made by player (when a player makes a move you add the enum to it's moves set).</p>

<p><strong>WHY</strong></p>

<p>This design is more concise, straightforward and elegant. You should not experience the problems you described any longer, if you use this approach.</p>
","0","37199056"
"<p>Arrays in Java are fixed-size, just like in C. You can't <em>remove</em> an item from it, you can only update its value. The value can also be <code>null</code>, which may serve your purpose.</p>

<p>However, it is not advised to use arrays for your use case; instead use a <code>List</code> implementation. <code>ArrayList</code> is the default choice and a <code>LinkedList</code> may make sense for a huge amount of additions and deletions in the middle of the list.</p>

<p>With Java 8, the best approach is to use the Streams API:</p>

<pre><code>List&lt;String&gt; withLongStringsDiscarded = 
   myStringList.stream().filter(s -&gt; s.length() &lt;= 20).collect(Collectors.toList());
</code></pre>
","1","25115108"
"<p>You can define a <code>List</code> class with a <strong>type-safe interface</strong>, hiding an unsafe <code>List&lt;Object&gt;</code> as an internal implementation detail.</p>

<p>This is more work than just using a <code>List&lt;Object&gt;</code> directly. If your list is used only by one class, just use a <code>List&lt;Object&gt;</code>, as an implementation detail of that one class. <strong>But if your list is exposed to access by more than just one class, consider using this type-safe approach.</strong></p>

<p>First, define an interface that can represent either an int or a array of ints. </p>

<pre><code>public interface IScalarOrArrayInt { }
</code></pre>

<p>And define a sub-interface for each possible element type:</p>

<pre><code>public interface IScalarInt extends IScalarOrArrayInt { 
    public int getScalarInt();
}

public interface IArrayInt extends IScalarOrArrayInt {
    public int[] getIntArray();
}
</code></pre>

<p>Then define your list class and its representation. It's interface can be a <code>List&lt;IScalarOrArrayInt&gt;</code>. <strong>The representation can be a <code>List&lt;Object&gt;</code>, so that you can put Integer and int[] objects into it directly, without wrapper objects.</strong></p>

<pre><code>public class ListOfScalarsAndArray extends AbstractList&lt;IScalarOrArrayInt&gt; {
    private static List&lt;Object&gt; m_list = new ArrayList&lt;Object&gt;();
</code></pre>

<p>As noted in the <code>AbstractList</code> documentation, you'll want to define several methods to allow modifying your list. You can delegate them to the internal list, but wrap the return values.</p>

<pre><code>@Override
public void add(int index, IScalarOrArrayInt element) {
    m_list.add( index, element );
}

@Override
public IScalarOrArrayInt remove(int index) {
    return wrap( m_list.remove( index ));
}

@Override
public IScalarOrArrayInt set(int index, IScalarOrArrayInt element) {
    return wrap( m_list.set( index, element ));
}
</code></pre>

<p>For the convenience of callers, you can add some methods that accept an unwrapped <code>int</code> or <code>int[]</code>. For example: </p>

<pre><code>public void add( int element ) {
    m_list.add( element );
}

public void add( int[] element ) {
    m_list.add( element );
}
</code></pre>

<p>To satisfy the standard List&lt;> interface, you can wrap return values. Your class controls the internal list, so it alone controls the possible types of list members.</p>

<pre><code>private IScalarOrArrayInt wrap( Object o ) {
    if ( o instanceof Integer ) {
        final int i = (Integer) o;
        return new IScalarInt() {

            @Override
            public int getScalarInt() {
                return i;
            }
        };
    }
    else {
        assert( o instanceof int[] );

        final int[] a = (int[]) o;

        return new IArrayInt() {
            @Override
            public int[] getIntArray() {
                return a;
            }
        };
    }
}
</code></pre>
","0","33484725"
"<p>An <code>ArrayList</code> is backed by an array, whose size is fixed, but the <code>ArrayList</code> class contains code that creates a larger array and copies the existing array to it when the existing array is full.</p>

<p>That's the difference between arrays and <code>ArrayList</code>s.</p>
","4","34849444"
"<p>The main reason lies the (asymptotic) complexity of adding a sequence of elements to the list.</p>

<p>Note that the <code>add</code> method internally calls <code>ensureCapacity(size+1)</code>. When the size of the internal array is increased, all elements have to be <em>copied</em> into the new, larger array.</p>

<p>If the size was only increased by a constant <em>amount</em> (which would be 1 for each call to <code>add</code>), then adding <strong>n</strong> elements would have a complexity of <strong>O(n<sup>2</sup>)</strong>. </p>

<p>Instead, the size is always increased by a constant <em>factor</em>. Then, adding <strong>n</strong> elements only has a complexity of <strong>O(n)</strong>. </p>
","3","26925556"
"<p>There is big difference between array and lists:
1) if we certainly know size of collection - this is array, we need no dynamicaly changing size.
2) if we don't know, how many elements will be in our collection - this is list, where size is not fixed.</p>

<p>In this answer ""collection"" doesn't means Collection class in Java, it's just a a bunch of some objects</p>
","0","34849444"
"<p>If you can, swap out the <code>ArrayList</code> for an <code>ArrayDeque</code>, which has convenient methods like <code>removeLast</code>.</p>
","5","687833"
"<p>First of all, in your main method you say <code>finalwinner=CheckForWinner(currentplayer);</code> so you don't have to set <code>finalwinner=true;</code> every time after checking row, column and diagonal. <code>return true;</code> is enough.</p>

<p>Your problem is, you check for a Tie Game and if it is the case, you also return true, but it is wrong, because neither player nor computer wins! So your checkForWinner method <strong>always</strong> returns <strong>true</strong>.</p>

<p>You don't really have to check extra for Tie Game. Just check win for player, check win for computer, if both are false and last move done - its a tie game.</p>
","0","37199056"
"<ol>
<li><p>The main difference between Array and ArrayList in Java is that Array is a fixed length data structure while ArrayList is a variable length. You can not change length of Array once create, but ArrayList can re-size itself.</p></li>
<li><p>Another difference between Array and ArrayList in Java, you can not store primitives in ArrayList, because it can only contain Objects. Array can contain both primitives and Objects.</p></li>
<li><p>The Array is not a class, while ArrayList is an object with many methods.</p></li>
<li><p>The elements of the Array retrieved with for loop. The elements of the ArrayList can be retrieved with for loop and iterators.</p></li>
<li><p>The Array cannot be synchronized, while ArrayList can be obtained a synchronized ver.</p></li>
</ol>

<p>etc....</p>
","0","34849444"
"<p>This is the right one (if you are concerned about the overhead of HashSet.</p>

<pre><code> public static ArrayList&lt;String&gt; removeDuplicates (ArrayList&lt;String&gt; arrayList){
    if (arrayList.isEmpty()) return null;  //return what makes sense for your app
    Collections.sort(arrayList, String.CASE_INSENSITIVE_ORDER);
    //remove duplicates
    ArrayList &lt;String&gt; arrayList_mod = new ArrayList&lt;&gt;();
    arrayList_mod.add(arrayList.get(0));
    for (int i=1; i&lt;arrayList.size(); i++){
        if (!arrayList.get(i).equals(arrayList.get(i-1))) arrayList_mod.add(arrayList.get(i));
    }
    return arrayList_mod;
}
</code></pre>
","0","203984"
"<p>How about this..
Somewhere in your class...</p>

<pre><code>List&lt;E&gt; list = new ArrayList&lt;E&gt;();
private int i = -1;
    public void addObjToList(E elt){
        i++;
        list.add(elt);
    }


    public E getObjFromList(){
        if(i == -1){ 
            //If list is empty handle the way you would like to... I am returning a null object
            return null; // or throw an exception
        }

        E object = list.get(i);
        list.remove(i); //Optional - makes list work like a stack
        i--;            //Optional - makes list work like a stack
        return object;
    }
</code></pre>
","-3","687833"
"<p>Below code works for me:</p>
<h2>applcation.conf</h2>
<p>mydata.crypto {</p>
<pre><code>ciphers = [

           &quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&quot;

           &quot;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&quot;

           &quot;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&quot;

          ]

 protocols = [

               &quot;TLSv1.2&quot;

             ]

   }
</code></pre>
<hr />
<h2>Sample code in scala
Reading as List:</h2>
<p>val ciphersList = config.getStringList(&quot;mydata.crypto.ciphers&quot;)</p>
<p>val protocolsList = config.getStringList(&quot;mydata.crypto.protocols&quot;)</p>
<p>import scala.collection.JavaConverters._</p>
<p>val enableCiphersList = ciphersList.asScala.toArray</p>
<p>val enableProtocolsList = protocolsList.asScala.toArray</p>
<p>Now we can see &quot;enableCiphersList&quot; and &quot;enableProtocolsList&quot; are Array of Strings type.</p>
","0","49832401"
"<p>You can use the <code>toArray()</code> method for <code>List</code>:</p>

<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();

list.add(""apple"");
list.add(""banana"");

String[] array = list.toArray(new String[list.size()]);
</code></pre>

<p>Or you can manually add the elements to an array:</p>

<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();

list.add(""apple"");
list.add(""banana"");

String[] array = new String[list.size()];

for (int i = 0; i &lt; list.size(); i++) {
    array[i] = list.get(i);
}
</code></pre>

<p>Hope this helps!</p>
","41","4042434"
"<p>To my understanding, the problem can be solved with the following helper function which calculates the indices of the next entry. The syntax is C#, but should work similar in Java, where <code>m</code> and <code>n</code> are supposed to be the respective matrix dimensions. The idea is to check whether the desired main direction is down-left or up-right; if the edge of the matrix is reached, which has to be checked beforehand, this is modified to right and down, respectively. The implementation assumes zero-based indexing of the rows and columns.</p>

<pre><code>public struct Cell
{
    public int Row;
    public int Col;
}

public static Cell GetNext(Cell iCell)
{
    Cell Result;
    if (( iCell.Row + iCell.Col ) % 2 == 0)
    {
        if (iCell.Col == n - 1)
            Result = new Cell { Row = iCell.Row + 1, Col = n - 1 };
        else if (iCell.Row == 0)                    
            Result = new Cell { Row = 0, Col = iCell.Col + 1 };
        else
            Result = new Cell { Row = iCell.Row - 1, Col = iCell.Col + 1 };
    }
    else
    {
        if (iCell.Row == m - 1)
            Result = new Cell { Row = m - 1, Col = iCell.Col + 1 };
        else if (iCell.Col == 0)
            Result = new Cell { Row = iCell.Row + 1, Col = 0 };
        else
            Result = new Cell { Row = iCell.Row + 1, Col = iCell.Col - 1 };
    }
    return Result;
}
</code></pre>
","1","38233852"
"<p>Personally, I like @Codor's approach more. I thought I would throw this Java function in the mix too. </p>

<p><em>[Note: I have not compiled or run this. But, I think it should work (mostly). Let me know. :)]</em></p>

<pre><code>public static int[] getTraversedArray(int[][] arr) {
     if (arr == null || arr.length == 0) 
        return null;

    # matrix need not be `nxn`
    int l = arr.length - 1, w = arr[0].length - 1;

    # all indices need to be visited
    int[] out = new int[(l + 1) * (w + 1)];

    int indx = 0;
    for (int i = 0; i &lt;= l + w; i++) {
        # ""even"" index
        if (i % 2 == 0) {
            for (int x = i; x &gt;= 0; x--) {
                # if it is a ""valid index"", set the value
                # in the output array
                if ((x &lt;= l) &amp;&amp; (i - x &lt;= w)) {
                    out[indx] = arr[x][i - x];
                    indx++;
                }
            }
        } 
        # ""odd"" index
        else {
            for (int x = 0; x &lt;= i; x++) {
                # if it is a ""valid index"", set the value
                # in the output array
                if ((x &lt;= l) &amp;&amp; (i - x &lt;= w)) {
                    out[indx] = arr[x][i - x];
                    indx++;
                }
            }
        }
    }
    return out;
}
</code></pre>
","0","38233852"
"<p>If you want to create arrays using reflections then you can do like this:</p>

<pre><code> int size = 3;
 int[] intArray = (int[]) Array.newInstance(int.class, size ); 
</code></pre>
","9","1200621"
"<pre><code>List&lt;Parent&gt; listValue = new ArrayList&lt;Parent&gt;();
listValue.add(new Child1());
listValue.add(new Child2());
</code></pre>

<p>Both Child1 and Child2 are inherited from ""Parent"" Class.</p>
","8","28314768"
"<p>You can look java library classes for this.
For example Shape class is superclass of Rectangle and Polygon classes</p>

<pre><code>ArrayList&lt;Shape&gt; list = new ArrayList&lt;Shape&gt;();
list.add(new Rectangle());
list.add(new Polygon());
</code></pre>
","3","28314768"
"<pre><code>HashMap&lt;String, String&gt; hashMap = new HashMap&lt;&gt;();
String[] stringValues= new String[hashMap.values().size()];
hashMap.values().toArray(stringValues);
</code></pre>
","0","1090556"
"<p>You can do it by creating ""ArrayList"" of super class.
Than you can add the child class elements in the ""ArrayList"".</p>

<pre><code>List&lt;SuperClass&gt; tempList=new ArrayList&lt;SuperClass&gt;();
tempList.add(childClass1);
tempList.add(childClass2);
</code></pre>

<p>Hope this solves your problem.</p>
","0","28314768"
"<p>You could try this: </p>

<pre><code>oracle.sql.ARRAY a = ...
String[] strArray = (String[])a.getArray();
List lstArray = java.util.Arrays.asList(strArray);
</code></pre>
","0","52477492"
"<p>If you want to hold on to the original position of the object you need to make a copy of the arraylist before you shuffle it.  And then use indexOf </p>
","0","39136210"
"<p>In Java 8:</p>

<pre><code>String[] strings = list.parallelStream().toArray(String[]::new);
</code></pre>
","10","4042434"
"<pre><code>Set&lt;String&gt; strSet = strList.stream().collect(Collectors.toSet());
</code></pre>

<p>Is the easiest way to remove your duplicates.</p>
","0","203984"
"<p>If you want to get an array of ints, with values from 1 to 10, from a <code>Stream&lt;Integer&gt;</code>, there is <code>IntStream</code> at your disposal.</p>
<p>Here we create a <code>Stream</code> with a <code>Stream.of</code> method and convert a <code>Stream&lt;Integer&gt;</code> to an <code>IntStream</code> using a <code>mapToInt</code>. Then we can call <code>IntStream</code>'s <code>toArray</code> method.</p>
<pre><code>Stream&lt;Integer&gt; stream = Stream.of(1,2,3,4,5,6,7,8,9,10);
//or use this to create our stream 
//Stream&lt;Integer&gt; stream = IntStream.rangeClosed(1, 10).boxed();
int[] array =  stream.mapToInt(x -&gt; x).toArray();
</code></pre>
<p>Here is the same thing, without the <code>Stream&lt;Integer&gt;</code>, using only the <code>IntStream</code>:</p>
<pre><code>int[]array2 =  IntStream.rangeClosed(1, 10).toArray();
</code></pre>
","44","23079003"
"<p>Just use them in Glide like this:</p>

<pre><code>GlideApp.with(this).load(ENTER_YOUR_URL_HERE).into(imageView);
</code></pre>

<p>don't forget to implement it first. For more information just follow this <a href=""https://github.com/bumptech/glide"" rel=""nofollow noreferrer"">link</a></p>
","0","51114672"
"<pre><code>List&lt;Double&gt; numbers = new ArrayList&lt;Double&gt;();
double sum = 0;

Scanner scan = new Scanner(System.in);
while(scan.hasNext()){
    double value = scan.nextDouble();
    numbers.add(value);
    sum += value;
}

double average = sum / numbers.size();
</code></pre>
","1","2795350"
"<p>You can create a custom collector that convert a stream to array. </p>

<pre><code>public static &lt;T&gt; Collector&lt;T, ?, T[]&gt; toArray( IntFunction&lt;T[]&gt; converter )
{
    return Collectors.collectingAndThen( 
                  Collectors.toList(), 
                  list -&gt;list.toArray( converter.apply( list.size() ) ) );
}
</code></pre>

<p>and a quick use</p>

<pre><code>List&lt;String&gt; input = Arrays.asList( ..... );

String[] result = input.stream().
         .collect( CustomCollectors.**toArray**( String[]::new ) );
</code></pre>
","5","23079003"
"<p>There is no way to accomplish this without iteration under Java-8 <sub>(and why does that matter, does the performance hinder your runtime by so much? Is this the bottleneck of your application? You must know that the iteration ""cost"" will take its toll from your application no matter if you use it directly or not).   </sub>  </p>

<p>Anyway, for the sake of completeness and to make this answer more useful, this is how you might do that:</p>

<pre><code>for (int i = 0; i &lt; arr.length ; i++)
    bigIntegerArray[i] = BigInteger.valueOf(arr[i]);
</code></pre>

<p>And if you decide you want to convert your <code>int</code> array to a <em>single</em> <code>BigInteger</code>, there is the constructor <a href=""http://docs.oracle.com/javase/6/docs/api/java/math/BigInteger.html#BigInteger%28byte%5B%5D%29"" rel=""nofollow""><code>public BigInteger(byte[] val)</code></a> that:</p>

<blockquote>
  <p>Translates a <code>byte</code> array containing the two's-complement binary representation of a <code>BigInteger</code> into a <code>BigInteger</code>. The input array is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.</p>
</blockquote>

<p>(And as you probably know <code>int</code> can be represented as 4 <code>byte</code>s)</p>
","0","35772162"
"<p>Take the primitive type <code>int</code> for example. There are several ways to declare and <code>int</code> array:</p>

<pre><code>int[] i = new int[capacity];
int[] i = new int[] {value1, value2, value3, etc};
int[] i = {value1, value2, value3, etc};
</code></pre>

<p>where in all of these, you can use <code>int i[]</code> instead of <code>int[] i</code>.</p>

<p>With reflection, you can use <code>(Type[]) Array.newInstance(Type.class, capacity);</code></p>

<p>Note that in method parameters, <code>...</code> indicates <code>variable arguments</code>. Essentially, any number of parameters is fine. It's easier to explain with code:</p>

<pre><code>public static void varargs(int fixed1, String fixed2, int... varargs) {...}
...
varargs(0, """", 100); // fixed1 = 0, fixed2 = """", varargs = {100}
varargs(0, """", 100, 200); // fixed1 = 0, fixed2 = """", varargs = {100, 200};
</code></pre>

<p>Inside the method, <code>varargs</code> is treated as a normal <code>int[]</code>. <code>Type...</code> can only be used in method parameters, so <code>int... i = new int[] {}</code> will not compile.</p>

<p>Note that when passing an <code>int[]</code> to a method (or any other <code>Type[]</code>), you cannot use the third way. In the statement <code>int[] i = *{a, b, c, d, etc}*</code>, the compiler assumes that the <code>{...}</code> means an <code>int[]</code>. But that is because you are declaring a variable. When passing an array to a method, the declaration must either be <code>new Type[capacity]</code> or <code>new Type[] {...}</code>.</p>

<h1>Multidimensional Arrays</h1>

<p>Multidimensional arrays are much harder to deal with. Essentially, a 2D array is an array of arrays. <code>int[][]</code> means an array of <code>int[]</code>s. The key is that if an <code>int[][]</code> is declared as <code>int[x][y]</code>, the maximum index is <code>i[x-1][y-1]</code>. Essentially, a rectangular <code>int[3][5]</code> is:</p>

<pre><code>[0, 0] [1, 0] [2, 0]
[0, 1] [1, 1] [2, 1]
[0, 2] [1, 2] [2, 2]
[0, 3] [1, 3] [2, 3]
[0, 4] [1, 4] [2, 4]
</code></pre>
","11","1200621"
"<p>This should do the job if you're using <a href=""/questions/tagged/java-8"" class=""post-tag"" title=""show questions tagged &#39;java-8&#39;"" rel=""tag"">java-8</a></p>

<pre><code>int[] ints = new int[]{1,2,3};

System.out.println(Arrays.toString(ints)); // [1, 2, 3]

BigInteger[] bigs = Arrays.stream(ints)
                          .mapToObj(BigInteger::valueOf)
                          .toArray(BigInteger[]::new);

System.out.println(Arrays.toString(bigs)); // [1, 2, 3]
</code></pre>
","5","35772162"
"<p>If you want your list to automatically ignore duplicates and preserve its order, you could create a <strong>HashList</strong>(a HashMap embedded List).</p>

<pre><code>public static class HashList&lt;T&gt; extends ArrayList&lt;T&gt;{
        private HashMap &lt;T,T&gt; hashMap;
        public HashList(){
            hashMap=new HashMap&lt;&gt;();
        }

        @Override
        public boolean add(T t){
            if(hashMap.get(t)==null){
                hashMap.put(t,t);
                return super.add(t);
            }else return false;
        }

        @Override
        public boolean addAll(Collection&lt;? extends T&gt; c){
            HashList&lt;T&gt; addup=(HashList&lt;T&gt;)c;
            for(int i=0;i&lt;addup.size();i++){
                add(addup.get(i));
            }return true;
        }

    }
</code></pre>

<p><strong><code>Usage Example:</code></strong></p>

<pre><code>HashList&lt;String&gt; hashlist=new HashList&lt;&gt;();
hashList.add(""hello"");
hashList.add(""hello"");
System.out.println("" HashList: ""+hashlist);
</code></pre>
","0","203984"
"<p><code>Collection</code> us an interface,  not a class, so pedantically it has no sub classes. Rather, it has classes that implement it, and interfaces that extend it. As it is a <code>public</code> interface,  <em>anyone</em> could,  in principle, write a class that implements it. So it is impossible to list all those classes. </p>
","0","54858427"
"<p>If you are using Java-8, you can do this :</p>

<pre><code>Arrays.stream(array).skip(2).forEach(System.out::println);
</code></pre>

<p>There won't be any exceptions thrown even if you pass a value to <code>skip</code> that is greater than the length of the array. You will simply get no output in such a case.</p>

<p>If you are not using Java-8, I don't see any challenge. Just loop through index 3 to n and print the elements.</p>
","1","31086565"
"<h3>How to Creating an Arraylist of Objects.</h3>
<p>Create an array to store the objects:</p>
<pre><code>ArrayList&lt;MyObject&gt; list = new ArrayList&lt;MyObject&gt;();
</code></pre>
<p>In a single step:</p>
<pre><code>list.add(new MyObject (1, 2, 3)); //Create a new object and adding it to list. 
</code></pre>
<p>or</p>
<pre><code>MyObject myObject = new MyObject (1, 2, 3); //Create a new object.
list.add(myObject); // Adding it to the list.
</code></pre>
","17","3982550"
"<p>According to the <a href=""https://docs.oracle.com/javase/specs/jls/se7/html/jls-10.html"" rel=""noreferrer"">JLS 10.2</a> in the section about <code>Array</code>'s:</p>

<blockquote>
  <p>The <code>[]</code> may appear as part of the type at the beginning of the declaration, or as part of the declarator for a particular variable, <strong>or both</strong>.</p>
  
  <p>For example:</p>
  
  <p><code>byte[] rowvector, colvector, matrix[];</code>
  This declaration is equivalent to:</p>
  
  <p><code>byte rowvector[], colvector[], matrix[][];</code></p>
</blockquote>

<p>(Emphasis mine)</p>

<p>Note especially the last example where it says <code>byte[] matrix[]</code> is equivalent to <code>byte matrix[][]</code>. </p>

<p>So no, it is not a bug, simply a design choice. </p>
","7","12523961"
"<p>check the following code snippet</p>

<pre><code>  //its three because you want to display last three elements.Note it should be less than array length
    int pointer=3;
    int[] inputArray= {1,2,3,4,5};
    for(int i=inputArray.length-pointer;i&lt;inputArray.length;i++){

        System.out.println(inputArray[i]);
    }
</code></pre>
","0","31086565"
"<p>YES! It is possible.
It is a basic rule of java.
We can assign char value to int type of variable. Now that int type variable will not store a character but its ASCII value. See the example</p>

<pre><code>class Test{
    public static void main(String[] args){
        int num='a';
        System.out.println(num);//97
    }
}
</code></pre>

<p>you can see i've assigned 'a' into int type of variable.</p>

<p>In same case, whenever we pass char as index value, always ASCII value will be passed. As we know, 97 is the ASCII value of a.</p>

<p>So if we access an array by passing 'a', internally 97th index of array will be called.</p>

<pre><code>int num='a';
System.out.println(args[num]);//AIOOBE 
</code></pre>

<p>Here we got Exception like</p>

<p><strong>Exception in thread ""main"" java.lang.ArrayIndexOutOfBoundsException: 97
        at Test.main(Test.java:4)</strong></p>

<p>Program is compiled fine, but we got exception at runtime because args is empty array right now.</p>
","3","55546523"
"<p>The answer is going to be different depending on whether you know the size of the array in advance, and how sparse or random the data is.</p>

<p>For starters, if you're looking for the most efficient storage, you're going to want to compress the data instead of storing the raw 0s and 1s.  One typically good compression algorithm is <a href=""https://en.wikipedia.org/wiki/Huffman_coding"" rel=""nofollow"">Huffman Coding</a>, although it is not always the ""best"" particularly if the data is random.  You can find an <a href=""http://algs4.cs.princeton.edu/55compression/Huffman.java.html"" rel=""nofollow"">implementation here</a>.</p>

<p>Going back to the original question and assuming you want to keep the raw values; the most efficient storage will depend on whether you know the size of the array in advance. If it is a fixed size, you can create a number of <code>byte</code> primitives.  Each of these would take exactly 1 byte, plus the overhead for the object in which they are stored.  You could reduce the number of variables by using <code>short</code>, <code>int</code>, or <code>long</code> as needed to group 2, 4, or 8 bytes together.  If you're including these variables as a member of a class with other variables, it may make a difference which type you use, as the object itself takes 8 bytes for overhead, and the size will always be a multiple of 8 bytes; so any variables short of that will be padded to a multiple 8-bytes. </p>

<p>If you need an arbitrary size array (which incurs its own 12-byte overhead, 8 for the object and 4 for the array length) the answer would continue to be an array of <code>byte[]</code> with each of the 8 bits mapped to your 1's and 0's.   However, the JVM allocates memory in 8-byte chunks so 1 to 4 bytes will take the the memory footprint of an <code>int</code> so a <code>byte[]</code> array will ultimately match the memory footprint of a <code>short[]</code>, or <code>int[]</code> and there's no real need to allocate an array in smaller sizes than 32 bits (as long as you ensure you use all the bits efficiently.  A <code>long[]</code> would always end up taking an extra 8 bytes over the other integer array types, due to the 12-byte object overhead and 16-byte allocation roundoff.</p>

<p>At the end of the day, however, readability/usability probably trumps memory usage.  A <code>BitSet</code> stores values as <code>long[]</code> under the hood and has friendlier access methods and is probably the best choice here to minimize (not exactly, but good enough for practical purposes) memory footprint.</p>

<p>A <code>boolean[]</code> would likely be the fastest to deal with CPU wise but would take 8x the memory as a primitive integer type.</p>
","3","37403452"
"<p>Your getContacts AsyncTask runs in another thread (asynchronously as the etymology suggests). Your list is updated after that thread finishes, but your Logging happens in parallel with the AsyncTask so at the time you log the size, the list <em>does</em> contain nothing. Later when the AsyncTask finishes that's when you see things displayed in the list.</p>

<p>Heres a visualization</p>

<p>Thread: <strong>UI</strong> ----------------------------------------------------------- <strong>ASYNCTASK</strong></p>

<p>............... | .. ArrayList mNewList = new ...;</p>

<p>............... | .. mNewList = mListData.getContacts();</p>

<p>............... | .. AsyncTask::onBeforeExecute()</p>

<p>............... | .............................................................................. | .. AsyncTask::doInBackground starts</p>

<p>............... | .. Log.i(mNewList.size()); .................................... | .. <em>( still working )</em></p>

<p>............... | .............................................................................. | .. AsyncTask::doInBackground returns</p>

<p>............... | .. AsyncTask::onPostExecute</p>

<p>............... | .. mContacts.add(...) ...</p>

<p>............... | ...</p>
","1","31811361"
"<p>I hope you have gone through <code>BitSet</code>. I think thats the efficient way of storing Bits. 
<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html"" rel=""nofollow"">https://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html</a></p>

<p>but you should treat 0 as false and 1 as true</p>
","4","37403452"
"<pre><code>public static void main (String[] args)
{
    Scanner s = new Scanner(System.in);
    System.out.println(""Please enter size of an array"");
    int n=s.nextInt();
    double arr[] = new double[n];
    System.out.println(""Please enter elements of array:"");
    for (int i=0; i&lt;n; i++)
    {
        arr[i] = s.nextDouble();
    }
}
</code></pre>
","0","2795350"
"<p>Iterate over each of them, check the size using .length() function, and create the array accordingly..</p>

<pre><code>ArrayList&lt;String&gt; values = new ArrayList&lt;String&gt;();


for (String str : strArray) {
    if (str.length() &lt;= 20) {
         values.add(str);
    }

}

values.toArray();
</code></pre>
","0","25115108"
"<p>This is working</p>

<pre><code>    int[] ar = {10, 20, 20, 10, 10, 30, 50, 10, 20};

    ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();

    for(int i:ar){
        list.add(new Integer(i));

    }
    System.out.println(list.toString());

    // prints : [10, 20, 20, 10, 10, 30, 50, 10, 20]
</code></pre>
","1","3746639"
"<p>I think the most most space efficient way to store a binary matrix, if you have most '0's then '1's, is using a <a href=""https://en.wikipedia.org/wiki/Sparse_matrix"" rel=""nofollow"">sparse matrix</a>.
In a sparse matrix you need represent only the '1' values using a crossed-list structure.</p>

<p>You can find some implementations on <a href=""https://github.com/search?l=Java&amp;q=sparse%20matrix&amp;ref=searchresults&amp;type=Repositories&amp;utf8=%E2%9C%93"" rel=""nofollow"">GitHub</a>.</p>
","2","37403452"
"<pre><code>    public static void main(String[] args) {


            int[] array = new int[] {1,2,3,4,5};

        }
}
</code></pre>

<p>You are currently declaring the size of the array twice, the above will work. </p>
","1","58339177"
"<p>If you are using Java 8+ and need a 2 dimensional <code>Array</code>, perhaps for TestNG data providers, you can try:</p>



<pre><code>map.entrySet()
    .stream()
    .map(e -&gt; new Object[]{e.getKey(), e.getValue()})
    .toArray(Object[][]::new);
</code></pre>

<p>If your <code>Object</code>s are <code>String</code>s and you need a <code>String[][]</code>, try:</p>

<pre><code>map.entrySet()
    .stream()
    .map(e -&gt; new String[]{e.getKey(), e.getValue().toString()})
    .toArray(String[][]::new);
</code></pre>
","5","1090556"
"<pre><code>public class FirstJavaClass {
    public void method(double[] input) {
        // ... do something amazing with it!
    }
}
</code></pre>
","3","33089567"
"<p>The Simplest approach: </p>

<pre><code>String[] stringArray = {""Hey"", ""Hi"", ""Hello""};

List&lt;String&gt; list = Arrays.asList(stringArray);
</code></pre>
","11","6026813"
"<p>The <a href=""https://stackoverflow.com/users/571407/jb-nizet"">JB Nizet</a>'s answer is correct. In Java 15, the better answer is:</p>
<pre><code>set.toArray(new String[0]); 
</code></pre>
","0","5474656"
"<p>Declaring an array of object references:</p>

<pre><code>class Animal {}

class Horse extends Animal {
    public static void main(String[] args) {

        /*
         * Array of Animal can hold Animal and Horse (all subtypes of Animal allowed)
         */
        Animal[] a1 = new Animal[10];
        a1[0] = new Animal();
        a1[1] = new Horse();

        /*
         * Array of Animal can hold Animal and Horse and all subtype of Horse
         */
        Animal[] a2 = new Horse[10];
        a2[0] = new Animal();
        a2[1] = new Horse();

        /*
         * Array of Horse can hold only Horse and its subtype (if any) and not
           allowed supertype of Horse nor other subtype of Animal.
         */
        Horse[] h1 = new Horse[10];
        h1[0] = new Animal(); // Not allowed
        h1[1] = new Horse();

        /*
         * This can not be declared.
         */
        Horse[] h2 = new Animal[10]; // Not allowed
    }
}
</code></pre>
","9","1200621"
"<p>well first do </p>

<pre><code>String s = yourEditText.toString();
Integer digitNumber = s.length();
Integer i = Integer.valueOf(s);
</code></pre>

<p>then ull have to read single digits u do this by using the Mod operator so</p>

<pre><code>new Integer[] I = new Integer[digitNumber];
for(int i=0; i&lt;digitNumber;i++){
    I[i] = i % 10;
    i = i/10;
}
</code></pre>
","0","39604157"
"<pre><code>     Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 4, 5, 6);

     Integer[] integers = stream.toArray(it-&gt;new Integer[it]);
</code></pre>
","-1","23079003"
"<p>Array is a sequential list of items</p>

<pre><code>int item = value;

int [] one_dimensional_array = { value, value, value, .., value };

int [][] two_dimensional_array =
{
  { value, value, value, .. value },
  { value, value, value, .. value },
    ..     ..     ..        ..
  { value, value, value, .. value }
};
</code></pre>

<p>If it's an object, then it's the same concept</p>

<pre><code>Object item = new Object();

Object [] one_dimensional_array = { new Object(), new Object(), .. new Object() };

Object [][] two_dimensional_array =
{
  { new Object(), new Object(), .. new Object() },
  { new Object(), new Object(), .. new Object() },
    ..            ..               ..
  { new Object(), new Object(), .. new Object() }
};
</code></pre>

<p>In case of objects, you need to either assign it to <code>null</code> to initialize them using <code>new Type(..)</code>, classes like <code>String</code> and <code>Integer</code> are special cases that will be handled as following</p>

<pre><code>String [] a = { ""hello"", ""world"" };
// is equivalent to
String [] a = { new String({'h','e','l','l','o'}), new String({'w','o','r','l','d'}) };

Integer [] b = { 1234, 5678 };
// is equivalent to
Integer [] b = { new Integer(1234), new Integer(5678) };
</code></pre>

<p>In general you can create arrays that's <code>M</code> dimensional</p>

<pre><code>int [][]..[] array =
//  ^ M times [] brackets

    {{..{
//  ^ M times { bracket

//            this is array[0][0]..[0]
//                         ^ M times [0]

    }}..}
//  ^ M times } bracket
;
</code></pre>

<p>It's worthy to note that creating an <code>M</code> dimensional array is expensive in terms of Space. Since when you create an <code>M</code> dimensional array with <code>N</code> on all the dimensions, The total size of the array is bigger than <code>N^M</code>, since each array has a reference, and at the M-dimension there is an (M-1)-dimensional array of references. The total size is as following</p>

<pre><code>Space = N^M + N^(M-1) + N^(M-2) + .. + N^0
//      ^                              ^ array reference
//      ^ actual data
</code></pre>
","8","1200621"
"<p>The way you ask the question doesn't really fit to stackoverflow, as you are asking for a rather basic technique and do not provide at all what you have tried so far. I'll answer you nonetheless.</p>

<p>You'd need to save the last picked String (or its index, a hash, some representation of your choice, ...) to a file, then when executing the code again you'd pick a random int, check if the File exists and if yes pick a new random Int until !list[random].equals(lastString). Again, save that string to said file.</p>

<p>Plus, you need to specify what exactly you mean by code being executed again. Are we speaking about persistent or temporal memory?</p>
","2","58930693"
"<p>Get your String from your EditText and then store each number into an array using a for loop.</p>

<pre><code>public class EditTextArray extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_edit_text_array);

        EditText et = (EditText) findViewById(R.id.editText);
        et.setText(""1452"");  // Normally user input here...

        String text = et.getText().toString();

        int[] array = new int[text.length()];
        for (int i = 0; i &lt; text.length(); i++) {
            array[i] = Character.getNumericValue(text.charAt(i));
        }

        Log.d(""Output: "", Arrays.toString(array));
        //09-20 14:27:45.272 20400-20400/com.jtwaller.test D/Output:: [1, 4, 5, 2]

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; text.length(); i++) {
            sb.append(array[i] + "" "");
        }

        Log.d(""Output: "", sb);
        //09-20 14:27:45.272 20400-20400/com.jtwaller.test D/Output:: 1 4 5 2 
    }
}
</code></pre>
","0","39604157"
"<p>You are adding the numbers everytime. You should use local variables or local initialization. Else your passcode list gets 5 more numbers everytime you call your function.</p>
","2","44119850"
"<p>When you instantiate an ArrayList, you can specify the initial capacity, but that doesn't populate the ArrayList.</p>

<p>You can use some short cuts with arrays.</p>

<p>For example, you can create an ArrayList of 100 null references with :</p>

<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt; (Arrays.asList(new Integer[100]));
</code></pre>
","1","33316324"
"<p>Just do like so... get your String and convert it with parseInt</p>

<pre><code>String number = ""10"";
int result = Integer.parseInt(number);
</code></pre>
","0","39604157"
"<p>Thats the way to get a value from the same ""pool"" of numbers if your question was like that you could use the code from below.     </p>

<pre><code>import java.util.Random;
import java.util.ArrayList;

class Main {
  private static ArrayList&lt;String&gt; YourList = new ArrayList&lt;String&gt;(); // creates your List

  public static void main(String[] args) {
    for(int i = 0; i &lt; 5; i++) {
      YourList.add(Integer.toString(i)); // fills it with random values
    }
    for(int i = 0; i &lt; 5; i++) {
      String return_value = GetValue(); // returns the string you wanna output
      System.out.println(return_value); // output
    }
  }

  private static String GetValue() {
    Random r = new Random(); // new random created
    int index = r.nextInt(5); // get a new random index to select from your list
    String temp = YourList.get(index); // cast the valu from the list to a temp String
    return temp; // reutrn statement
  }
}
</code></pre>

<p>If you dont want to use the same number again you will need to add the line </p>

<pre><code>YourList.remove(index)
</code></pre>

<p>into the function GetValue(). </p>

<p>And change </p>

<pre><code>int index = r.nextInt(5);
</code></pre>

<p>into</p>

<pre><code>int index = r.nextInt(YourList.length);
</code></pre>

<p>I hope this helps</p>
","0","58930693"
"<p>By using the constructor <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList(int)"" rel=""nofollow"">ArrayList(int initialCapacity)</a>, which sets the initial size of the backing array to <code>initialSize</code>.</p>

<p>Note that this does not actually give you <code>initialSize</code> values in the ArrayList, it just sets the size of the backing array. If you need to set some initial values, you need to do something like</p>

<p><code>new ArrayList&lt;Integer&gt;(Collections.nCopies(100, 0));</code></p>
","1","33316324"
"<p>You can initiate and reserve capacity of an array in swift as follows.</p>

<pre><code>var tempArray: [Span] = []
tempArray.reserveCapacity(count)
</code></pre>
","1","59484391"
"<p>in case some extra manipulation of the data is desired, for which the user wants a function, this approach is not perfect (as it requires passing the class of the element as second parameter), but works:</p>

<p>import java.util.ArrayList;
import java.lang.reflect.Array;</p>

<pre><code>public class Test {
  public static void main(String[] args) {
    ArrayList&lt;Integer&gt; al = new ArrayList&lt;&gt;();
    al.add(1);
    al.add(2);
    Integer[] arr = convert(al, Integer.class);
    for (int i=0; i&lt;arr.length; i++)
      System.out.println(arr[i]);
  }

  public static &lt;T&gt; T[] convert(ArrayList&lt;T&gt; al, Class clazz) {
    return (T[]) al.toArray((T[])Array.newInstance(clazz, al.size()));
  }
}
</code></pre>
","5","4042434"
"<p>Constructor defined in <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList%28int%29"" rel=""nofollow"">ArrayList</a> can be used and initial capacity can be set to 100. It also avoids resizing of list until threshold is reached.</p>

<pre><code>List&lt;Integer&gt; arr = Arrays.asList(new Integer[10]);
</code></pre>
","0","33316324"
"<p>I think you have a problem where you are comparing your arrays. Have a look at this SO question: <a href=""https://stackoverflow.com/questions/8777257/equals-vs-arrays-equals-in-java"">equals vs Arrays.equals in Java</a></p>

<pre><code>if (digitList.size() == 5 &amp;&amp; digitList.equals(passcode)) { // are the arrays the same array?
            guideArea.setText(""Correct Password."");
            digitList.clear();
 }
</code></pre>

<p>what it should be: </p>

<pre><code>if (digitList.size() == 5 &amp;&amp; Arrays.equals(digitList, passcode)) { // are the two arrays CONTENT the same
            guideArea.setText(""Correct Password."");
            digitList.clear();
  }
</code></pre>
","-1","44119850"
"<p>The Java code is creating an array of length <code>count</code>, of <code>ArrayList&lt;Span&gt;</code> - it is an array of <code>ArrayList&lt;Span&gt;</code>s.</p>

<p>Since there are no separate types for <code>ArrayList</code> and <code>Array</code> in Swift, you can just use arrays for both of them. The type overall is a <code>[[Span]]</code>.</p>

<pre><code>var tempArray = Array(repeating: [Span](), count: count)
</code></pre>

<p><code>tempArray</code> will have <code>count</code> elements, each one is an empty array of <code>Span</code>s, into which you can add more <code>Span</code>s.</p>

<p>Note that translating code is quite like translating a spoken language. Translating a spoken language word-by-word usually results in very unnatural sounding text. Similarly, translating code line by line usually doesn't give you good-looking Swift code. You should get a high-level understanding of what the code is doing, and, in your own ""words"", write the code that does the same.</p>
","1","59484391"
"<p>There is already a method provided by java.</p>

<pre><code>return list.isEmpty();
</code></pre>
","1","42336445"
"<p>Because you said ""a security keypad"", I have to say ignore what anyone else says that is technically correct, you are doing it wrong. By storing the passcode in a ""plain"" format, you might as well just leave a sticky note on the keypad with the passcode on it.</p>

<p>What you should be doing is hashing the input and the passcode and comparing the hashed versions. And don't use hashCode(), that function is unreliable for this purpose. (Example of <a href=""https://stackoverflow.com/questions/2860943/how-can-i-hash-a-password-in-java"">how to hash</a>)</p>

<p>Also, according to the Java Docs, <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/List.html#equals(java.lang.Object)"" rel=""nofollow noreferrer"">equals</a> is the correct way to check. You are miss-handling your list instances. You should step through the debugger to see everywhere in your code that you do something that alters your global variables.</p>
","0","44119850"
"<pre><code>// you can init it like this.
var array = Array&lt;Span&gt;()

// or use init it samply like this
// var array:[Span] =  []
let tmp = span.init()
// you can add element by this method
array.append(tmp)
</code></pre>
","-1","59484391"
"<pre><code>int[] SingleDimensionalArray = new int[2]

int[][] MultiDimensionalArray = new int[3][4]
</code></pre>
","-7","1200621"
"<p>It uses an Object[]. When the array is full it creates a new array which is 50% bigger in size and copies current elements to new array. It happens automatically. </p>
","0","3467965"
"<p>I think it is better to use just <code>var tempArray = [Span]</code></p>
","-1","59484391"
"<p>You can convert a java 8 stream to an array using this simple code block:</p>

<pre><code> String[] myNewArray3 = myNewStream.toArray(String[]::new);
</code></pre>

<p>But let's explain things more, first, let's  Create a list of string filled with three values:</p>

<pre><code>String[] stringList = {""Bachiri"",""Taoufiq"",""Abderrahman""};
</code></pre>

<p>Create a stream from the given Array :</p>

<pre><code>Stream&lt;String&gt; stringStream = Arrays.stream(stringList);
</code></pre>

<p>we can now perform some operations on this stream Ex:</p>

<pre><code>Stream&lt;String&gt; myNewStream = stringStream.map(s -&gt; s.toUpperCase());
</code></pre>

<p>and finally convert it to a java 8 Array using these methods:</p>

<p>1-Classic method (Functional interface)</p>

<pre><code>IntFunction&lt;String[]&gt; intFunction = new IntFunction&lt;String[]&gt;() {
    @Override
    public String[] apply(int value) {
        return new String[value];
    }
};


String[] myNewArray = myNewStream.toArray(intFunction);
</code></pre>

<p>2 -Lambda expression</p>

<pre><code> String[] myNewArray2 = myNewStream.toArray(value -&gt; new String[value]);
</code></pre>

<p>3- Method reference</p>

<pre><code>String[] myNewArray3 = myNewStream.toArray(String[]::new);
</code></pre>

<p>Method reference Explanation:</p>

<p>It's another way of writing a lambda expression that it's strictly equivalent to the other. </p>
","22","23079003"
"<p>The last item in the list is <code>list.size() - 1</code>. The collection is backed by an array and arrays start at index 0.</p>

<p>So element 1 in the list is at index 0 in the array </p>

<p>Element 2 in the list is at index 1 in the array</p>

<p>Element 3 in the list is at index 2 in the array </p>

<p>and so on..</p>
","-1","687833"
"<p>ArrayList is continuous representation of the data . </p>

<p>So if base addr is lets say 64 and you want a element at 4th index and size of each element is 4 bytes so by doing the math we can say at what memory addr to look for 4th index element . So we can land at up at the element directly</p>

<p>On the other hand Linked List we have to traverse node by node and by counting the numbers of node traversed . </p>

<p>SO index works for both of them.For arraylist we can access it directly but in Linked list we have to traverse the intermediate nodes  </p>
","0","43699929"
"<p>As Raedwald pointed out, <code>Collection</code> is an interface so classes implement it rather than subclass it. The Java documentation lists the Java classes that implement it. I feel like that might be what you're looking for: <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html"" rel=""nofollow noreferrer"">Java 8 Collection Interface</a></p>
","0","54858427"
"<p>This code is part of my program for linear searching, I fixed the issue I was facing. But I want explanation about why I was getting exception on charAt(x) and not on charAt(0).</p>

<pre><code>        System.out.println(""Enter Your Data in character"");
        for(x=0;x&lt;char_array.length;x++)
        {
        Scanner input_list_char = new Scanner(System.in);
        char_array[x]=input_list_char.next().charAt(0); //it works
        char_array[x]=input_list_char.next().charAt(x); // give me exception
</code></pre>

<p>}</p>
","0","13878437"
"<p><strong>Generics</strong> solution to covert any <code>List&lt;Type&gt;</code> to <code>String []</code>:</p>

<pre><code>public static  &lt;T&gt; String[] listToArray(List&lt;T&gt; list) {
    String [] array = new String[list.size()];
    for (int i = 0; i &lt; array.length; i++)
        array[i] = list.get(i).toString();
    return array;
}
</code></pre>

<p><strong>Note</strong> You must <code>override toString()</code> method.</p>

<pre><code>class Car {
  private String name;
  public Car(String name) {
    this.name = name;
  }
  public String toString() {
    return name;
  }
}
final List&lt;Car&gt; carList = new ArrayList&lt;Car&gt;();
carList.add(new Car(""BMW""))
carList.add(new Car(""Mercedes""))
carList.add(new Car(""Skoda""))
final String[] carArray = listToArray(carList);
</code></pre>
","6","4042434"
"<pre><code>List&lt;Number&gt; someList = new ArrayList&lt;&gt;();
someList.add(1);
someList.add(5.5);
</code></pre>

<p>Java has <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"" rel=""nofollow noreferrer""><code>List</code></a> interface. And <code>Number</code> - like it says, accepts numbers only.</p>
","0","61982079"
"<p>There are two main ways to make an array:</p>

<p>This one, for an empty array:</p>

<pre><code>int[] array = new int[n]; // ""n"" being the number of spaces to allocate in the array
</code></pre>

<p>And this one, for an initialized array:</p>

<pre><code>int[] array = {1,2,3,4 ...};
</code></pre>

<p>You can also make multidimensional arrays, like this:</p>

<pre><code>int[][] array2d = new int[x][y]; // ""x"" and ""y"" specify the dimensions
int[][] array2d = { {1,2,3 ...}, {4,5,6 ...} ...};
</code></pre>
","15","1200621"
"<p>Using the <code>toArray(IntFunction&lt;A[]&gt; generator)</code> method is indeed a very elegant and safe way to convert (or more correctly, collect) a Stream into an array of the same type of the Stream.</p>

<p>However, if the returned array's type is not important, simply using the <code>toArray()</code> method is both easier <em>and</em> shorter.
For example:</p>

<pre><code>    Stream&lt;Object&gt; args = Stream.of(BigDecimal.ONE, ""Two"", 3);
    System.out.printf(""%s, %s, %s!"", args.toArray());
</code></pre>
","3","23079003"
"<p>You can use <strong><code>Iterator&lt;String&gt;</code></strong> to iterate the elements of the <code>ArrayList&lt;String&gt;</code>:</p>

<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
String[] array = new String[list.size()];
int i = 0;
for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); i++) {
    array[i] = iterator.next();
}
</code></pre>

<p>Now you can retrive elements from <code>String[]</code> using any Loop.</p>
","6","4042434"
"<p><code>Iterable&lt;T&gt;</code> is OK, but there is a small problem. It cannot be used easily in <code>stream()</code> i.e lambda expressions.</p>

<p>If you want so, you should get it's spliterator, and use the class <code>StreamSupport()</code>. </p>
","0","362367"
"<p>This should work:</p>

<pre><code>import java.util.ArrayList;
public class NumberTest {

ArrayList&lt;Object&gt; numbersAlone = new ArrayList&lt;Object&gt;();

public ArrayList&lt;Object&gt; numbersList(Object number){

    if(number instanceof Integer) {
        System.out.println(""This is an Integer: ""+number);
        numbersAlone.add(number);
    }else if(number instanceof Double){
        numbersAlone.add(number);
        System.out.println(""This is a Double: ""+number);
    }else if(number instanceof Float){
        System.out.println(""This is a Float: ""+number);
        numbersAlone.add(number);
    }else if(number instanceof Long){
        System.out.println(""This is a Long: ""+number);
        numbersAlone.add(number);
    }else{
        System.out.println(""This is not a number: ""+number);
    }

    return numbersAlone;
}

public static void main(String[] args)
{
  NumberTest test = new NumberTest();
  float a = 2.356f;  long b = -200000L;
    ArrayList&lt;Object&gt; c = new ArrayList&lt;&gt;();
    for(int x=0; x&lt;10; x++){
      if(x&gt;0 &amp;&amp; x&lt;3){
            c = test.numbersList(3.45);
      }else if(x&gt; 2 &amp;&amp; x&lt;5){
            c = test.numbersList(a);
      }else if(x&gt; 5 &amp;&amp; x&lt;8){
            c = test.numbersList(b);
      }else if(x&gt;7 &amp;&amp; x&lt;=10){
            c = test.numbersList(x);
      }
    }
    System.out.println(c.toString());
}

}
</code></pre>

<p>So create an ArrayList of Objects and put in your numbers. The reverse is the case to get your numbers back. If you want me to add code on how to retrieve the objects, let me know.</p>
","0","61982079"
"<p>Change,</p>

<pre><code>System.out.println(arr[n]);
</code></pre>

<p>to:</p>

<pre><code>System.out.println(Arrays.toString(arr));
</code></pre>
","1","45423224"
"<pre><code>private String[] prepareDeliveryArray(List&lt;DeliveryServiceModel&gt; deliveryServices) {
    String[] delivery = new String[deliveryServices.size()];
    for (int i = 0; i &lt; deliveryServices.size(); i++) {
        delivery[i] = deliveryServices.get(i).getName();
    }
    return delivery;
}
</code></pre>
","1","4042434"
"<p>If stack of Integer boxed objects suites for you then you can just use java.util.Stack implementation from Java Collections.
But if your requirement is to use only primitive types take a look at java.util.Stack <a href=""http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Stack.java"" rel=""nofollow"">implementation</a>. All you need to do to make it work with primitive integer is just replace type of base array and all method parameters and return values. It's simple.</p>

<p>Third option is to use one of 3d party collection libraries, for example <a href=""https://github.com/goldmansachs/gs-collections"" rel=""nofollow"">goldmnan sachs collections</a> if I remember right. They provide such solution already.</p>
","1","35223661"
"<p>System.out.println(arr[n]);
Here is the problem because there's no index ""n"" 
n is the number of elements
You have to loop form 0 to n-1</p>

<pre><code>    for(int i =0;i &lt; n;i++){
System.out.println(arr[i]);

}
</code></pre>
","1","45423224"
"<p>Since you've tagged the question as <code>Java</code>, there's a nice solution - just declare your List like this:</p>

<p><code>List&lt;Number&gt; numberList = new ArrayList&lt;&gt;();</code></p>

<p>and upon <code>numberList.add(x);</code> calls only those <code>x</code> values will be accepted that are representing numbers.</p>
","0","61982079"
"<p>If your application is already using Apache Commons lib, you can slightly modify the accepted answer to not create a new empty array each time:</p>

<pre><code>List&lt;String&gt; list = ..;
String[] array = list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);

// or if using static import
String[] array = list.toArray(EMPTY_STRING_ARRAY);
</code></pre>

<p>There are a few more preallocated empty arrays of different types in <code>ArrayUtils</code>.</p>

<p>Also we can trick JVM to create en empty array for us this way:</p>

<pre><code>String[] array = list.toArray(ArrayUtils.toArray());

// or if using static import
String[] array = list.toArray(toArray());
</code></pre>

<p>But there's really no advantage this way, just a matter of taste, IMO.</p>
","6","4042434"
"<p>According to the <a href=""https://kotlinlang.org/docs/reference/basic-types.html#arrays"" rel=""nofollow noreferrer"">reference</a>, arrays are created in the following way:</p>
<ul>
<li><p>For Java's primitive types there are distinct types <code>IntArray</code>, <code>DoubleArray</code> etc. which store <a href=""https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html"" rel=""nofollow noreferrer"">unboxed</a> values.</p>
<p>They are created with the corresponding constructors and factory functions:</p>
<pre class=""lang-kotlin prettyprint-override""><code>val arrayOfZeros = IntArray(size) //equivalent in Java: new int[size]
val numbersFromOne = IntArray(size) { it + 1 }
val myInts = intArrayOf(1, 1, 2, 3, 5, 8, 13, 21)
</code></pre>
<p>The first one is simillar to that in Java, it just creates a primitive array filled with the default value, e.g. zero for <code>Int</code>, <code>false</code> for <code>Boolean</code>.</p>
</li>
<li><p>Non primitive-arrays are represented by <code>Array&lt;T&gt;</code> class, where <code>T</code> is the items type.</p>
<p><code>T</code> can still be one of types primitive in Java (<code>Int</code>, <code>Boolean</code>,...), but the values inside will be boxed equivalently to Java's <code>Integer</code>, <code>Double</code> and so on.</p>
<p>Also, <code>T</code> can be both <a href=""https://kotlinlang.org/docs/reference/null-safety.html"" rel=""nofollow noreferrer"">nullable and non-null</a> like <code>String</code> and <code>String?</code>.</p>
<p>These are created in a similar way:</p>
<pre class=""lang-kotlin prettyprint-override""><code>val nulls = arrayOfNulls&lt;String&gt;(size) //equivalent in Java: new String[size]
val strings = Array(size) { &quot;n = $it&quot; } 
val myStrings = arrayOf(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;)

val boxedInts = arrayOfNulls&lt;Int&gt;(size) //equivalent in Java: new Integer[size]
val boxedZeros = Array(size) { 0 }
</code></pre>
</li>
</ul>
","155","35253368"
"<p>your code works fine for reversing the array of elements but arrayIndexOutOfBound exception is raised due to System.out.println(arr[n]). Remember array index starts from zero.For n size array, the range will be [0,(n-1)] ie., if n=5 range will be 0 to 4. </p>

<pre><code>for(int k=0;k&lt;arr.length;k++)
{ 
   System.out.println(arr[k]);
}
</code></pre>
","0","45423224"
"<p>The best way to remember if rows or columns come first would be writing a comment and mentioning it.</p>
<p>Java does not store a 2D Array as a table with specified rows and columns, it stores it as an array of arrays, like many other answers explain. So you can decide, if the first or second dimension is your row. You just have to read the array depending on that.</p>
<p>So, since I get confused by this all the time myself, I always write a comment that tells me, which dimension of the 2d Array is my row, and which is my column.</p>
","1","11641985"
"<p>If your project is already using Apache Commons lib, you can stick to <code>ArrayUtils.toArray()</code> method.</p>

<pre><code>String[] arr = ArrayUtils.toArray(""The string"");
// or if using static import
String[] arr = toArray(""The string"");
</code></pre>

<p>Even if using static import it is still more verbose than the accepted answer:</p>

<pre><code>String[] arr = {""The string""};
</code></pre>

<p>But it comes very handy when compact array initializer syntax is not allowed. </p>

<p>Some examples:</p>

<pre><code>someMethod(toArray(""The string""), /* other params */);

return toArray(""The string"");

@DataProvider
public Object[][] someDataProvider() {
    return rangeClosed(-12, +12)
        .map(HOURS::toMillis).boxed()
        .map(ArrayUtils::toArray)
        .toArray(Object[][]::new);
}
</code></pre>

<p>You can imagine any other examples yourself.</p>

<p>Also note, that the <code>ArrayUtils.toArray()</code> can wrap an arbitrary number of objects into array, not only a single one.</p>
","9","3582502"
"<p>All you need to do is use size() to get the last value of the Arraylist. 
For ex. if you ArrayList of integers, then to get last value you will have to</p>

<pre><code>int lastValue = arrList.get(arrList.size()-1);
</code></pre>

<p>Remember, elements in an Arraylist can be accessed using index values. Therefore, ArrayLists are generally used to search items.</p>
","-4","687833"
"<p>2D arrays can be declared like <code>int[][] matrix = new int[10][10];</code> If you need 2D array with different number of values in rows, than you have to create each row by yourself:</p>

<pre><code>int [][] matrix = new int[10][];
matrix[0] = new int[10];
matrix[1] = new int[20];
//...
</code></pre>

<p>To iterate over <code>matrix</code> you need</p>

<pre><code>for (int[] row : matrix) {
    for (int value : row) {
        sum += value;
    }
}
</code></pre>
","1","36375074"
"<pre><code>public class UniqueElementinAnArray 
{
    public static void main(String[] args) 
    {
        int[] a = {10,10,10,10,10,100};
        int[] output = new int[a.length];
        int count = 0;
        int num = 0;

        //Iterate over an array
        for(int i=0; i&lt;a.length; i++)
        {
            num=a[i];
            boolean flag = check(output,num);
            if(flag==false)
            {
                output[count]=num;
                ++count;
            }

        }

        //print the all the elements from an array except zero's (0)
        for (int i : output) 
        {
            if(i!=0 )
                System.out.print(i+""  "");
        }

    }

    /***
     * If a next number from an array is already exists in unique array then return true else false
     * @param arr   Unique number array. Initially this array is an empty.
     * @param num   Number to be search in unique array. Whether it is duplicate or unique.
     * @return  true: If a number is already exists in an array else false 
     */
    public static boolean check(int[] arr, int num)
    {
        boolean flag = false;
        for(int i=0;i&lt;arr.length; i++)
        {
            if(arr[i]==num)
            {
                flag = true;
                break;
            }
        }
        return flag;
    }

}
</code></pre>
","-4","49923185"
"<p>The <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html"" rel=""nofollow noreferrer"">javadoc</a> states:</p>
<blockquote>
<p>Each <code>ArrayList</code> instance has a <em>capacity</em>. The capacity is the size of the array used to store the elements in the list. It is always at least as large as the list size. As elements are added to an <code>ArrayList</code>, its capacity grows automatically. The details of the growth policy are not specified beyond the fact that adding an element has constant amortized time cost.</p>
</blockquote>
<p>Based on the above:</p>
<blockquote>
<p>What happens when there are less elements in <code>ArrayList</code> than its capacity?</p>
</blockquote>
<p>Given that the backing array's size is the &quot;capacity&quot;, there will be unused slots in the array.</p>
<p>(The implementation ensures that those unused slots contain <code>null</code> to avoid any memory leaks.)</p>
<blockquote>
<p>Say capacity is 10, I add 5 elements to <code>ArrayList</code>. Would they take 5 or 10 elements size in memory?</p>
</blockquote>
<p>The size would be the size of 10 object <em>references</em>, since an <code>ArrayList</code> holds references to objects ... not the actual element objects themselves.</p>
","4","63514197"
"<pre><code>   //method to count your number of Occurrences in Your 2-D Array.    
private int getAllOccurence(int [] arr, int yourNumberToSearch){ 
 int count = 0;
for (int[] row : arr) {      //loop will able to get all Rows

    for (int value : row) {      //loop enables you to get each values of each Row.

       // This if Statement will check wheather Your Number exists in array or not
        if(value == yourNumberToSearch) 
              count++; //count increase each times by one If Number exists in a array.
    }
  }
  return count;
}
</code></pre>

<blockquote>
  <p>Here You may try this. You will get Your Answer.</p>
</blockquote>
","0","36375074"
"<p>If you want to allow a user to add a bunch of new MyObjects to the list, you can do it with a for loop:
Let's say I'm creating an ArrayList of Rectangle objects, and each Rectangle has two parameters- length and width.</p>

<pre><code>//here I will create my ArrayList:

ArrayList &lt;Rectangle&gt; rectangles= new ArrayList &lt;&gt;(3); 

int length;
int width;

for(int index =0; index &lt;3;index++)
{JOptionPane.showMessageDialog(null, ""Rectangle "" + (index + 1));
 length = JOptionPane.showInputDialog(""Enter length"");
 width = JOptionPane.showInputDialog(""Enter width"");

 //Now I will create my Rectangle and add it to my rectangles ArrayList:

 rectangles.add(new Rectangle(length,width));

//This passes the length and width values to the rectangle constructor,
  which will create a new Rectangle and add it to the ArrayList.
</code></pre>

<p>}</p>
","2","3982550"
"<p>To input a character array from user</p>

<pre><code>import java.io.*;
class CharArrayInput {

public static void main(String args[]) throws IOException {

    /*using InputReader and BufferedReader class 
      to fill array of characters from user input.
    */
    InputStreamReader ir = new InputStreamReader(System.in);
    BufferedReader br = new BufferedReader(ir);
    //Take size of array from user.
    System.out.println(""Please enter size of array"")
    int n = Integer.parseInt(br.readLine());
    //Declare a character array
    char arr[] = new char[n];
    //loop to take input of array elements
    for(int i=0; i &lt; n; i++){
    arr[i] = (char)br.read();
    }   

   }
  }
</code></pre>
","0","13878437"
"<p>On Java 14 you can do this</p>
<pre><code>List&lt;String&gt; strings = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);
</code></pre>
","0","6026813"
"<p>For creating arrays of class Objects you can use the <code>java.util.ArrayList</code>. to define an array:</p>

<pre><code>public ArrayList&lt;ClassName&gt; arrayName;
arrayName = new ArrayList&lt;ClassName&gt;();
</code></pre>

<p>Assign values to the array:</p>

<pre><code>arrayName.add(new ClassName(class parameters go here);
</code></pre>

<p>Read from the array:</p>

<pre><code>ClassName variableName = arrayName.get(index);
</code></pre>

<p>Note:</p>

<p><code>variableName</code> is a reference to the array meaning that manipulating <code>variableName</code> will manipulate <code>arrayName</code></p>

<p>for loops:</p>

<pre><code>//repeats for every value in the array
for (ClassName variableName : arrayName){
}
//Note that using this for loop prevents you from editing arrayName
</code></pre>

<p>for loop that allows you to edit <code>arrayName</code> (conventional for loop):</p>

<pre><code>for (int i = 0; i &lt; arrayName.size(); i++){
    //manipulate array here
}
</code></pre>
","6","1200621"
"<p>In c++ (distant, dusty memory) I think it was a little easier to look at the code and understand arrays than it is in Java sometimes.  Both are row major.  This illustration worked for me in helping to understand.</p>
<p>Given this code for a 2d array of strings...</p>
<pre><code>    String[][] messages; 
    messages = new String[][] {
        {&quot;CAT&quot;,&quot;DOG&quot;,&quot;YIN&quot;,&quot;BLACK&quot;,&quot;HIGH&quot;,&quot;DAY&quot;},
        {&quot;kitten&quot;,&quot;puppy&quot;,&quot;yang&quot;,&quot;white&quot;,&quot;low&quot;,&quot;night&quot;} 
    };
    
    int row = messages.length;
    int col = messages[0].length;
    
</code></pre>
<p>Naming my ints as if it were a 2d array (row, col) we see the values.</p>
<pre><code>row = (int) 2
col = (int) 6
</code></pre>
<p>The last two lines of code, where we try to determine size and set them to <code>row</code> and <code>col</code> does not look all that intuitive and its not necessarily right.</p>
<p>What youre really dealing with here is this (note new variable names to illustrate):</p>
<pre><code>int numOfArraysIn = messages.length;
int numOfElementsIn0 = messages[0].length;
int numOfElementsIn1 = messages[1].length;
</code></pre>
<p>Where <code>messages.length</code> tells you <code>messages</code> holds two arrays. <strong>An array of arrays.</strong></p>
<p>AND then <code>messages[x].length</code> yields the size of each of the individual arrays <code>0</code> <code>1</code> inside <code>messages</code>.</p>
<pre><code>numOfArraysIn = (int) 2
numOfElementsIn0 = (int) 6
numOfElementsIn1 = (int) 6
</code></pre>
<p>When we print with a for each loop....</p>
<pre><code>for (String str : messages[0])
        System.out.print(str);
for (String str : messages[1])
        System.out.print(str);

CATDOGYINBLACKHIGHDAYkittenpuppyyangwhitelownight
</code></pre>
<p>Trying to drop the brackets and print like this gives an error</p>
<pre><code>for (String str : messages)
        System.out.print(str);

incompatible types: String[] cannot be converted to String
</code></pre>
<p>The above is important to understand while setting up loops that use <code>.length</code> to limit the step thru the array.</p>
","0","11641985"
"<p>You can convert List to String array by using this method:</p>

<pre><code> Object[] stringlist=list.toArray();
</code></pre>

<p>The complete example:</p>

<pre><code>ArrayList&lt;String&gt; list=new ArrayList&lt;&gt;();
    list.add(""Abc"");
    list.add(""xyz"");

    Object[] stringlist=list.toArray();

    for(int i = 0; i &lt; stringlist.length ; i++)
    {
          Log.wtf(""list data:"",(String)stringlist[i]);
    }
</code></pre>
","2","4042434"
"<p>//more fun ...............</p>

<pre><code>public class test3 {

    public static void main(String args[])
    {
        char crr[]=new char[100];
        Scanner inputs=new Scanner(System.in);
        System.out.println(""enter the string"");
        for(int i=0;i&lt;10;i++)
        {
            char c=inputs.next().charAt(0);
            crr[i]= c;
        }
        for(int i=0;i&lt;10;i++)
        {
            System.out.println("" "" +crr[i]);
        }
    }
}
</code></pre>
","1","13878437"
"<p>In TStringGrid cells property Col come first.</p>
<pre><code>Property Cells[ACol, ARow: Integer]: string read GetCells write SetCells;
</code></pre>
<p>So the assignment <code>StringGrid1.cells[2, 1] := 'abcde';</code> the value is displayed in the third column second row.</p>
","0","11641985"
"<p>There is no direct indexOf function in java arrays.</p>
","2","4962361"
"<p>As of <strong>Java 8</strong> and Stream API you can use <code>Arrays.stream</code> and <code>Collectors.toList</code>:</p>
<pre><code>String[] array = new String[]{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;};
List&lt;String&gt; list = Arrays.stream(array).collect(Collectors.toList());
</code></pre>
<p>This is practical especially if you intend to perform further operations on the list.</p>
<pre><code>String[] array = new String[]{&quot;a&quot;, &quot;bb&quot;, &quot;ccc&quot;};
List&lt;String&gt; list = Arrays.stream(array)
                          .filter(str -&gt; str.length() &gt; 1)
                          .map(str -&gt; str + &quot;!&quot;)
                          .collect(Collectors.toList());
</code></pre>
","0","6026813"
"<p>Starting from Java-11, one can alternatively use the API <a href=""https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/Collection.html#toArray(java.util.function.IntFunction)"" rel=""noreferrer""><strong><code>Collection.toArray(IntFunction&lt;T[]&gt; generator)</code></a></strong> to achieve the same as:</p>

<pre><code>List&lt;String&gt; list = List.of(""x"",""y"",""z"");
String[] arrayBeforeJDK11 = list.toArray(new String[0]);
String[] arrayAfterJDK11 = list.toArray(String[]::new); // similar to Stream.toArray
</code></pre>
","29","4042434"
"<p>Use the following code, download common lang jar from apache url:<a href=""http://mirror.cc.columbia.edu/pub/software/apache//commons/lang/binaries/commons-lang3-3.3.2-bin.zip"" rel=""nofollow"">http://mirror.cc.columbia.edu/pub/software/apache//commons/lang/binaries/commons-lang3-3.3.2-bin.zip</a></p>

<pre><code>String[] arr = {""1"",""ab"",""aaa"",""sdfsdfew"",""ssdd""};
for(String s : arr){
    if(s.length()&gt;3){
        arr = ArrayUtils.removeElement(arr, s);
    }
}

System.out.println(ArrayUtils.toString(arr));
</code></pre>
","0","25115108"
"<p>In Java 8, it can be done using</p>

<pre><code>String[] arrayFromList = fromlist.stream().toArray(String[]::new);
</code></pre>
","7","4042434"
"<p>It's the same thing, both works but the second one is discouraged.
The first one:</p>

<pre><code>String[] myStringArray;
</code></pre>

<p>Is the default and the most used.</p>
","1","26196109"
"<p>If you are looking save some memory, a slight modification to Damian Vash's answer would help (in this case any remaining chunk is not allocated a complete 64 byte block size, as well...)</p>

<pre><code>private byte[][] splitChunks(byte[] source)
{
    byte[][] ret = new byte[(int)Math.ceil(source.length / (double)CHUNK_SIZE)][];
    int start = 0;
    for(int i = 0; i &lt; ret.length; i++) {
        if(start + CHUNK_SIZE &gt; source.length) {
            ret[i] = new byte[source.length-start];
            System.arraycopy(source, start, ret[i], 0, source.length - start);
        } 
        else {
            ret[i] = new byte[CHUNK_SIZE];
            System.arraycopy(source, start, ret[i], 0, CHUNK_SIZE);
        }
        start += CHUNK_SIZE ;
    }
    return ret;
}
</code></pre>
","3","3405195"
"<p>The javadoc of <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html"" rel=""nofollow""><code>CopyOnWriteArrayList</code></a> states</p>

<blockquote>
  <p>A thread-safe variant of <code>ArrayList</code> in which <strong>all mutative operations</strong>
  (add, set, and so on) are implemented by making a fresh copy of the
  underlying array.</p>
</blockquote>

<p>While the javadoc of <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List-"" rel=""nofollow""><code>Collections#unmodifiableList(List)</code></a> states</p>

<blockquote>
  <p>Returns an <strong>unmodifiable</strong> view of the specified list. This method allows
  modules to provide users with ""read-only"" access to internal lists.</p>
  
  <p>Query operations on the returned list ""read through"" to the specified
  list, and <strong>attempts to modify the returned list, whether direct or via
  its iterator, result in an <code>UnsupportedOperationException</code></strong>.</p>
</blockquote>

<p>So, no, you can't get the features provided by <code>CopyOnWriteArrayList</code> with a <code>List</code> returned by <code>Collections#unmodifiableList(List)</code>.</p>
","2","27204977"
"<p>In Java 11, we can use the <code>Collection.toArray(generator)</code> method. The following code will create a new array of strings:</p>

<pre><code>List&lt;String&gt; list = List.of(""one"", ""two"", ""three"");
String[] array = list.toArray(String[]::new)
</code></pre>

<p>from <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Collection.html#toArray(java.util.function.IntFunction)"" rel=""noreferrer"">java.base's  <code>java.util.Collection.toArray()</code></a>.</p>
","5","4042434"
"<p>Strictly speaking about </p>

<pre><code> Maximum number of dimensions in a Java array
</code></pre>

<p>is only one dimensional array is possible in java. because under the hood java treat multidimensional arrays as array of arrays.</p>

<p>Proof of concept: <a href=""http://www.willamette.edu/~gorr/classes/cs231/lectures/chapter9/arrays2d.htm"" rel=""nofollow"">http://www.willamette.edu/~gorr/classes/cs231/lectures/chapter9/arrays2d.htm</a></p>

<p>that's why its possible to have ragged arrays in Java as well!</p>
","0","4060538"
"<p>The below code shows you how to do the transformation you need:</p>

<pre><code>String str = ""g3"";
System.out.println(str.charAt(0) - 'a');
System.out.println(str.charAt(1) - '1');
</code></pre>

<p>will print</p>

<pre><code>6
2
</code></pre>

<p>so <br/>
<code>str.charAt(0) - 'a'</code> to transform the letter <br/>
<code>str.charAt(1) - '1'</code> to transform the number</p>
","2","53177769"
"<p>First, consider that character code points are arranged alphabetically. Since characters in Java are represented as unsigned integers, you could subtract the code point of <code>'a'</code> from another character to see how far it is from <code>'a'</code>: <code>'a'-'a' = 0</code>, <code>'b'-'a' = 1</code>, <code>'c'-'a' = 2</code>, and so on. Assuming that the first character of a two-character string is a lowercase letter in the a..h range, you can get your first ""coordinate"" like this:</p>

<pre><code>int hPos = coord.charAt(0)-'a';
</code></pre>

<p>You can do the same thing for the digit:</p>

<pre><code>int vPos = coord.charAt(1)-'1';
</code></pre>

<p>In addition, <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#digit(char,%20int)"" rel=""nofollow noreferrer"">Java supplies a way to extract a digit from a numeric codepoint.</a> Since <code>a..h</code> are considered digits in base-18, you could also use this approach:</p>

<pre><code>int hPos = Character.digit(coord.charAt(0), 18) - 10;
int vPos = Character.digit(coord.charAt(1), 10) - 1;
</code></pre>
","2","53177769"
"<p>If your use case is that you are transforming an array in isolation (not as part of a table), then the combination of <code>explode</code>, <code>lower</code>, and <code>collect_list</code> should do the trick.  For example (please pardon the horrible execution times, I'm running on an underpowered VM):</p>

<pre><code>hive&gt; SELECT collect_list(lower(val))
    &gt; FROM (SELECT explode(array('AN', 'EXAMPLE', 'ARRAY')) AS val) t;
...
... Lots of MapReduce spam
...
MapReduce Total cumulative CPU time: 4 seconds 10 msec
Ended Job = job_1422453239049_0017
MapReduce Jobs Launched: 
Job 0: Map: 1  Reduce: 1   Cumulative CPU: 4.01 sec   HDFS Read: 283 HDFS Write: 17 SUCCESS
Total MapReduce CPU Time Spent: 4 seconds 10 msec
OK
[""an"",""example"",""array""]
Time taken: 33.05 seconds, Fetched: 1 row(s)
</code></pre>

<p>(Note:  Replace <code>array('AN', 'EXAMPLE', 'ARRAY')</code> in the above query with whichever expression you are using to generate the array.</p>

<p>If instead your use case is such that your arrays stored in a column of a Hive table and you need to apply the lowercase transformation to them, to my knowledge you have two principle options:</p>

<p>Approach #1:  Use the combination of <code>explode</code> and <code>LATERAL VIEW</code> to separate the array.  Use <code>lower</code> to transform the individual elements, and then <code>collect_list</code> to glue them back together.  A simple example with silly made-up data:</p>

<pre><code>hive&gt; DESCRIBE foo;
OK
id                          int                                 
data                        array&lt;string&gt;                       
Time taken: 0.774 seconds, Fetched: 2 row(s)
hive&gt; SELECT * FROM foo;
OK
1001        [""ONE"",""TWO"",""THREE""]
1002        [""FOUR"",""FIVE"",""SIX"",""SEVEN""]
Time taken: 0.434 seconds, Fetched: 2 row(s)

hive&gt; SELECT
    &gt;   id, collect_list(lower(exploded))
    &gt; FROM
    &gt;   foo LATERAL VIEW explode(data) exploded_table AS exploded
    &gt; GROUP BY id;
...
... Lots of MapReduce spam
...
MapReduce Total cumulative CPU time: 3 seconds 310 msec
Ended Job = job_1422453239049_0014
MapReduce Jobs Launched:
Job 0: Map: 1  Reduce: 1   Cumulative CPU: 3.31 sec   HDFS Read: 358 HDFS Write: 44 SUCCESS
Total MapReduce CPU Time Spent: 3 seconds 310 msec
OK
1001        [""one"",""two"",""three""]
1002        [""four"",""five"",""six"",""seven""]
Time taken: 34.268 seconds, Fetched: 2 row(s)
</code></pre>

<p>Approach #2:  Write a simple UDF to apply the transformation.  Something like:</p>

<pre><code>package my.package_name;

import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.hive.ql.exec.UDF;
import org.apache.hadoop.io.Text;

public class LowerArray extends UDF {
  public List&lt;Text&gt; evaluate(List&lt;Text&gt; input) {
    List&lt;Text&gt; output = new ArrayList&lt;Text&gt;();
    for (Text element : input) {
      output.add(new Text(element.toString().toLowerCase()));
    }
    return output;
  }
}
</code></pre>

<p>And then invoke the UDF directly on the data:</p>

<pre><code>hive&gt; ADD JAR my_jar.jar;
Added my_jar.jar to class path
Added resource: my_jar.jar
hive&gt; CREATE TEMPORARY FUNCTION lower_array AS 'my.package_name.LowerArray';
OK
Time taken: 2.803 seconds
hive&gt; SELECT id, lower_array(data) FROM foo;
...
... Lots of MapReduce spam
...
MapReduce Total cumulative CPU time: 2 seconds 760 msec
Ended Job = job_1422453239049_0015
MapReduce Jobs Launched:
Job 0: Map: 1   Cumulative CPU: 2.76 sec   HDFS Read: 358 HDFS Write: 44 SUCCESS
Total MapReduce CPU Time Spent: 2 seconds 760 msec
OK  
1001        [""one"",""two"",""three""]
1002        [""four"",""five"",""six"",""seven""]
Time taken: 27.243 seconds, Fetched: 2 row(s)
</code></pre>

<p>There are some trade-offs between the two approaches.  #2 will probably be more efficient at runtime in general than #1, since the <code>GROUP BY</code> clause in #1 forces a reduction stage while the UDF approach does not.  However, #1 does everything in HiveQL and is a bit more easily generalized (you can replace <code>lower</code> with some other kind of string transformation in the query if you needed to).  With the UDF approach of #2, you potentially have to write a new UDF for each different kind of transformation you want to apply.</p>
","4","28194623"
"<p>Since a chess board is well defined, another approach would be to use an enum. For example:</p>

<pre><code>    public static void main(String[] args) {
        ChessPosition cp = ChessPosition.valueOf(""A1"");
        System.out.println(cp);

        cp = ChessPosition.valueOf(""H8"");
        System.out.println(cp);
    }

    public enum ChessPosition {

        A1(0, 0),
        // ...
        H8(7, 7);


        private final int row;
        private final int column;

        private ChessPosition(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public String toString() {
            return name() + "" row="" + getRow() + "", column="" + getColumn();
        }
    }
</code></pre>
","2","53177769"
"<blockquote>
<p>When an Double Integer is given</p>
</blockquote>
<p>This statement is wrong , As @Mike Kobit mentioned , double is not same as integer , but for an Integer Array</p>
<h1>Try this</h1>
<pre><code>Integer i[]=new Integer[]{1,2,3,4,5};
List&lt;Integer&gt; list=Arrays.asList(i);
System.out.println(list);  ------&gt; Before Shuffling
Collections.shuffle(list);
System.out.println(list); -------&gt; After shuffling
list.toArray(i);  -----&gt; Convert list back to array
</code></pre>
<p>Output</p>
<pre><code>[1, 2, 3, 4, 5] --&gt;Before Shuffling
[1, 3, 4, 2, 5] --&gt; After Shuffling
</code></pre>
","1","29642256"
"<p>To sum up, the quick linkedlist method:</p>

<pre><code>List&lt;String&gt; llist = new LinkedList&lt;String&gt;(Arrays.asList(oldArray));
llist.remove(0);
</code></pre>
","0","3663944"
"<pre><code>    List&lt;String&gt; list = new ArrayList&lt;&gt;();
    list.add(""a"");
    list.add(""b"");
    list.add(""c"");
    String [] strArry= list.stream().toArray(size -&gt; new String[size]);
</code></pre>

<p>Per comments, I have added a paragraph to explain how the conversion works. 
First, List is converted to a String stream. Then it uses Stream.toArray to convert the elements in the stream to an Array. In the last statement above ""size -> new String[size]"" is actually an IntFunction function that allocates a String array with the size of the String stream. The statement is identical to</p>

<pre><code>IntFunction&lt;String []&gt; allocateFunc = size -&gt; { 
return new String[size];
};   
String [] strArry= list.stream().toArray(allocateFunc);
</code></pre>
","4","4042434"
"<p>An array can contain only a single type of value, but you can create array of object.</p>

<p>this might help you - <a href=""http://www.javawithus.com/tutorial/array-of-objects"" rel=""nofollow noreferrer"">http://www.javawithus.com/tutorial/array-of-objects</a></p>
","1","45006250"
"<p>If you want to initialise the array to a size specified by the user, just use a variable for the size.</p>

<pre><code>int size = 3;
int[] array = new int[size];
</code></pre>
","2","30977774"
"<p>Yes you can use java.lang.reflect.Array class to create an array.
See the following code where we can create an array of int.</p>

<pre><code>int[] intArray = (int[]) java.lang.reflect.Array.newInstance(int.class, 5);
</code></pre>

<p>The first parameter is the type of each element in the array.
The second parameter indicates the number of elements in the array.</p>
","0","30977774"
"<p><strong>ArrayList</strong> internally uses a dynamic array to store the elements so manipulation with 
  ArrayList is slow because it internally uses an array.</p>

<p>If any element is removed from the array, all the bits are shifted in memory while <strong>LinkedList</strong> internally uses a doubly linked list to store the elements.</p>

<p>Manipulation with LinkedList is faster than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.</p>
","2","1035107"
"<p>Try this:</p>

<pre><code>public static void main(String[] args){
    Scanner sc = new Scanner(System.in);
    System.out.println(""Enter the size of your array:"");
    int arraySize = sc.nextInt();

    int[] yourArray = new int[arraySize];
    //Do something with your array
}
</code></pre>

<p>Note that this does not check for invalid input. You should add checks to confirm the input is actually <strong>positive</strong> and an <strong>integer</strong>.</p>
","2","30977774"
"<pre><code>import java.util.LinkedList;
import java.util.Queue;

public class TwoDIterator {
int[][] array;
int outerCursor;
int lastArrayLen;
int totalElems;
int tracker = 1;
Queue&lt;Integer&gt; myQueue = new LinkedList&lt;&gt;();

public TwoDIterator(int[][] arr) {
    this.array = arr;
    this.outerCursor = 0;
    for (int i = 0; i &lt; arr.length; i++) {
        for (int j = 0; j &lt; arr[i].length; j++) {
            totalElems += 1;
        }
    }
    for (int i = 0; i &lt; array[0].length; i++) {
        myQueue.add(array[0][i]);
    }
}

public boolean hasNext() {
    return array.length &gt; outerCursor &amp;&amp; totalElems &gt;= tracker;
}

public Integer next() {
    if (myQueue.isEmpty()) {
        outerCursor++;
        for (int i = 0; i &lt; array[outerCursor].length; i++) {
            myQueue.add(array[outerCursor][i]);
        }
        if (!myQueue.isEmpty()) {
            tracker++;
            return myQueue.remove();
        }
    } else {
        tracker++;
        return myQueue.remove();
    }
    return -1;
}

public static void main(String[] args) {
    int[][] arr = { { 1, 2, 3 }, { 1, 3 }, { 1, 2, 5 } };
    TwoDIterator iter = new TwoDIterator(arr);
    while (iter.hasNext()) {
        System.out.println(iter.next());
    }
}
}
</code></pre>
","0","7370065"
"<blockquote>
  <p>I should not increase the array size by using Array copy or I should not use Arraylist</p>
</blockquote>

<p>If you can't use <code>Arrays.copy()</code> and you can't use <code>ArrayList</code>, then just do the resize yourself, e.g.:</p>

<pre><code>public static String[] increaseSize(String[] array, int newLength) {
    if (array.length &gt;= newLength)
        return array;
    String[] newArray = new String[newLength];
    for (int i = 0; i &lt; array.length; i++)
        newArray[i] = array[i];
    return newArray;
}
</code></pre>

<p>Since Java arrays are <strong>fixed-size</strong>, the only way to change the size is to create a new array and copy the elements. Whether doing it yourself, or using some API methods to help you, that's what has to happen.</p>

<p>There is no such thing as a <em>dynamically-sized array</em> in Java.</p>
","3","59369156"
"<p>No, <code>int[] i</code> is the same as <code>int i[]</code>, but the latter one is discouraged.</p>

<p>See <a href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""nofollow noreferrer"">the official documentation on Arrays</a>:</p>

<blockquote>
  <p>However, convention discourages this form; the brackets identify the array type and should appear with the type designation.</p>
</blockquote>
","2","45970777"
"<p>An array of characters is just a linear array of <code>char</code> values. An array can be anything, primitive or object; <code>Object[]</code>, <code>char[]</code>, <code>Comparable[]</code> and an array of a class named <code>Car</code> (<code>Car[]</code>) are all valid arrays.</p>
","1","33071859"
"<pre><code>    String DELIMETER = File.separator + ""."";
    List&lt;String&gt; orginalList = new CopyOnWriteArrayList&lt;&gt;(Arrays.asList(listOfFileNames));
    Set&lt;String&gt; setOfuniqueExtension = new TreeSet&lt;&gt;();

    for (String item : listOfFileNames) {
        if (item.contains(""."")) {
            String[] split = item.split(DELIMETER);
            String temp = ""."" + split[split.length - 1];
            setOfuniqueExtension.add(temp);
        }
    }

    List&lt;String&gt; finalListOfAllFiles = new LinkedList&lt;&gt;();
    setOfuniqueExtension.stream().forEach((s1) -&gt; {
        for (int i = 0; i &lt; orginalList.size(); i++) {
            if (orginalList.get(i).contains(s1)) {
                finalListOfAllFiles.add(orginalList.get(i));
                orginalList.remove(orginalList.get(i));
                i--;
            }
        }
    });

    orginalList.stream().filter((s1) -&gt; (!finalListOfAllFiles.contains(s1))).forEach((s1) -&gt; {
        finalListOfAllFiles.add(s1);
    });

    return finalListOfAllFiles;
</code></pre>
","1","440430"
"<p>What you can do is :</p>

<ul>
<li>Skip the first row if it has X Y Z.</li>
<li>Declare two more ArrayList to store Y and Z column. </li>
</ul>

<p>You can do it like this :</p>

<pre><code>  public class FileParser  {
    public ArrayList&lt;String&gt; parseFile(String fileName){
    String csvFile = fileName;
    BufferedReader br = null;
    String line = """";
    final String DELIMITER = "","";
    ArrayList&lt;String&gt; dataX = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; dataY = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; dataZ = new ArrayList&lt;String&gt;();
     try {
         int counter = 0;
         int N = 10;
          br = new BufferedReader(new FileReader(csvFile));
          while ((line = br.readLine()) != null &amp;&amp; counter &lt; N) {
          if(counter &gt; 0){
            String[] dataRow = line.split(DELIMITER);
            dataX.add(dataRow[0]);
            dataY.add(dataRow[1]);
            dataZ.add(dataRow[2]);
        }
        counter++;
    }

  } catch (FileNotFoundException e) {
    e.printStackTrace();
 } catch (IOException e) {
    e.printStackTrace();
 } finally {
    if (br != null) {
        try {
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

 return data;
}
</code></pre>
","0","34731546"
"<p>How about this?</p>

<pre><code>ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;();
String[][] list = new String[3][2];
list[0][0] = ""a"";
list[0][1] = ""b"";
list[1][0] = ""c"";
list[1][1] = ""d"";
list[2][0] = ""e"";
list[2][1] = ""f"";

for (String[] sublist : list) {
    for (String string : sublist) {
        arrayList.add(string);
    }
}
System.out.println(arrayList);
</code></pre>

<p>This might not be the best way, but it works.</p>

<p>Good luck.</p>
","0","46939297"
"<p>as i understand is that </p>

<blockquote>
  <p>ArrayList class implements List interface and 
  <strong>(as interface only extends other interface)</strong>
  List interface extends Collection interface.
  while talking about arraylist when we initialize in memory it reserve by default space <strong>10</strong> > and create array of Integer which you normally use. when this this array is full then the another array of interger is created which is greater then default size. </p>
</blockquote>

<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
</code></pre>

<blockquote>
  <p>now in memory as => Integer[] list = new Integer[10];</p>
  
  <p>now suppose that you enter 1,2,3,4,5,6,7,8,9,10 array is full now and what happen when you enter <strong>11</strong> in the memory another array of Integer is created which is greater then by default and all element in old array is copied in new array. Internally arraylist user Object[] array.</p>
</blockquote>

<p><strong>thats how arrayList work</strong></p>
","0","3467965"
"<p>Directly, No. It is not possible. This is because an ArrayList is one dimensional, while your array is two dimensional. You have two options you can work with,</p>

<ul>
<li>Convert your 2d array into an array of ArrayLists</li>
<li>flatten your 2d array into a 1d array, then convert that into an ArrayList</li>
</ul>
","0","46939297"
"<p>Another case when a zero length array is useful is when copying a two dimensional array. I can write:</p>

<pre><code>public int[][] copyArray(int[][] array){
     int[][] newArray = new int[array.length][0];
     for(int i=0;i&lt;array.length;i++){
         newArray[i] = array[i];
     }
     return newArray;
</code></pre>

<p>Being that every array reference in array is being overwritten, initializing them as refernces to zero length arrays is most efficient.</p>
","0","4612471"
"<p>Convert text to string array where separating each value by comma, and trim every field, for example:</p>

<pre><code>String[] stringArray = Arrays.stream(line.split("","")).map(String::trim).toArray(String[]::new);
</code></pre>
","9","23079003"
"<p>You can do it in a few ways.All the ways are technically the same but using Lambda would simplify some of the code.
Lets say we initialize a List first with String, call it persons.</p>

<pre><code>List&lt;String&gt; persons = new ArrayList&lt;String&gt;(){{add(""a""); add(""b""); add(""c"");}};
Stream&lt;String&gt; stream = persons.stream();
</code></pre>

<p>Now you can use either of the following ways.</p>

<ol>
<li><p>Using the Lambda Expresiion to create a new StringArray with defined size.</p>

<p>String[] stringArray = stream.toArray(size->new String[size]);</p></li>
<li><p>Using the method reference directly.</p>

<p>String[] stringArray = stream.toArray(String[]::new);</p></li>
</ol>
","-2","23079003"
"<pre><code>Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 4, 5, 6);

int[] arr=   stream.mapToInt(x-&gt;x.intValue()).toArray();
</code></pre>
","0","23079003"
"<p>You're able to sort an ArrayList if the elements implement Comparable. For example, Integers can be sorted with sort():</p>
<pre><code>Collections.sort(arrayList)
</code></pre>
<blockquote>
<p>Lists (and arrays) of objects that implement this interface can be
sorted automatically by Collections.sort (and Arrays.sort).</p>
<p>from <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html</a></p>
</blockquote>
","2","41906559"
"<p>Yes, you can store them in a <code>char[]</code> or <code>String[]</code>:</p>

<pre><code>char[] chars = new char[10];
chars[0] = '+';

String[] array = new String[10];
array[0] = ""+"";
</code></pre>

<p>A better way is use some kind of <code>Collection</code>, for example, <code>java.util.List</code>:</p>

<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();
list.add(""+"");
list.add(""-"");
list.add(""*"");
list.add(""/"");
</code></pre>
","1","50784740"
"<p>Technically you <strong>cannot store operators</strong> in array or in variable. </p>

<p>Instead what you can do is store <strong>symbols</strong> of arithmetic operators in String or Character arrays.</p>

<p>Which then you can interpret as operators while coding</p>

<pre><code>if(ch == '+')
     result = x + y;
</code></pre>

<p>This is only useful if the calculator, your making, is implementing an input field where the user can write text.</p>
","1","50784740"
"<p>A 0-length <code>byte[]</code>, or <code>char[]</code> can represent an empty <code>String</code>, which is distinct from <code>null</code>. Getting the bytes, or characters, as arrays from strings (using <code>getBytes()</code>, <code>getChars()</code> of <code>String</code> class etc.) and the vice-versa of forming <code>String</code>s from <code>byte[]</code>, <code>char[]</code> is quite common. For example, for custom encoding, decoding of strings. </p>
","0","4612471"
"<p>arrays store their size in a local variable called 'length'.  Given an array named ""a"" you could use the following to reference the last index without knowing the index value</p>

<p>a[a.length-1]</p>

<p>to assign a value of 5 to this last index you would use:</p>

<p>a[a.length-1]=5;</p>
","-4","687833"
"<p>Try this</p>

<pre><code>   public class FileParser  {
 public static ArrayList&lt;String&gt; parseFile(String fileName){
  String csvFile = fileName;
  BufferedReader br = null;
 String line = """";
 final String DELIMITER = "","";
 ArrayList&lt;String&gt; data = new ArrayList&lt;String&gt;();

try {
    int counter = 0;
    int N = 10;
    br = new BufferedReader(new FileReader(csvFile));
    while ((line = br.readLine()) != null &amp;&amp; counter &lt; N) {
        if(counter &gt;= 0){
            String dataRow = line;
            data.add(dataRow);
        }
        counter++;
    }

    for (String string : data) {
        string.split(DELIMITER);
        System.out.println(string);
    }

} catch (FileNotFoundException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
} finally {
    if (br != null) {
        try {
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
return data;
</code></pre>

<p>}
}</p>
","0","34731546"
"<p>'1' and '2' are <code>char</code>s, which can be promoted to <code>int</code>, so they can be assigned to an <code>int</code> array. Note that the numeric values of '1' and '2' is not equal to the numbers 1 and 2. They are actually 49 and 50.</p>

<p>i.e. </p>

<pre><code>int[] aa={'1','2'}; 
</code></pre>

<p>will result in the same array as:</p>

<pre><code>int[] aa={49,50}; 
</code></pre>

<p>'12' is not a valid constant in Java.</p>

<p>If you want a <code>String</code>, it should be ""12"" (but in that case, you can't assign it to an <code>int</code> array). If you want an <code>int</code>, it should be 12 (i.e. without any quotes).</p>
","1","60149966"
"<p>Because the single quotes indicate 'single character value', and '12' is not a single character, but 2 characters in one go. Note that int a = '1' is valid, and doesn't do what you think it does. Run this code:</p>

<pre><code>int a = '1';
System.out.println(a); // This prints... 49????
</code></pre>

<p>Yes, it prints 49. '1' is a character. It will silently upcast to an integer here, at which point, you're looking at its UTF codepoint (49). If you want an int array containing the value 12 and 2, it's just: <code>int[] aa = {12, 2};</code> - forget the quotes.</p>
","1","60149966"
"<p>I guess better option would be to create a custom class with three variables x,y and z. Then use this class object to store data. Make implementation changes to overrided equals and hashCode methods as required.</p>

<pre><code>    public final class CsvData{
        private String x;
        private String y;
        private String z;

        public CsvData(String x, String y, String z){
            this.x = x;
            this.y = y;
            this.z = z;
        }

        //getters and setters

        public boolean equals(Object o) {
            if (o instanceof CsvData) {
                CsvData node = (CsvData)o;
                return (x.equals(node.x) &amp;&amp; y.equals(node.y) &amp;&amp; z.equals(node.z));
            }
            return false;
        }

        public int hashCode() {
            return HashCodeBuilder.reflectionHashCode(this);
        }
    } 


public class FileParser  {
public ArrayList&lt;CsvData&gt; parseFile(String fileName){
    String csvFile = fileName;
    BufferedReader br = null;
    String line = """";
    final String DELIMITER = "","";
    ArrayList&lt;CsvData&gt; data = new ArrayList&lt;CsvData&gt;();
    try {
        int counter = 0;
        int N = 10;
        br = new BufferedReader(new FileReader(csvFile));
        while ((line = br.readLine()) != null &amp;&amp; counter &lt; N) {
                String[] dataRow = line.split(DELIMITER);
                CsvData csvData = new CsvData(dataRow[0],dataRow[1],dataRow[2]);
                data.add(csvData);
             counter++;
        }

    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    return data;
  }
</code></pre>
","0","34731546"
"<p>For those wanting a more secure way to create a random byte array, yes the most secure way is:</p>

<pre><code>byte[] bytes = new byte[20];
SecureRandom.getInstanceStrong().nextBytes(bytes);
</code></pre>

<p>BUT your threads might block if there is not enough randomness available on the machine, depending on your OS. The following solution will not block:</p>

<pre><code>SecureRandom random = new SecureRandom();
byte[] bytes = new byte[20];
random.nextBytes(bytes);
</code></pre>

<p>This is because the first example uses <code>/dev/random</code> and will block while waiting for more randomness (generated by a mouse/keyboard and other sources). The second example uses <code>/dev/urandom</code> which will not block.</p>
","0","5683206"
"<p>Another way to declare and initialize ArrayList:</p>

<pre><code>private List&lt;String&gt; list = new ArrayList&lt;String&gt;(){{
    add(""e1"");
    add(""e2"");
}};
</code></pre>
","3","1200621"
"<p>Assuming you are talking about 2D or 3D points, you would have to think about defining a metric such that they are orderable. </p>

<p>Consider the exampe points <code>(1,0)</code> and <code>(0,1)</code> in 2D space. Is <code>(1,0) &gt; (0,1)</code> ? Or <code>(1,0) &lt; (0,1)</code> ? It really depends on the application.</p>

<p>You could e.g. take just the first component as metric, then it would be <code>(1,0) &gt; (0,1)</code>. Or you could take the distance from a specific point, e.g. the origin <code>(0,0)</code>, in which case they would be equal.</p>

<p>Anyways, after you have decided on that, you can look up existing implementations of sorting algorithms (you seem to be determined about MergeSort though), on the internet. <a href=""http://www.java2novice.com/java-sorting-algorithms/merge-sort/"" rel=""nofollow"">Here</a> is one example.</p>

<p>Most interfaces to sort function in various programming languages require either a key function (e.g. ""get first component"" or ""distance from origin""), or a custom comparison operator.</p>
","0","36306311"
"<p>You can do the following :</p>

<pre><code>List&lt;Integer&gt; years = new ArrayList&lt;Integer&gt;();
int endYear = Calendar.getInstance().get(Calendar.YEAR);
for(int year = 2018;year &lt;= endYear; year++){
    System.out.println(year);// if you just want to print the years.
    years.add(year);// if you want to store the years in an array list.
}
</code></pre>

<p>Here, <code>Calendar.getInstance().get(Calendar.YEAR)</code> can be used to get the current year. As you already know the starting year(for eg 2018), we can use this to create a loop for obtaining the required result.</p>
","-3","60629005"
"<p>Strings are immutable so you can't change them, and you shouldn't expect this to do anything.</p>

<p>What you might have intended is</p>

<pre><code>String s = ""fecbda""; 
char[] chars = s.toCharArray();
Arrays.sort(chars); 
String s2 = new String(chars);
System.out.println(s2);
</code></pre>
","2","36523640"
"<p>Declare and initialize for Java 8 and later. Create a simple integer array:</p>

<pre><code>int [] a1 = IntStream.range(1, 20).toArray();
System.out.println(Arrays.toString(a1));
// Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</code></pre>

<p>Create a random array for integers between [-50, 50] and for doubles [0, 1E17]:</p>

<pre><code>int [] a2 = new Random().ints(15, -50, 50).toArray();
double [] a3 = new Random().doubles(5, 0, 1e17).toArray();
</code></pre>

<p>Power-of-two sequence:</p>

<pre><code>double [] a4 = LongStream.range(0, 7).mapToDouble(i -&gt; Math.pow(2, i)).toArray();
System.out.println(Arrays.toString(a4));
// Output: [1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0]
</code></pre>

<p>For String[] you must specify a constructor:</p>

<pre><code>String [] a5 = Stream.generate(()-&gt;""I will not squeak chalk"").limit(5).toArray(String[]::new);
System.out.println(Arrays.toString(a5));
</code></pre>

<p>Multidimensional arrays:</p>

<pre><code>String [][] a6 = List.of(new String[]{""a"", ""b"", ""c""} , new String[]{""d"", ""e"", ""f"", ""g""})
    .toArray(new String[0][]);
System.out.println(Arrays.deepToString(a6));
// Output: [[a, b, c], [d, e, f, g]]
</code></pre>
","5","1200621"
"<p>It does not work as <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toCharArray--"" rel=""nofollow""><code>s.toCharArray()</code></a>:</p>

<blockquote>
  <p>Returns:
      a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.</p>
</blockquote>

<p>The operative part of the documentation is that it creates a <strong>new</strong> array (i.e. a copy of the characters in the string) and when you sort that array you do not sort the String.</p>

<p>You cannot sort the string as it is immutable but you can make a new string out of the sorted character array like this:</p>

<pre><code>String s = ""fecbda"";
char[] c = s.toCharArray();
Array.sort( c );
String n = new String( c );
</code></pre>

<p>As an alternative method, you can do it in Java 8 using streams:</p>

<pre><code>String s = ""fecbda"";

String n = s.chars()  // Convert to an IntStream of character codes
            .sorted() // Sort
            .mapToObj(i -&gt; Character.toString((char) i)) // Convert to strings
            .collect(Collectors.joining()); // Concatenate the strings.
</code></pre>
","1","36523640"
"<p>You can use <code>LocalDate</code> or <code>LocalDateTime</code> (<em>jdk 8+</em>):</p>

<pre><code>LocalDate fromDate =  LocalDate.of(2018, 3, 11);
LocalDate toDate = LocalDate.now(); // 2020-03-11
long yearsD = fromDate.until(toDate, ChronoUnit.YEARS); // 2 years

LocalDateTime fromDateTime =  LocalDateTime.of(2018, 3, 11, 5, 45, 30);
LocalDateTime toDateTime = LocalDateTime.now(); // 2020-01-11T10:00:00.0000
long yearsDT = fromDateTime.until(toDateTime, ChronoUnit.YEARS); // 2 years
</code></pre>
","0","60629005"
"<pre><code>int findIndex(int myElement, int[] someArray){
 int index = 0;
 for(int n: someArray){
   if(myElement == n) return index;
   else index++;
 }
}
</code></pre>

<p>Note: you can use this method for arrays of type int, you can also use this algorithm for other types with minor changes</p>
","-4","4962361"
"<p>This is the easiest method yet! If you simply want to retireve the item by position, then <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#get(int)"" rel=""nofollow noreferrer""><code>ArrayList#get</code></a> is your method. Per the Oracle docs,</p>

<blockquote>
  <p>Returns the element at the specified position in this list.</p>
</blockquote>

<pre><code>public StockItem getItem(int index) {
    return this.stock.get(index);
}
</code></pre>

<p>However, you have to add in the special case for the <code>null</code> return specified by your JavaDocs. There are two ways to do this</p>

<h2>First way</h2>

<pre><code>public StockItem getItem(int index) {
    if (index &lt; 0 || index &gt;= this.stock.size()){
        return null;
    }
    return this.stock.get(index);
}
</code></pre>

<h2>Second way</h2>

<pre><code>public StockItem getItem(int index) {
    try{
        return this.stock.get(index);
    }catch(IndexOutOfBoundsException e){
        return null;
    }
}
</code></pre>

<p>I'd suggest the first way because, although there is additional logic, using <code>Exception</code>s as regular control flow in your code is not good practice. See <a href=""https://stackoverflow.com/questions/1546514/java-exceptions-as-control-flow"">this</a> and <a href=""https://softwareengineering.stackexchange.com/questions/189222/are-exceptions-as-control-flow-considered-a-serious-antipattern-if-so-why"">this</a> for more discussion.</p>
","1","37619136"
"<pre><code>import java.util.List;
import java.util.stream.Stream;

class Main {

    public static void main(String[] args) {
        // Create a stream of strings from list of strings
        Stream&lt;String&gt; myStreamOfStrings = List.of(""lala"", ""foo"", ""bar"").stream();

        // Convert stream to array by using toArray method
        String[] myArrayOfStrings = myStreamOfStrings.toArray(String[]::new);

        // Print results
        for (String string : myArrayOfStrings) {
            System.out.println(string);
        }
    }
}
</code></pre>

<p>Try it out online: <a href=""https://repl.it/@SmaMa/Stream-to-array"" rel=""nofollow noreferrer"">https://repl.it/@SmaMa/Stream-to-array</a></p>
","0","23079003"
"<pre><code>public StockItem getItem(int index) {
     try
     {
         return stock.get(index)
     }
     catch(IndexOutOfBoundsException ex)
     {
         return null;
     }
}
</code></pre>
","1","37619136"
"<p>A simple one-liner would be (index check omitted):</p>

<pre><code>func copyOfRange(src []byte, from, to int) []byte {
    return append([]byte(nil), src[from:to]...)
}
</code></pre>

<p>A simple <a href=""https://golang.org/ref/spec#Slice_expressions"" rel=""nofollow noreferrer"">slice expression</a> ""almost"" does the job, but since Java's <code>Arrays.copyOfRange()</code> returns a copy independent from the source, we need to copy the slicing result to a new slice (because the result of slicing will share the backing array).</p>

<p>We can do that by allocating one with <a href=""https://golang.org/pkg/builtin/#make"" rel=""nofollow noreferrer""><code>make()</code></a>, and use the builtin <a href=""https://golang.org/pkg/builtin/#copy"" rel=""nofollow noreferrer""><code>copy()</code></a>, or simply use <a href=""https://golang.org/pkg/builtin/#append"" rel=""nofollow noreferrer""><code>append()</code></a> to append it to an empty or <code>nil</code> slice, which will take care of the allocation and copying.</p>

<p>Example using the above function:</p>

<pre><code>src := []byte{0, 1, 2, 3, 4, 5}
dst := copyOfRange(src, 2, 4)
fmt.Println(dst)
</code></pre>

<p>Output (try it on the <a href=""https://play.golang.org/p/nXgYWaAFB_D"" rel=""nofollow noreferrer"">Go Playground</a>):</p>

<pre><code>[2 3]
</code></pre>

<p>For completeness, this is how it would look like with <code>make()</code> and <code>copy()</code>:</p>

<pre><code>func copyOfRange2(src []byte, from, to int) []byte {
    src = src[from:to]
    dst := make([]byte, len(src))
    copy(dst, src)
    return dst
}
</code></pre>

<p>One thing to note here: the builtin <code>append()</code> allocates more space than needed, thinking of future growth. So if you don't plan to ""grow"" the returned slice, <code>copyOfRange2()</code> is a better option.</p>

<p>See this comparison:</p>

<pre><code>dst := copyOfRange(src, 2, 4)
fmt.Println(dst, cap(dst))

dst = copyOfRange2(src, 2, 4)
fmt.Println(dst, cap(dst))
</code></pre>

<p>Output (try it on the <a href=""https://play.golang.org/p/OI_TsGDzuo4"" rel=""nofollow noreferrer"">Go Playground</a>):</p>

<pre><code>[2 3] 8
[2 3] 2
</code></pre>

<p>As you can see, <code>append()</code> (inside <code>copyOfRange()</code>) allocated a backing array with a size of <code>8</code>, while in our <code>copyOfRange2()</code> we explicitly allocated a slice (and backing array) of size <code>2</code>.</p>
","5","48521909"
"<p>java has serilazebal interface to persistent  your object;</p>

<p>i guess u want custom serialize method, like c strct; </p>

<p>refences :
<a href=""https://github.com/MisterChangRay/magic-byte"" rel=""nofollow noreferrer"">https://github.com/MisterChangRay/magic-byte</a>
<a href=""http://code.google.com/p/javastruct/wiki/HowToUseJavaStruct"" rel=""nofollow noreferrer"">http://code.google.com/p/javastruct/wiki/HowToUseJavaStruct</a></p>
","0","7034981"
"<p>Small experiment shows, that 255 dimensions is maximum. 256 causes compilation error;</p>

<p><a href=""https://i.stack.imgur.com/3c8wL.jpg"" rel=""nofollow noreferrer"">The screenshot</a></p>
","0","4060538"
"<p>There is no difference. In fact, pop() and remove() methods both call removeFirst. See <a href=""https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/ArrayDeque.java"" rel=""nofollow noreferrer"">https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/ArrayDeque.java</a></p>
<pre><code>public E remove() {
    return removeFirst();
}

public E pop() {
    return removeFirst();
}
</code></pre>
","1","62767584"
"<h2>In Java 9</h2>

<p>Using different <a href=""https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#iterate-int-java.util.function.IntPredicate-java.util.function.IntUnaryOperator-"" rel=""nofollow noreferrer""><code>IntStream.iterate</code></a> and <a href=""https://docs.oracle.com/javase/9/docs/api/java/util/stream/IntStream.html#takeWhile-java.util.function.IntPredicate-"" rel=""nofollow noreferrer""><code>IntStream.takeWhile</code></a> methods:</p>

<pre><code>int[] a = IntStream.iterate(10, x -&gt; x &lt;= 100, x -&gt; x + 10).toArray();

Out: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]


int[] b = IntStream.iterate(0, x -&gt; x + 1).takeWhile(x -&gt; x &lt; 10).toArray();

Out: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>

<h2>In Java 10</h2>

<p>Using the <a href=""https://developer.oracle.com/java/jdk-10-local-variable-type-inference.html"" rel=""nofollow noreferrer"">Local Variable Type Inference</a>:</p>

<pre><code>var letters = new String[]{""A"", ""B"", ""C""};
</code></pre>
","10","1200621"
"<p>Both the methods internally calls removeFirst(), so there is not difference. ArrayDeque can be used as stack as well as LinkedList hence we have different interfaces, based on how we want to use it (as a stack, queue or linkedlist). It was introduced in version 1.6 of java API which is much later than Stack and LinkedList. As per oracle documentation</p>
<blockquote>
<p><a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayDeque.html"" rel=""nofollow noreferrer"">ArrayDeque class is likely to be faster than Stack when used as a
stack, and faster than LinkedList when used as a queue.</a></p>
</blockquote>
<pre><code>public E remove() {
    return removeFirst();
}

public E pop() {
    return removeFirst();
}
</code></pre>
","1","62767584"
"<p>if you have array like this(int[] a = new in[10]) you can test it like </p>

<pre><code>if(index &lt; a.length)
</code></pre>

<p>or if you have <code>ArrayList&lt;Integer&gt; b = new ArrayList&lt;Integer&gt;();</code> you can test it like</p>

<pre><code>if( index &lt; b.size())
</code></pre>
","0","47048895"
"<p>The correct boolean expression to check if an <code>index</code> is out of bounds for array <code>array</code> is:</p>

<pre><code>index &lt; 0 || index &gt;= array.length
</code></pre>

<p>As in:</p>

<pre><code>if (index &lt; 0 || index &gt;= array.length) {
    System.out.println(""Index is out of bounds"");
}
</code></pre>
","1","47048895"
"<p>In Java 8 you can use like this. </p>

<pre><code>String[] strs = IntStream.range(0, 15)  // 15 is the size
    .mapToObj(i -&gt; Integer.toString(i))
    .toArray(String[]::new);
</code></pre>
","7","1200621"
"<p>you can use the collector like this</p>
<pre><code>  Stream&lt;String&gt; io = Stream.of(&quot;foo&quot; , &quot;lan&quot; , &quot;mql&quot;);
  io.collect(Collectors.toCollection(ArrayList&lt;String&gt;::new));
</code></pre>
","0","23079003"
"<p>Use array.length to find the length of the array and then compare your index with array.length (it should be less than length of array and greater or equal to 0).
As the index surpasses length java gives you exception(ArrayIndexOutOfBounds Exception).</p>

<pre><code>   //let i be the index
</code></pre>

<p>if(i >= array.length || i&lt;0)<br>
   //you will get an error</p>
","0","47048895"
"<pre><code>private static byte[] charArrayToByteArray(char[] c_array) {
        byte[] b_array = new byte[c_array.length];
        for(int i= 0; i &lt; c_array.length; i++) {
            b_array[i] = (byte)(0xFF &amp; (int)c_array[i]);
        }
        return b_array;
}
</code></pre>
","0","5513144"
"<p>You can always check if the index you are trying to use can be accessed by doing this:</p>

<p><code>if(index &gt;= 0 and index &lt;= array.length−1)</code>   //This checks to see if the index you are going to use is greater or equal to 0 (since you cant access a negative index) and make sure it is less than the maximum size of the whole array)</p>
","-1","47048895"
"<p>If the tree is balanced even after insertion of the new element, there is no need for rotation in AVL tree. However, if the tree is not balanced after insertion of new elements, then rotation is required.</p>

<p>That is, if the Balance Factor is not violated after insertion, then rotation of any type is not required and insertion is possible without rotation in this scenario.</p>

<p>Note that balance factor in AVL tree refers to calculation of difference between the height of the left and the right sub-trees and it must not be more than 1 to avoid rotation.</p>
","0","45362226"
"<p>Using lambdas:</p>

<pre><code>Function&lt;ArrayList&lt;T&gt;, T&gt; getLast = a -&gt; a.get(a.size() - 1);
</code></pre>
","6","687833"
"<p>With local variable type inference you only have to specify the type once:</p>

<pre><code>var values = new int[] { 1, 2, 3 };
</code></pre>

<p>Or</p>

<pre><code>int[] values = { 1, 2, 3 }
</code></pre>
","3","1200621"
"<p>If you are talking about 0x0D 0x0A characters  you can use intermediate <code>String</code> and <code>replaceAll</code> method to do that:</p>

<pre><code>byte[] result = new String(myByteArray).replaceAll(""\r\r\n"", ""\n"").getBytes();
</code></pre>
","0","51273396"
"<p>Just add a break after your <em>remove()</em> statement</p>
","-1","5617175"
"<p>This might be a wrong answer to your question. I'll remove it in that case, but maybe you can use it for what you want to achieve:</p>

<pre><code>int[][] it = {{1,2}, {3,4,5}};

OfInt iterator = Arrays.stream(it).flatMapToInt(x -&gt; IntStream.of(x)).iterator();
iterator.forEachRemaining((IntConsumer) System.out::print);
</code></pre>

<p>Stream the jagged array, flatmap it into one single <code>IntStream</code> and then do what you want with it. In this example I fetched the iterator but you might only want:</p>

<pre><code>Arrays.stream(it).flatMapToInt(x -&gt; IntStream.of(x)).forEach((IntConsumer) System.out::print); 
</code></pre>

<p>In <code>forEach</code> you can do what you need, or use some other method of <code>IntStream</code></p>
","1","52368350"
"<p>Thank you all for your answers, I've found my answer in russian stackoverflow:
<a href=""https://ru.stackoverflow.com/questions/867881/java-iterator-%D0%B4%D0%BB%D1%8F-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BC%D0%B5%D1%80%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0"">https://ru.stackoverflow.com/questions/867881/java-iterator-%D0%B4%D0%BB%D1%8F-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BC%D0%B5%D1%80%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D0%B0</a></p>

<p>public class IteratorFor2DArray implements Iterator {</p>

<pre><code>private int size;
private int i = 0;
private int j = 0;
private int[][] values = new int[i][j];
private int position = 0;

public IteratorFor2DArray(int[][] values) {
    this.values = values;
    this.size = countOfElements(values);
}

private int countOfElements(int[][] values) {
    int count = 0;
    for (int[] row : values) {
        count += row.length;
    }
    return count;
}

@Override
public boolean hasNext() {
    return position &lt; size;
}

@Override
public Integer next() {
    if (position &gt;= size) {
        throw new NoSuchElementException();
    }
    int element = values[i][j];
    position++;
    j++;
    while (i &lt; values.length &amp;&amp; j &gt;= values[i].length) {
        j = 0;
        i++;
    }
    return element;
}
</code></pre>

<p>}</p>
","0","52368350"
"<p>If you use a LinkedList instead , you can access the first element and the last one with just <code>getFirst()</code> and <code>getLast()</code> (if you want a cleaner way than size() -1 and get(0))</p>

<h2>Implementation</h2>

<p>Declare a LinkedList</p>

<pre><code>LinkedList&lt;Object&gt; mLinkedList = new LinkedList&lt;&gt;();
</code></pre>

<p>Then this are the methods you can use to get what you want, in this case we are talking about <strong>FIRST</strong> and <strong>LAST</strong> element of a list</p>

<pre><code>/**
     * Returns the first element in this list.
     *
     * @return the first element in this list
     * @throws NoSuchElementException if this list is empty
     */
    public E getFirst() {
        final Node&lt;E&gt; f = first;
        if (f == null)
            throw new NoSuchElementException();
        return f.item;
    }

    /**
     * Returns the last element in this list.
     *
     * @return the last element in this list
     * @throws NoSuchElementException if this list is empty
     */
    public E getLast() {
        final Node&lt;E&gt; l = last;
        if (l == null)
            throw new NoSuchElementException();
        return l.item;
    }

    /**
     * Removes and returns the first element from this list.
     *
     * @return the first element from this list
     * @throws NoSuchElementException if this list is empty
     */
    public E removeFirst() {
        final Node&lt;E&gt; f = first;
        if (f == null)
            throw new NoSuchElementException();
        return unlinkFirst(f);
    }

    /**
     * Removes and returns the last element from this list.
     *
     * @return the last element from this list
     * @throws NoSuchElementException if this list is empty
     */
    public E removeLast() {
        final Node&lt;E&gt; l = last;
        if (l == null)
            throw new NoSuchElementException();
        return unlinkLast(l);
    }

    /**
     * Inserts the specified element at the beginning of this list.
     *
     * @param e the element to add
     */
    public void addFirst(E e) {
        linkFirst(e);
    }

    /**
     * Appends the specified element to the end of this list.
     *
     * &lt;p&gt;This method is equivalent to {@link #add}.
     *
     * @param e the element to add
     */
    public void addLast(E e) {
        linkLast(e);
    }
</code></pre>

<p>So , then you can use </p>

<pre><code>mLinkedList.getLast(); 
</code></pre>

<p>to get the last element of the list.</p>
","4","687833"
"<p>Another way is with <a href=""https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html#setAll(int%5B%5D,java.util.function.IntUnaryOperator)"" rel=""nofollow noreferrer""><code>Arrays.setAll</code></a>, or <a href=""https://docs.oracle.com/javase/10/docs/api/java/util/Arrays.html#fill(java.lang.Object%5B%5D,java.lang.Object)"" rel=""nofollow noreferrer""><code>Arrays.fill</code></a>:</p>

<pre><code>String[] v = new String[1000];
Arrays.setAll(v, i -&gt; Integer.toString(i * 30));
//v =&gt; [""0"", ""30"", ""60"", ""90""... ]

Arrays.fill(v, ""initial value"");
//v =&gt; [""initial value"", ""initial value""... ]
</code></pre>

<p>This is more usefull for initializing (possibly large) arrays where you can compute each element from its index.</p>
","3","8549747"
"<p>I've also found another way:</p>

<pre><code>public class IteratorFor2DArray implements Iterator {

    private int[][] data;
    private int i, j;

    public IteratorFor2DArray(int[][] data) {
        this.data = data;
    }

    @Override
    public Integer next() {
        if (!hasNext()) {
            throw new NoSuchElementException();
        }
        int element = data[i][j];
        j++;
        while (i &lt; data.length &amp;&amp; j &gt;= data[i].length) {
            j = 0;
            i++;
        }
        return element;
    }

    @Override
    public boolean hasNext() {
        return (i &lt; data.length &amp;&amp; j &lt; data[i].length);
    }
}
</code></pre>
","0","52368350"
"<pre><code>List&lt;List&lt;Integer&gt;&gt; list = 
    Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4,5,6));
</code></pre>
","1","53289687"
"<p>Here are a couple answers from <a href=""https://www.geeksforgeeks.org/how-to-remove-duplicates-from-arraylist-in-java/"" rel=""nofollow noreferrer"">https://www.geeksforgeeks.org/how-to-remove-duplicates-from-arraylist-in-java/</a></p>

<p><strong>Java 7</strong></p>

<pre class=""lang-java prettyprint-override""><code>    // Create a new ArrayList 
    ArrayList&lt;String&gt; uniqueList = new ArrayList&lt;String&gt;(); 

    // Traverse through the first list 
    for ( element : list) { 

        // If this element is not present in uniqueList
        // then add it 
        if (!uniqueList.contains(element)) { 

            uniqueList.add(element); 
        } 
    } 
</code></pre>

<p><strong>Java 8</strong></p>

<pre class=""lang-java prettyprint-override""><code>    List&lt;String&gt; uniqueList = list.stream() 
        .distinct() 
        .collect(Collectors.toList()); 
</code></pre>
","-6","56861754"
"<pre><code>List&lt;List&lt;Integer&gt;&gt; list = Arrays.asList(Arrays.asList(1,2), Arrays.asList(3,4));
</code></pre>

<p>In Java 9+ you can replace <code>Arrays.asList()</code> with <code>List.of()</code>.</p>
","4","53289687"
"<p>I have created a class to model the pairs and override the equals method to treat ""f1,f2"" and ""f2,f1"" as equals and then found out the duplicates using HashSet.</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

public class so1 {
    public static void main(String[] args) {

        List&lt;String&gt; list = Arrays.asList(new String[] {""f1,f2"",""f2,f3"",""f4,f5"",""f2,f1"",""f5,f4""});

        List&lt;pair&gt; plist = new ArrayList&lt;pair&gt;();
        for (int i = 0; i &lt; list.size(); i++) {
            plist.add(new pair(list.get(i)));
        }

        HashSet&lt;pair&gt; hs = new HashSet&lt;pair&gt;(); 
        for (int i = 0; i &lt; plist.size(); i++) {
            if(!hs.add(plist.get(i))){
                System.out.println(""Found duplicate ""+plist.get(i).toString());
            }
        }

        List&lt;String&gt; uniqueItems = new ArrayList&lt;String&gt;();
        for (Iterator iterator = hs.iterator(); iterator.hasNext();) {
            pair pair = (pair) iterator.next();
            uniqueItems.add(pair.toString());
        }

        System.out.println(uniqueItems);


    }
}

class pair{
    pair(String inp){
        String[] tokens = inp.split("","");
        Arrays.sort(tokens);
        for(String t: tokens){
            elements.add(t);
        }
    }
    List&lt;String&gt; elements = new ArrayList&lt;&gt;();

    @Override
    public String toString() {
        return """"+elements;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((elements == null) ? 0 : elements.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        pair other = (pair) obj;
        if (elements == null) {
            if (other.elements != null)
                return false;
        } else if (!elements.equals(other.elements))
            return false;
        return true;
    }
}
</code></pre>
","0","56861754"
"<p>Using an additional class:</p>

<pre><code>    static class Pair {
    String a, b;

    Pair(String s) {
        String[] arr = s.split("","");
        this.a = arr[0];
        this.b = arr[1];
    }

    static String pairToString(Pair p) {
        return p.a + "","" + p.b;
    }

    @Override
    public int hashCode() {
        return Objects.hash(a, b) + Objects.hash(b, a);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Pair p = (Pair) o;
        return (p.a.equals(a) &amp;&amp; p.b.equals(b)) || (p.b.equals(a) &amp;&amp; p.a.equals(b));
    }
</code></pre>

<p>}</p>

<p>Now you can use:</p>

<pre><code> public static void main(String[] args) {
        List&lt;String&gt; list = Arrays.asList(""f1,f2"", ""f2,f3"", ""f4,f5"", ""f2,f1"", ""f5,f4"");
        List&lt;String&gt; strings = list
                .stream()
                .map(Pair::new)
                .distinct()
                .map(Pair::pairToString)
                .collect(Collectors.toList());
    }
</code></pre>
","1","56861754"
"<p>I have another solution . If you dont want to prepare another class to compare values inside List . You can separete each value by comma and sort those data. After that you can again converte them to Set of String </p>

<pre><code>public static void main(String[] args) {
    List&lt;String&gt; stringList = Arrays.asList(""f1,f2"", ""f2,f3"", ""f4,f5"", ""f2,f1"", ""f5,f4"");
    Set&lt;String&gt; result = new HashSet&lt;&gt;();
    for (String s : stringList) {
        String[] elements = s.split("","");
        Arrays.sort(elements);
        result.add(Arrays.toString(elements));
    }

    for (String e : result){
        System.out.println(e);
    }
}
</code></pre>
","1","56861754"
"<p>If by &quot;array&quot; you meant using <code>java.util.Arrays</code>, you can do it like that :</p>
<pre><code>List&lt;String&gt; number = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);

Out: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]
</code></pre>
<p>This one is pretty <strong>simple</strong> and straightforward.</p>
","4","1200621"
"<p><code>SomeObject[]</code> is array and <code>SomeObject[][]</code> is 2D array. Below you can see example integer 2D array.</p>

<pre><code>int[][] array2d = new int[][] {
  {1,2,3},
  {4,5,6},
  {7,8,9}
};

array2d[1][1] == 5; // this is true
</code></pre>

<p>There are no 2D ArrayLists, you can <code>fake</code> it by making normal array of ArrayLists or ArrayList containing multiple ArrayLists.</p>

<pre><code>// Array of ArrayLists
ArrayList[] arr = new ArrayList[arraysize];

// ArrayList containing another ArrayList
ArrayList a = new ArrayList();
ArrayList b = new ArrayList();
a.add(b);
</code></pre>
","1","61051439"
"<p><a href=""https://stackoverflow.com/a/4962413/4767498"">Jeffrey Hantin</a>'s answer is good but it has some constraints, if its this do this or else to that...</p>

<p>You can write your own extension method and it always works the way you want.</p>

<pre><code>Lists.indexOf(array, x -&gt; item == x); // compare in the way you want
</code></pre>

<p>And here is your extension</p>

<pre><code>public final class Lists {
    private Lists() {
    }

    public static &lt;T&gt; int indexOf(T[] array, Predicate&lt;T&gt; predicate) {
        for (int i = 0; i &lt; array.length; i++) {
            if (predicate.test(array[i])) return i;
        }
        return -1;
    }

    public static &lt;T&gt; int indexOf(List&lt;T&gt; list, Predicate&lt;T&gt; predicate) {
        for (int i = 0; i &lt; list.size(); i++) {
            if (predicate.test(list.get(i))) return i;
        }
        return -1;
    }

    public interface Predicate&lt;T&gt; {
        boolean test(T t);
    }
}
</code></pre>
","0","4962361"
"<p>2D arrays in Java are essentially arrays consisting of arrays. Each element in the array is itself an array. </p>

<pre><code>int[][] arr = {
    new int[] = { 1, 2, 3 },
    new int[] = { 4, 5, 6 },
    new int[] = { 7, 8, 9 }
}
</code></pre>

<p>The same can be created with ArrayLists. </p>

<pre><code>ArrayList arrList = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
arrList.add(new ArrayList&lt;Integer&gt;(Arrays.asList(1, 2, 3)));
arrList.add(new ArrayList&lt;Integer&gt;(Arrays.asList(4, 5, 6)));
arrList.add(new ArrayList&lt;Integer&gt;(Arrays.asList(7, 8, 9)));
</code></pre>

<p>The data type of the parent <code>ArrayList</code> is <code>&lt;ArrayList&lt;Integer&gt;&gt;</code>. Each element in the parent <code>arrList</code> is itself of type <code>ArrayList</code> which contains <code>Integer</code>s.</p>
","1","61051439"
"<p>Alternative using the Stream API:</p>

<pre><code>list.stream().reduce((first, second) -&gt; second)
</code></pre>

<p>Results in an Optional of the last element.</p>
","-6","687833"
"<p>No. Any given element of an array is just that, one element. The type of element does matter, though.</p>
<p>Consider an array of integers:</p>
<pre><code>int[] x = {1, 4, 7, 10};
</code></pre>
<p>One element cannot 'hold' multiple elements.</p>
<p>But now consider an array of arrays of integers:</p>
<pre><code>int[][] x = {
    {1},
    {2, 3},
    {4, 5, 6},
    {7, 8, 9, 10}
};
</code></pre>
<p>Each element is still just a single element. There are four elements each of type <code>int[]</code>. Then, each of <em>those</em> has one element per element. You can theoretically have as many layers of this as you want. It can get confusing very quickly.</p>
<p>Another way to fit 'multiple elements into one element' would be to write your own class that holds multiple elements in whatever way is most useful to you, and make an array of those.</p>
<hr />
<p>Note: above, I've used primitive arrays to demonstrate. However, this also works with Java <code>List</code> objects:</p>
<pre><code>ArrayList&lt;Integer&gt; x;  // list of integers

ArrayList&lt;ArrayList&lt;Integer&gt;&gt; x;  // list of ArrayList&lt;Integer&gt; objects, each of which is itself a list of integers

ArrayList&lt;Integer&gt;[] x;  // primitive array of ArrayList&lt;Integer&gt; objects
                         // (I recommend not doing this, it can get confusing)
</code></pre>
<hr />
<p>If your question is about putting multiple <em>types</em> of objects in a single element, then you have to figure out what superclass encompasses both types (usually <code>Object</code>, if the types are remotely different), and make your list that type:</p>
<pre><code>Object[] x = {Integer.valueOf(5), Double.valueOf(3.14), &quot;some_string&quot;};
</code></pre>
<p>Getting those objects back out again and putting them into their correct type, is difficult, so I don't recommend this.</p>
<p>You can also try <a href=""http://lambda-the-ultimate.org/node/2694"" rel=""nofollow noreferrer"">building your own <code>Union</code> type</a>, and making the list be that type.</p>
","1","63944448"
"<p>You can store anything in an <code>Object[]</code> object array.</p>
<p>Something like this:</p>
<pre><code>Object[] objArr = new Object[10];
objArr[0] = &quot;String&quot;;
objArr[1] = Arrays.asList(1, 2, 4);
objArr[2] = new ArrayList&lt;&gt;(); 
objArr[3] = 1;
</code></pre>
","0","63944448"
"<p>No difference.</p>
<p>Decompiling this:</p>
<pre><code>final class Foo {
  Class[] a = new Class[]{};
  Class[] b = new Class[0];
}
</code></pre>
<p>yields</p>
<pre><code>final class Foo {
  java.lang.Class[] a;

  java.lang.Class[] b;

  Foo();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V
       4: aload_0
       5: iconst_0
       6: anewarray     #2                  // class java/lang/Class
       9: putfield      #3                  // Field a:[Ljava/lang/Class;
      12: aload_0
      13: iconst_0
      14: anewarray     #2                  // class java/lang/Class
      17: putfield      #4                  // Field b:[Ljava/lang/Class;
      20: return
}
</code></pre>
<p>That is, the two forms yield identical bytecode.</p>
","7","63990703"
"<p>You can never ""add"" an element to an array. It is a fixed-size data structure, with or without an enhanced for loop. All you can do is to allocate an array, and then set its elements.</p>

<p>It doesn't make sense to allocate the array you are iterating in the enhanced for loop - what then are you iterating? - and as you have stated in the question, you cannot set array elements (directly) in a for loop.</p>

<p>So, no.</p>
","1","53786255"
"<p>There are a lot of answers here. I am adding a few tricky ways to create arrays (from an <strong>exam</strong> point of view it's good to know this)</p>

<ol>
<li><p>Declare and define an array</p>

<pre><code>int intArray[] = new int[3];
</code></pre>

<p>This will create an array of length 3. As it holds a primitive type, int, all values are set to 0 by default. For example,</p>

<pre><code>intArray[2]; // Will return 0
</code></pre></li>
<li><p>Using box brackets [] before the variable name</p>

<pre><code>int[] intArray = new int[3];
intArray[0] = 1;  // Array content is now {1, 0, 0}
</code></pre></li>
<li><p>Initialise and provide data to the array</p>

<pre><code>int[] intArray = new int[]{1, 2, 3};
</code></pre>

<p>This time there isn't any need to mention the size in the box bracket. Even a simple variant of this is:</p>

<pre><code>int[] intArray = {1, 2, 3, 4};
</code></pre></li>
<li><p>An array of length 0</p>

<pre><code>int[] intArray = new int[0];
int length = intArray.length; // Will return length 0
</code></pre>

<p><strong>Similar for multi-dimensional arrays</strong></p>

<pre><code>int intArray[][] = new int[2][3];
// This will create an array of length 2 and
//each element contains another array of length 3.
// { {0,0,0},{0,0,0} }
int lenght1 = intArray.length; // Will return 2
int length2 = intArray[0].length; // Will return 3
</code></pre></li>
</ol>

<p>Using box brackets before the variable:</p>

<pre><code>    int[][] intArray = new int[2][3];
</code></pre>

<p>It's absolutely fine if you put one box bracket at the end:</p>

<pre><code>    int[] intArray [] = new int[2][4];
    int[] intArray[][] = new int[2][3][4]
</code></pre>

<p>Some examples</p>

<pre><code>    int [] intArray [] = new int[][] {{1,2,3},{4,5,6}};
    int [] intArray1 [] = new int[][] {new int[] {1,2,3}, new int [] {4,5,6}};
    int [] intArray2 [] = new int[][] {new int[] {1,2,3},{4,5,6}}
    // All the 3 arrays assignments are valid
    // Array looks like {{1,2,3},{4,5,6}}
</code></pre>

<p>It's not mandatory that each inner element is of the same size.</p>

<pre><code>    int [][] intArray = new int[2][];
    intArray[0] = {1,2,3};
    intArray[1] = {4,5};
    //array looks like {{1,2,3},{4,5}}

    int[][] intArray = new int[][2] ; // This won't compile. Keep this in mind.
</code></pre>

<p>You have to make sure if you are using the above syntax, that the forward direction you have to specify the values in box brackets. Else it won't compile. Some examples:</p>

<pre><code>    int [][][] intArray = new int[1][][];
    int [][][] intArray = new int[1][2][];
    int [][][] intArray = new int[1][2][3];
</code></pre>

<p>Another important feature is <strong>covariant</strong></p>

<pre><code>    Number[] numArray = {1,2,3,4};   // java.lang.Number
    numArray[0] = new Float(1.5f);   // java.lang.Float
    numArray[1] = new Integer(1);    // java.lang.Integer
   // You can store a subclass object in an array that is declared
   // to be of the type of its superclass.
   // Here 'Number' is the superclass for both Float and Integer.

   Number num[] = new Float[5]; // This is also valid
</code></pre>

<p><strong>IMPORTANT: For referenced types, the default value stored in the array is null.</strong></p>
","4","1200621"
"<p>As stated in the solution, if the <code>List</code> is empty then an <code>IndexOutOfBoundsException</code> is thrown.  A better solution is to use the <code>Optional</code> type:</p>

<pre><code>public class ListUtils {
    public static &lt;T&gt; Optional&lt;T&gt; last(List&lt;T&gt; list) {
        return list.isEmpty() ? Optional.empty() : Optional.of(list.get(list.size() - 1));
    }
}
</code></pre>

<p>As you'd expect, the last element of the list is returned as an <code>Optional</code>:</p>

<pre><code>var list = List.of(10, 20, 30);
assert ListUtils.last(list).orElse(-1) == 30;
</code></pre>

<p>It also deals gracefully with empty lists as well:</p>

<pre><code>var emptyList = List.&lt;Integer&gt;of();
assert ListUtils.last(emptyList).orElse(-1) == -1;
</code></pre>
","3","687833"
"<p>There is no <em>elegant</em> way of getting the last element of a list in Java (compared to e.g. <code>items[-1]</code> in Python).</p>

<p>You have to use <code>list.get(list.size()-1)</code>.</p>

<p>When working with lists obtained by complicated method calls, the workaround lies in temporary variable:</p>

<pre><code>List&lt;E&gt; list = someObject.someMethod(someArgument, anotherObject.anotherMethod());
return list.get(list.size()-1);
</code></pre>

<p>This is the only option to avoid ugly and often expensive or even not working version:</p>

<pre><code>return someObject.someMethod(someArgument, anotherObject.anotherMethod()).get(
    someObject.someMethod(someArgument, anotherObject.anotherMethod()).size() - 1
);
</code></pre>

<p>It would be nice if fix for this design flaw was introduced to Java API.</p>
","6","687833"
"<p>Declare Array: <code>int[] arr;</code></p>

<p>Initialize Array: <code>int[] arr = new int[10];</code> 10 represents the number of elements allowed in the array</p>

<p>Declare Multidimensional Array: <code>int[][] arr;</code></p>

<p>Initialize Multidimensional Array: <code>int[][] arr = new int[10][17];</code> 10 rows and 17 columns and 170 elements because 10 times 17 is 170.</p>

<p><strong>Initializing an array means specifying the size of it.</strong> </p>
","0","1200621"
"<p>It's very easy to declare and initialize an array.
For example, you want to save five integer elements which are 1, 2, 3, 4, and 5 in an array. You can do it in the following way:</p>

<p>a)</p>

<pre><code>int[] a = new int[5];
</code></pre>

<p>or</p>

<p>b)</p>

<pre><code>int[] a = {1, 2, 3, 4, 5};
</code></pre>

<p>so the basic pattern is for initialization and declaration by method a) is:</p>

<pre><code>datatype[] arrayname = new datatype[requiredarraysize];
</code></pre>

<p><code>datatype</code> should be in lower case.</p>

<p>So the basic pattern is for initialization and declaration by method a is:</p>

<p>If it's a string array:</p>

<pre><code>String[] a = {""as"", ""asd"", ""ssd""};
</code></pre>

<p>If it's a character array:</p>

<pre><code>char[] a = {'a', 's', 'w'};
</code></pre>

<p>For float double, the format of array will be same as integer.</p>

<p>For example:</p>

<pre><code>double[] a = {1.2, 1.3, 12.3};
</code></pre>

<p>but when you declare and initialize the array by ""method a"" you will have to enter the values manually or by loop or something.</p>

<p>But when you do it by ""method b"" you will not have to enter the values manually.</p>
","0","1200621"
"<p>In Kotlin, you can use the method <code>last</code>: </p>

<pre><code>val lastItem = list.last()
</code></pre>
","-8","687833"
"<p>You can't take input directly in charArray using nextChar() because there is no nextChar() in Java. You first have to take input in String then fetch character one by one.</p>

<pre><code>import java.util.*;
class CharArray{
    public static void main(String[] args)
    { 
    Scanner scan=new Scanner(System.in); 

    char ch[]=new char[11];

    String s = scan.nextLine();

    for(int i=0;i&lt;=10;i++)  
    ch[i]=s.charAt(i);  //Input in CharArray

    System.out.println(""Output of CharArray: "");
        for(int i=0;i&lt;=10;i++) 
        System.out.print(ch[i]); //Output of CharArray
    }
}
</code></pre>
","0","13878437"
"<p>The answer is <strong>byte[].class</strong>.</p>

<p>Example:</p>

<pre><code>byte[] receivedMessage = consumer.receiveBody(byte[].class, 15000); // in ms or 15 seconds
</code></pre>
","1","43626451"
"<p>Since the indexing in ArrayList starts from 0 and ends one place before the actual size hence the correct statement to return the last arraylist element would be:</p>

<p><strong>int last = mylist.get(mylist.size()-1);</strong></p>

<p>For example:</p>

<p>if size of array list is 5, then size-1 = 4 would return the last array element.</p>
","0","687833"
"<p>In Kotlin, creating an IntArray of size N is simple. Use <code>IntArray(n)</code> or the appropriate type, as detailed thoroughly in hotkey's answer.</p>

<p>When utilizing your fixed size array, you can use <a href=""https://kotlinlang.org/docs/reference/multi-declarations.html"" rel=""nofollow noreferrer"">Kotlin Destructuring</a></p>

<pre><code>// Create fixed sized array
val point = IntArray(2)

// Access values directly
val (x, y) = point
</code></pre>

<p>In this case, <code>x</code> will be taken from index 0, <code>y</code> from index 1, etc.</p>
","1","35253368"
"<p>Array can contains primitives data types as well as objects of a class depending on the definition of array. In case of primitives data types, the actual values are stored in contiguous memory locations. In case of objects of a class, the actual objects are stored in heap segment.</p>

<p><img src=""https://media.geeksforgeeks.org/wp-content/uploads/Arrays1.png"" alt=""""><br>
<strong>One-Dimensional Arrays :</strong> <br>
The general form of a one-dimensional array declaration is</p>

<pre><code>type var-name[];
OR
type[] var-name;
</code></pre>

<p><strong>Instantiating an Array in Java</strong></p>

<pre><code>var-name = new type [size];
</code></pre>

<p>For Example </p>

<pre><code>    int intArray[];    //declaring array
    intArray = new int[20];  // allocating memory to array
    // the below line is equals to line1 + line2
    int[] intArray = new int[20]; // combining both statements in one
     int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; 
    // accessing the elements of the specified array
    for (int i = 0; i &lt; intArray.length; i++)
    System.out.println(""Element at index "" + i + "" : ""+ intArray[i]);
</code></pre>

<p>Ref: <a href=""https://www.geeksforgeeks.org/arrays-in-java/"" rel=""nofollow noreferrer"">https://www.geeksforgeeks.org/arrays-in-java/</a></p>
","1","1200621"
"<p>Array has two basic types.</p>

<blockquote>
  <p><strong>Static Array:</strong> Fixed size array (Its size should be declared at start and can not be changed later)</p>
  
  <p><strong>Dynamic Array:</strong> No size limit is considered for this. (Pure dynamic arrays do not exist in Java. Instead, List is most encouraged)</p>
</blockquote>

<p>To declare a static array of Integer, string, float, etc... use the bellow declaration and initialization statements.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    int[] intArray = new int[10]; 
    String[] intArray = new int[10]; 
    float[] intArray = new int[10]; 
    
   // here you have 10 index starting from 0 to 9</code></pre>
</div>
</div>
</p>

<p>To use dynamic features, you have to use List... 
List is pure <strong>dynamic Array</strong> and there is no need to declare size at beginning. 
Bellow is the proper way to declare a list in JAVA></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>        ArrayList&lt;String&gt; myArray = new ArrayList&lt;String&gt;();
        myArray.add(""Value 1: something"");
        myArray.add(""Value 2: something more"");</code></pre>
</div>
</div>
</p>
","4","1200621"
"<pre><code>int[] x=new int[enter the size of array here];
</code></pre>

<p>example:</p>

<pre><code>int[] x=new int[10];
</code></pre>

<p>or</p>

<pre><code>int[] x={enter the elements of array here];
</code></pre>

<p>example:</p>

<pre><code>int[] x={10,65,40,5,48,31};
</code></pre>
","1","1200621"
"<p>Is count an array of a numeric type (int, long)?</p>

<p>You're indexing into a string, getting the ASCII character value blindly, and using it to index into another array. </p>

<p>Then incrementing? You may find that you aren't incrementing what you think you are. What are you trying to do? Hmm.</p>

<p>So, like ""1"" is 31, which is I think perhaps not what you wanted.</p>

<p>Perhaps something more like</p>

<p>Int idx = Integer.parseInt(are.charAt(t)); //gives you 1 instead of 31
count [idx]++</p>

<p>Also -</p>

<p>YOUR ARRAY SIZE WON'T CHANGE BUT YOU ARE HIGHLY LIKELY TO THROW AN EXCEPTION</p>
","-1","61114530"
"<p><a href=""https://github.com/google/guava"" rel=""nofollow noreferrer"">guava</a> provides another way to obtain the last element from a <code>List</code>:</p>

<p><code>last = Lists.reverse(list).get(0)</code></p>

<p>if the provided list is empty it throws an <code>IndexOutOfBoundsException</code></p>
","1","687833"
"<p>Because in Java, arrays are treated like Objects and not as a primitive type. By default, when printing any object, the object's <code>toString()</code> method is called. Arrays do not override the default toString method and such do not provide useful information about the contents of the array, so you should call <code>Arrays.toString()</code> instead. </p>
","0","61361897"
"<p>one another full example with movies class 😋</p>

<pre><code>public class A {

        public static void main(String[] args) {

                class Movie{

                    String movieName;
                    String genre;
                    String movieType;
                    String year;
                    String ageRating;
                    String rating;

                    public Movie(String [] str)
                    {
                        this.movieName = str[0];
                        this.genre = str[1];
                        this.movieType = str[2];
                        this.year = str[3];
                        this.ageRating = str[4];
                        this.rating = str[5];    
                    }

                }

                String [] movieDetailArr = {""Inception"", ""Thriller"", ""MovieType"", ""2010"", ""13+"", ""10/10""};

                Movie mv = new Movie(movieDetailArr);

                System.out.println(""Movie Name: ""+ mv.movieName);
                System.out.println(""Movie genre: ""+ mv.genre);
                System.out.println(""Movie type: ""+ mv.movieType);
                System.out.println(""Movie year: ""+ mv.year);
                System.out.println(""Movie age : ""+ mv.ageRating);
                System.out.println(""Movie  rating: ""+ mv.rating);


            }

        } 
</code></pre>
","1","1200621"
"<p>A rectangular 2-dimensional array is just a special case of a jagged array. Therefore, any language that supports jagged arrays will also support rectangular arrays, while the inverse is not necessarily true.</p>
<p>The expression <code>int[][] numbers = new int[3][5];</code> is just syntactic sugar, and actually boils down to something like:</p>
<pre><code>int[][] numbers = new int[3][];
numbers[0] = new int[5];
numbers[1] = new int[5];
numbers[2] = new int[5];
</code></pre>
<p>Nothing prevents you from turning a rectangular array into a jagged array after declaration:</p>
<pre><code>int[][] numbers = new int[3][5];
numbers[0] = new int[10]; // works
</code></pre>
","6","62707259"
"<p><a href=""https://en.wikipedia.org/wiki/Jagged_array"" rel=""nofollow noreferrer"">Wikipedia</a> says:</p>
<blockquote>
<p>In computer science, a <strong>ragged array</strong>, also known as a <strong>jagged array</strong>, is an array of arrays of which the member arrays can be of different sizes and producing rows of jagged edges when visualized as output. In contrast, two-dimensional arrays are always rectangular so jagged arrays should not be confused with multidimensional arrays, but the former is often used to emulate the latter.</p>
</blockquote>
<p>According to that, a jagged array is not a 2D array, i.e. the term 2D implies rectangular.</p>
<p>Your question was: <em>What are non-jagged arrays called in java?</em><br />
Answer: <strong>A two-dimensional array</strong>.</p>
<p>Or more precisely &quot;a multidimensional array&quot;, since non-jagged is not limited to only 2 dimensions.</p>
","1","62707259"
"<p>just use this method inside arraylist</p>
<pre><code>list.set(/*index*/,/*value*/)
</code></pre>
","0","5617175"
"<p>In case you have a spring project, you can also use the <code>CollectionUtils.lastElement</code> from Spring (<a href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/util/CollectionUtils.html#lastElement-java.util.List-"" rel=""nofollow noreferrer"">javadoc</a>) and you don't need to add an extra dependency like Google Guave if you didn't need to before.</p>
<p>It is null-safe so if you pass null, you will simply receive null in return. Be careful when handling the response though.</p>
<p>Here are somes unit test to demonstrate them:</p>
<pre><code>@Test
void lastElementOfList() {
    var names = List.of(&quot;John&quot;, &quot;Jane&quot;);

    var lastName = CollectionUtils.lastElement(names);

    then(lastName)
        .as(&quot;Expected Jane to be the last name in the list&quot;)
        .isEqualTo(&quot;Jane&quot;);
}

@Test
void lastElementOfSet() {
    var names = new TreeSet&lt;&gt;(Set.of(&quot;Jane&quot;, &quot;John&quot;, &quot;James&quot;));

    var lastName = CollectionUtils.lastElement(names);

    then(lastName)
        .as(&quot;Expected John to be the last name in the list&quot;)
        .isEqualTo(&quot;John&quot;);
}
</code></pre>
<p>Note: <code>org.assertj.core.api.BDDAssertions#then(java.lang.String)</code> is used for assertions.</p>
","1","687833"
"<p>In Java you can use stream to convert your array to map. I think below code snippet might help you:</p>
<pre><code>Map&lt;String,String&gt; resultMap =  Arrays.stream(arr)
    .map(elem-&gt; elem.split(&quot;=&quot;))
    .collect(Collectors.toMap(val-&gt; val[0], val-&gt; val[1]));
</code></pre>
","1","63936646"
"<p>In Javascript / Typescript you can map the array and split the string on '='</p>
<pre><code>var array = [&quot;statusCode=1&quot;];
var object = array.map(v =&gt; {
  let keyValueArr = v.split('=');
  return { [keyValueArr[0]]: keyValueArr[1] }
});
console.log(object)
</code></pre>
","1","63936646"
"<pre><code>package com.examplehub.basics;

import java.util.Arrays;

public class Array {

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};

        /*
         * numbers[0] = 1
         * numbers[1] = 2
         * numbers[2] = 3
         * numbers[3] = 4
         * numbers[4] = 5
         */
        System.out.println(&quot;numbers[0] = &quot; + numbers[0]);
        System.out.println(&quot;numbers[1] = &quot; + numbers[1]);
        System.out.println(&quot;numbers[2] = &quot; + numbers[2]);
        System.out.println(&quot;numbers[3] = &quot; + numbers[3]);
        System.out.println(&quot;numbers[4] = &quot; + numbers[4]);

        /*
         * array index is out of bounds
         */
        //System.out.println(numbers[-1]);
        //System.out.println(numbers[5]);


        /*
         * numbers[0] = 1
         * numbers[1] = 2
         * numbers[2] = 3
         * numbers[3] = 4
         * numbers[4] = 5
         */
        for (int i = 0; i &lt; 5; i++) {
            System.out.println(&quot;numbers[&quot; + i + &quot;] = &quot; + numbers[i]);
        }

        /*
         * length of numbers = 5
         */
        System.out.println(&quot;length of numbers = &quot; + numbers.length);

        /*
         * numbers[0] = 1
         * numbers[1] = 2
         * numbers[2] = 3
         * numbers[3] = 4
         * numbers[4] = 5
         */
        for (int i = 0; i &lt; numbers.length; i++) {
            System.out.println(&quot;numbers[&quot; + i + &quot;] = &quot; + numbers[i]);
        }

        /*
         * numbers[4] = 5
         * numbers[3] = 4
         * numbers[2] = 3
         * numbers[1] = 2
         * numbers[0] = 1
         */
        for (int i = numbers.length - 1; i &gt;= 0; i--) {
            System.out.println(&quot;numbers[&quot; + i + &quot;] = &quot; + numbers[i]);
        }

        /*
         * 12345
         */
        for (int number : numbers) {
            System.out.print(number);
        }
        System.out.println();

        /*
         * [1, 2, 3, 4, 5]
         */
        System.out.println(Arrays.toString(numbers));



        String[] company = {&quot;Google&quot;, &quot;Facebook&quot;, &quot;Amazon&quot;, &quot;Microsoft&quot;};

        /*
         * company[0] = Google
         * company[1] = Facebook
         * company[2] = Amazon
         * company[3] = Microsoft
         */
        for (int i = 0; i &lt; company.length; i++) {
            System.out.println(&quot;company[&quot; + i + &quot;] = &quot; + company[i]);
        }

        /*
         * Google
         * Facebook
         * Amazon
         * Microsoft
         */
        for (String c : company) {
            System.out.println(c);
        }

        /*
         * [Google, Facebook, Amazon, Microsoft]
         */
        System.out.println(Arrays.toString(company));

        int[][] twoDimensionalNumbers = {
                {1, 2, 3},
                {4, 5, 6, 7},
                {8, 9},
                {10, 11, 12, 13, 14, 15}
        };

        /*
         * total rows  = 4
         */
        System.out.println(&quot;total rows  = &quot; + twoDimensionalNumbers.length);

        /*
         * row 0 length = 3
         * row 1 length = 4
         * row 2 length = 2
         * row 3 length = 6
         */
        for (int i = 0; i &lt; twoDimensionalNumbers.length; i++) {
            System.out.println(&quot;row &quot; + i + &quot; length = &quot; + twoDimensionalNumbers[i].length);
        }

        /*
         * row 0 = 1 2 3
         * row 1 = 4 5 6 7
         * row 2 = 8 9
         * row 3 = 10 11 12 13 14 15
         */
        for (int i = 0; i &lt; twoDimensionalNumbers.length; i++) {
            System.out.print(&quot;row &quot; + i + &quot; = &quot;);
            for (int j = 0; j &lt; twoDimensionalNumbers[i].length; j++) {
                System.out.print(twoDimensionalNumbers[i][j] + &quot; &quot;);
            }
            System.out.println();
        }

        /*
         * row 0 = [1, 2, 3]
         * row 1 = [4, 5, 6, 7]
         * row 2 = [8, 9]
         * row 3 = [10, 11, 12, 13, 14, 15]
         */
        for (int i = 0; i &lt; twoDimensionalNumbers.length; i++) {
            System.out.println(&quot;row &quot; + i + &quot; = &quot; + Arrays.toString(twoDimensionalNumbers[i]));
        }

        /*
         * 1 2 3
         * 4 5 6 7
         * 8 9
         * 10 11 12 13 14 15
         */
        for (int[] ints : twoDimensionalNumbers) {
            for (int num : ints) {
                System.out.print(num + &quot; &quot;);
            }
            System.out.println();
        }

        /*
         * [1, 2, 3]
         * [4, 5, 6, 7]
         * [8, 9]
         * [10, 11, 12, 13, 14, 15]
         */
        for (int[] ints : twoDimensionalNumbers) {
            System.out.println(Arrays.toString(ints));
        }


        int length = 5;
        int[] array = new int[length];
        for (int i = 0; i &lt; 5; i++) {
            array[i] = i + 1;
        }

        /*
         * [1, 2, 3, 4, 5]
         */
        System.out.println(Arrays.toString(array));

    }
}
</code></pre>
<p><a href=""https://github.com/examplehub/Java/blob/master/src/main/java/com/examplehub/basics/Array.java"" rel=""nofollow noreferrer"">source from examplehub/java</a></p>
","0","1200621"
"<p>Create a Strint array with all weekdays (<code>{&quot;Sunday&quot;, &quot;Monday&quot;...}</code>) and than get the name by index like this:</p>
<pre><code>int day = 2;
System.out.println(weekdays[day - 1]);//output Monday
</code></pre>
","1","64586481"
"<p>You can use Apache <a href=""http://commons.apache.org/io/"" rel=""noreferrer"">Commons IO</a> to handle this and similar tasks.</p>

<p>The <code>IOUtils</code> type has a static method to read an <code>InputStream</code> and return a <code>byte[]</code>.</p>

<pre><code>InputStream is;
byte[] bytes = IOUtils.toByteArray(is);
</code></pre>

<p>Internally this creates a <code>ByteArrayOutputStream</code> and copies the bytes to the output, then calls <code>toByteArray()</code>. It handles large files by copying the bytes in blocks of 4KiB.</p>
","1175","1264709"
"<p>Below Codes</p>

<pre><code>public static byte[] serializeObj(Object obj) throws IOException {
  ByteArrayOutputStream baOStream = new ByteArrayOutputStream();
  ObjectOutputStream objOStream = new ObjectOutputStream(baOStream);

  objOStream.writeObject(obj); 
  objOStream.flush();
  objOStream.close();
  return baOStream.toByteArray(); 
} 
</code></pre>

<p>OR</p>

<pre><code>BufferedImage img = ...
ByteArrayOutputStream baos = new ByteArrayOutputStream(1000);
ImageIO.write(img, ""jpeg"", baos);
baos.flush();
byte[] result = baos.toByteArray();
baos.close();
</code></pre>
","-3","1264709"
"<p>Do you really need the image as a <code>byte[]</code>? What exactly do you expect in the <code>byte[]</code> - the complete content of an image file, encoded in whatever format the image file is in, or RGB pixel values?</p>

<p>Other answers here show you how to read a file into a <code>byte[]</code>. Your <code>byte[]</code> will contain the exact contents of the file, and you'd need to decode that to do anything with the image data.</p>

<p>Java's standard API for reading (and writing) images is the ImageIO API, which you can find in the package <code>javax.imageio</code>. You can read in an image from a file with just a single line of code:</p>

<pre><code>BufferedImage image = ImageIO.read(new File(""image.jpg""));
</code></pre>

<p>This will give you a <code>BufferedImage</code>, not a <code>byte[]</code>. To get at the image data, you can call <code>getRaster()</code> on the <code>BufferedImage</code>. This will give you a <code>Raster</code> object, which has methods to access the pixel data (it has several <code>getPixel()</code> / <code>getPixels()</code> methods).</p>

<p>Lookup the API documentation for <code>javax.imageio.ImageIO</code>, <code>java.awt.image.BufferedImage</code>, <code>java.awt.image.Raster</code> etc.</p>

<p>ImageIO supports a number of image formats by default: JPEG, PNG, BMP, WBMP and GIF. It's possible to add support for more formats (you'd need a plug-in that implements the ImageIO service provider interface).</p>

<p>See also the following tutorial: <a href=""http://java.sun.com/docs/books/tutorial/2d/images/index.html"" rel=""noreferrer"">Working with Images</a></p>
","19","1264709"
"<pre><code>Class clazz = Class.forName(""ReflectionTest"");    
Method m = clazz.getDeclaredMethod(""getArray"");
Object o1 = m.invoke(o, arg);
int array[][] = (int[][])o1;
System.out.println(""Array length: "" + array.length);
System.out.println(""Array length: "" + array[0].length);
</code></pre>
","0","1764339"
"<p>Use <code>java.lang.reflect.Array.getLength(obj)</code>.</p>
","0","1764339"
"<p>There is no such thing as ""length"" for multi-dimensional array; it may not be rectangular. I'm guessing you're talking about the number of dimensions. You need to descend into it iteratively and count.</p>

<pre><code>public int getDimensionCount(Object array) {
  int count = 0;
  Class arrayClass = array.getClass();
  while ( arrayClass.isArray() ) {
    count++;
    arrayClass = arrayClass.getComponentType();
  }
  return count;
}
</code></pre>
","14","1764339"
"<p>Java arrays have lengths per instance, not all arrays in the same dimension have to have equals lengths. That said, you can get the lengths of instances in the.</p>

<p>Dimensions can be counted by the number of '[' in their name, this is quicker than descending the type hierarchy. The following code:</p>

<pre><code>        int[][][] ary = {{{0},{1}}};

        Class cls = ary.getClass();

        boolean isAry = cls.isArray();
        String clsName = cls.getName();

        System.out.println(""is array="" + isAry);
        System.out.println(""name="" + clsName);

        int nrDims = 1 + clsName.lastIndexOf('[');

        System.out.println(""nrDims="" + nrDims);

        Object orly = ary;

        for (int n = 0; n &lt; nrDims; n++) {

            int len = Array.getLength(orly);

            System.out.println(""dim["" + n + ""]="" + len);

            if (0 &lt; len) {
                orly = Array.get(orly, 0);
            }
        }
</code></pre>

<p>gives the following output:</p>

<pre><code>is array=true
name=[[[I
nrDims=3
dim[0]=1
dim[1]=2
dim[2]=1
</code></pre>
","10","1764339"
"<p>Arrays are ""special"" in Java - they don't implement any interfaces, which means they can't implement the collection interfaces. They're collections in ""natural language"" terms, and you can use the enhanced for loop over them - but if you want to use an array within the collection API, you'll need something like <a href=""http://java.sun.com/javase/6/docs/api/java/util/Arrays.html#asList(T...)"" rel=""nofollow noreferrer""><code>Arrays.asList</code></a> which wraps an array with the <code>List&lt;T&gt;</code> interface. (The result is only a <em>view</em> on the array - changes to the array are visible through the list, and vice versa.)</p>

<p>(This is in contrast to .NET, where <code>T[]</code> implements <code>IList&lt;T&gt;</code> etc.)</p>
","10","2089074"
"<pre><code>import java.util.Random;

...

Random random = new Random();
System.out.println(n[random.nextInt(n.length)]);
</code></pre>
","16","2527640"
"<p>In general terms, get a random integer ranging from a minimum of 0 to a maximum of the array length -1, and use that as the array index.</p>
","0","2527640"
"<pre><code>ArrayList.size()/2
</code></pre>
","5","2707605"
"<p>If you have <code>N</code> items, the middle item is usually defined as item at index <code>N/2</code> (0-based).</p>

<pre><code>10 items
0,1,2,3,4,5,6,7,8,9
          |
          5

13 items
0,1,2,3,4,5,6,7,8,9,0,1,2
            |
            6
</code></pre>

<p>Generally, if you need to find the middle of items between index <code>low</code> (inclusive) and <code>high</code> (exclusive), it's mathematically <code>int mid = (low + high) / 2</code>. But due to arithmetic overflow in limited-precision integer, the proper formula is <code>int mid = (low + high) &gt;&gt;&gt; 1;</code></p>

<h3>See also</h3>

<ul>
<li>Google Research Blog post by Josh Bloch

<ul>
<li><a href=""http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html"" rel=""noreferrer"">Extra, Extra - Read All About It: Nearly All Binary Searches and Mergesorts are Broken</a></li>
</ul></li>
</ul>
","6","2707605"
"<p>If the size of ArrayList is <strong>even</strong> in number, then use
     <strong>(ArrayList.size()/2)+1</strong> or    <strong>(ArrayList.size()/2)</strong> as the middle.
If the size of ArrayList is <strong>odd</strong> in number, then use     <strong>(ArrayList.size()+1)/2</strong> as the middle.</p>
","4","2707605"
"<p>Stop referencing it.</p>
","59","2974251"
"<p>Removing all the reference to that array of bytes. The garbage collector will take care of the rest.</p>
","6","2974251"
"<p>When creating a new byte[] in Java, you do something like</p>

<pre><code>byte[] myArray = new byte[54];
</code></pre>

<p>To free it, you should do</p>

<pre><code>myArray = null;
</code></pre>

<p>If something else references your byte array, like</p>

<pre><code>yourArray = myArray;
</code></pre>

<p>you need to also set the other references to null, like so</p>

<pre><code>yourArray = null;
</code></pre>

<p>In Java garbage collection is automatic.  If the JVM can detect that a piece of memory is no longer reachable by the entire program, then the JVM will free the memory for you.</p>
","15","2974251"
"<p>Setting all references to it to null will make it a candidate for Java's automatic garbage collection. You can't be sure how long it will take for this to happen though. If you really need to explicitly reclaim the memory immediately you can make a call to <code>System.gc();</code></p>

<p>Also just to clear you may not need to set the references to null explicitly. If the references go out of scope they are automatically nulled e.g. a local variable reference will be nulled once the method it is declared in finishes executing. So local variables are usually released implicitly all the time during an apps runtime.</p>
","3","2974251"
"<pre><code>Input Stream is ...
ByteArrayOutputStream bos = new ByteArrayOutputStream();
int next = in.read();
while (next &gt; -1) {
    bos.write(next);
    next = in.read();
}
bos.flush();
byte[] result = bos.toByteArray();
bos.close();
</code></pre>
","8","1264709"
"<p>There are actually two limits.  One, the maximum element indexable for the array and, two, the amount of memory available to your application.  Depending on the amount of memory available and the amount used by other data structures, you may hit the memory limit before you reach the maximum addressable array element.</p>
","42","3038392"
"<p>Haven't seen the right answer, even though it's very easy to test.</p>

<p>In a recent HotSpot VM, the correct answer is <code>Integer.MAX_VALUE - 5</code>.  Once you go beyond that:</p>

<pre><code>public class Foo {
  public static void main(String[] args) {
    Object[] array = new Object[Integer.MAX_VALUE - 4];
  }
}
</code></pre>

<p>You get:</p>

<pre><code>Exception in thread ""main"" java.lang.OutOfMemoryError:
  Requested array size exceeds VM limit
</code></pre>
","190","3038392"
"<p>Yup - just use the constructor which takes a collection as its parameter:</p>

<pre><code>Vector&lt;String&gt; vector = new Vector&lt;String&gt;();
// (... Populate vector here...)
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(vector);
</code></pre>

<p>Note that it only does a shallow copy.</p>
","66","3440082"
"<p>It helps mitigate the exponential increase in time that would result if the array was expanded by one element instead.</p>
","2","4421843"
"<p>You can create an array with a small capacity even 0 and you small capacities need to grow relatively quickly.</p>
","0","4421843"
"<p>You can't. Java doesn't have direct memory access.</p>
","1","4676229"
"<p>There is no programmer-realizable notion of an ""address"" in Java.  In a language like C or C++, objects' identities are equated with their address - two objects are the same object if they live in the same memory location.  In Java, this notion of identity is decoupled from the object's address.  This allows some optimizations that are not possible in C++.  For example, the garbage collector could, in theory, move objects around in memory to avoid fragmentation, so long as it modifies references so they point to the right location.  Because memory addresses can't be accessed directly by the programmer, this operation is permissible.  In C++, it wouldn't work, because the compiler couldn't tell if a particular bit pattern in memory was some sort of encoded pointer.</p>
","5","4676229"
"<p>You can extend any class that is not <strong>final</strong> in Java. Having said that, you should avoid inheritance if there is no <strong>true is-a</strong> relationship. Consider composition for reuse. Read about <a href=""http://en.wikipedia.org/wiki/Liskov_substitution_principle"" rel=""noreferrer"">Liskov substitution principle</a></p>
","19","4779173"
"<p>Just try it out. The class is not final, it's constructor is public, so you can. However, it's probably no good idea for a beginner.</p>

<p>Most of the time, it's no good idea for anyone. Imagine you add some functionality and get <code>ExtList1 extends ArrayList</code>. A college of yours adds a different independent functionality, so you have <code>ExtList2 extends ArrayList</code>. Now you want them both at once and you're out of luck.</p>

<p>Or you need the same feature with a different base list implementation (maybe <code>LinkedList</code>, though it's virtually always wrong to use it). Again, out of luck.</p>

<p>These are all cases when delegation wins. It needn't be more verbose when <a href=""https://google.github.io/guava/releases/23.0/api/docs/com/google/common/collect/ForwardingList.html"" rel=""nofollow noreferrer"">someone has created the base already</a>.</p>

<hr>

<p>I'd only inherit from <code>ArrayList</code>, if there was a very good reason for doing exactly this. Maybe some <em>really extreme</em> performance requirements based on proper JMH benchmarks.</p>
","0","4779173"
"<p>Yes you can.</p>

<pre><code>public class MyArrayList&lt;E&gt; extends ArrayList&lt;E&gt;
{
}
</code></pre>

<p>However, I'm not sure why you would want to do this.</p>
","22","4779173"
"<p>ArrayList is not final class and it provides public constructor, so technically it can be extended.</p>

<p>But best practice is <strong>delegate</strong> rather than extend.
See: <a href=""http://en.wikipedia.org/wiki/Decorator_pattern"" rel=""nofollow"">Decorator pattern</a></p>
","2","4779173"
"<p>As many other have said, yes, you can extend class <code>ArrayList</code>, but it is not something that you should normally do; it is not considered good practice in Java.</p>

<p>I'm mainly a Java programmer, but the past months I've also been working on C# code. It seems like it's a common idiom in C# to extend the standard collection classes if you need a collection of a specific type (I actually don't know if it is a common idiom in general - at least the people who wrote the code I'm working with are doing this all the time).</p>

<p>So if they have a class <code>Person</code> and they need a list of persons, they'd create a class <code>PersonList</code> that extends the C# equivalent of <code>ArrayList&lt;Person&gt;</code>.</p>

<p>The common idiom in Java would just to use <code>ArrayList&lt;Person&gt;</code> if you need a list of <code>Person</code> objects and not to create a specific subclass for this.</p>

<p>I'd advise you to stick to the common Java way of doing things, and not create your own subclasses of <code>ArrayList</code> or other collection classes.</p>
","10","4779173"
"<p>Try the <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#toString%28java.lang.Object%5B%5D%29"" rel=""noreferrer"">Arrays.toString</a> overloaded methods.</p>

<p>Or else, try this below generic implementation:</p>

<pre><code>public static void main(String... args) throws Exception {

    String[] array = {""ABC"", ""XYZ"", ""PQR""};

    System.out.println(new Test().join(array, "", ""));
}

public &lt;T&gt; String join(T[] array, String cement) {
    StringBuilder builder = new StringBuilder();

    if(array == null || array.length == 0) {
        return null;
    }

    for (T t : array) {
        builder.append(t).append(cement);
    }

    builder.delete(builder.length() - cement.length(), builder.length());

    return builder.toString();
}
</code></pre>
","7","5283444"
"<p>Use Apache commons <a href=""https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#join(java.lang.Object[],%20java.lang.String)""><code>StringUtils.join()</code></a>.  It takes an array, as a parameter (and also has overloads for <code>Iterable</code> and <code>Iterator</code> parameters) and calls <code>toString()</code> on each element (if it is not null) to get each elements string representation.  Each elements string representation is then joined into one string with a separator in between if one is specified:</p>

<pre><code>String joinedString = StringUtils.join(new Object[]{""a"", ""b"", 1}, ""-"");
System.out.println(joinedString);
</code></pre>

<p>Produces:</p>

<pre><code>a-b-1
</code></pre>
","103","5283444"
"<p>You could do this, given an array <code>a</code> of primitive type:</p>

<pre><code>StringBuffer result = new StringBuffer();
for (int i = 0; i &lt; a.length; i++) {
   result.append( a[i] );
   //result.append( optional separator );
}
String mynewstring = result.toString();
</code></pre>
","14","5283444"
"<p>You want code which produce string from arrayList, </p>

<pre><code>Iterate through all elements in list and add it to your String result
</code></pre>

<p>you can do this in 2 ways: using String as result or StringBuffer/StringBuilder. </p>

<p><strong>Example:</strong></p>

<pre><code>String result = """";
for (String s : list) {
    result += s;
}
</code></pre>

<p>...but this isn't good practice because of performance reason. Better is using <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuffer.html"" rel=""nofollow"">StringBuffer</a> (threads safe) or <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/lang/StringBuilder.html"" rel=""nofollow"">StringBuilder</a> which are more appropriate to adding Strings</p>
","0","5283444"
"<p>I like using <a href=""http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Joiner.html"" rel=""noreferrer"">Google's Guava Joiner</a> for this, e.g.:</p>

<pre><code>Joiner.on("", "").skipNulls().join(""Harry"", null, ""Ron"", ""Hermione"");
</code></pre>

<p>would produce the same String as:</p>

<pre><code>new String(""Harry, Ron, Hermione"");
</code></pre>

<p>ETA: Java 8 has similar support now:</p>

<pre><code>String.join("", "", ""Harry"", ""Ron"", ""Hermione"");
</code></pre>

<p>Can't see support for skipping null values, but that's easily worked around.</p>
","36","5283444"
"<p>With control over the delimiter (Java 8+):</p>
<pre><code>String str = String.join(&quot;,&quot;, arr);
</code></pre>
<p>...or &lt;8:</p>
<pre><code>StringBuilder builder = new StringBuilder();
for(String s : arr) {
    builder.append(s);
}
String str = builder.toString();
</code></pre>
<p>Alternatively, if you just want a &quot;debug-style&quot; dump of an array:</p>
<pre><code>String str = Arrays.toString(arr);
</code></pre>
<p>And if you're coming from the Android angle:</p>
<pre><code>String str = TextUtils.join(&quot;,&quot;, arr);
</code></pre>
<p>You can modify the above depending on what characters, if any, you want in between strings.</p>
<p>You may see near identical code to the pre-Java 8 code but using <code>StringBuffer</code> - <code>StringBuilder</code> is a newer class that's not thread-safe, but therefore has better performance in a single thread because it does away with unneeded synchronization. In short, you're better using <code>StringBuilder</code> in 99% of cases - functionality wise, the two are identical.</p>
<p><strong>DON'T</strong> use a string and just append to it with += like some of the answers show here. This sends the GC through the roof because you're creating and throwing away as many string objects as you have items in your array. For small arrays you might not really notice the difference, but for large ones it can be orders of magnitude slower.</p>
","492","5283444"
"<p>Just a guess, but quicksort is O(n^2) in the worst case, while merge sort is stable (guaranteed O(n log n)).</p>

<p>The worst case for quicksort is triggered by equal values.. and equal primitives are identical, while ""equal"" objects may not be.</p>
","1","5411449"
"<p>The reason for using mergesort is that they want a stable algorithm - e.g. where equal objects (by <code>compareTo()</code> or <code>compare()</code>) are at the same relative order as before.</p>

<p>For primitives, equality implies ""non-distinguish-ability"". When sorting <code>{5, 3, 5}</code> to <code>{3, 5, 5}</code> it does not matter which of the fives was the first one before.
So we can use the quicker (and non-stable) quicksort algorithm here.</p>
","14","5411449"
"<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();
map.put (1, ""Mark"");
map.put (2, ""Tarryn"");
List&lt;String&gt; list = new ArrayList&lt;String&gt;(map.values());
for (String s : list) {
    System.out.println(s);
}
</code></pre>
","94","5483330"
"<p>Basically you should not mess the question with answer, because it is confusing. </p>

<p>Then you could specify what convert mean and pick one of this solution</p>

<pre><code>List&lt;Integer&gt; keyList = Collections.list(Collections.enumeration(map.keySet()));

List&lt;String&gt; valueList = Collections.list(Collections.enumeration(map.values()));
</code></pre>
","7","5483330"
"<p>Assuming you have:</p>

<pre><code>HashMap&lt;Key, Value&gt; map; // Assigned or populated somehow.
</code></pre>

<p>For a list of values:</p>

<pre><code>List&lt;Value&gt; values = new ArrayList&lt;Value&gt;(map.values());
</code></pre>

<p>For a list of keys:</p>

<pre><code>List&lt;Key&gt; keys = new ArrayList&lt;Key&gt;(map.keySet());
</code></pre>

<p>Note that the order of the keys and values will be unreliable with a HashMap; use a <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/util/LinkedHashMap.html"" rel=""noreferrer"">LinkedHashMap</a> if you need to preserve one-to-one correspondence of key and value positions in their respective lists.</p>
","75","5483330"
"<p>If you only want it to iterate over your HashMap, no need for a list:</p>

<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();
map.put (1, ""Mark"");
map.put (2, ""Tarryn"");
for (String s : map.values()) {
    System.out.println(s);
}
</code></pre>

<p>Of course, if you want to modify your map structurally (i.e. more than only changing the value for an existing key) while iterating, then you better use the ""copy to ArrayList"" method, since otherwise you'll get a ConcurrentModificationException. Or export as an array:</p>

<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();
map.put (1, ""Mark"");
map.put (2, ""Tarryn"");
for (String s : map.values().toArray(new String[]{})) {
    System.out.println(s);
}
</code></pre>
","1","5483330"
"<p>Using the <a href=""http://download.oracle.com/javase/6/docs/api/java/lang/String.html#getBytes(java.lang.String)"" rel=""noreferrer""><code>getBytes</code></a> method, giving it the appropriate <a href=""http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html"" rel=""noreferrer""><code>Charset</code></a> (or <code>Charset</code> name).</p>

<p>Example:</p>

<pre><code>String s = ""Hello, there."";
byte[] b = s.getBytes(StandardCharsets.US_ASCII);
</code></pre>

<p>(Before Java 7: <code>byte[] b = s.getBytes(""US-ASCII"");</code>)</p>
","157","5688042"
"<pre><code>String s = ""ASCII Text"";
byte[] bytes = s.getBytes(""US-ASCII"");
</code></pre>
","4","5688042"
"<p>There is only one character wrong in the code you tried:</p>

<pre><code>Charset characterSet = Charset.forName(""US-ASCII"");
String string = ""Wazzup"";
byte[] bytes = String.getBytes(characterSet);
               ^
</code></pre>

<p>Notice the upper case ""String"". This tries to invoke a static method on the string class, which does not exist. Instead you need to invoke the method on your string instance:</p>

<pre><code>byte[] bytes = string.getBytes(characterSet);
</code></pre>
","5","5688042"
"<p>import java.util.Collections;</p>

<p>then use Collections.sort();</p>
","1","5814791"
"<pre><code>ArrayList&lt;String&gt; names = new ArrayList&lt;String&gt;();
names =fillNames() // whatever method you need to fill here;
Collections.sort(names);
</code></pre>

<p><a href=""http://download.oracle.com/javase/6/docs/api/java/util/Collections.html#sort%28java.util.List%29"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/api/java/util/Collections.html#sort%28java.util.List%29</a></p>

<blockquote>
  <p>Sorts the specified list into ascending order, according to the natural ordering of its elements. All elements in the list must implement the Comparable interface. Furthermore, all elements in the list must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the list).</p>
</blockquote>

<p><code>String</code> implements <code>Comparable</code>:</p>

<blockquote>
  <p>java.lang Class String</p>
  
  <p>java.lang.Object   extended by
  java.lang.String</p>
  
  <p>All Implemented Interfaces:
      Serializable, CharSequence, Comparable</p>
</blockquote>

<p><a href=""http://download.oracle.com/javase/6/docs/api/java/lang/String.html"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/api/java/lang/String.html</a></p>
","3","5814791"
"<p>Another solution but <code>Collections.sort()</code> is best. I just want to show alternative</p>

<pre><code>    ArrayList&lt;String&gt; strings = new ArrayList&lt;String&gt;();
    strings.add(""a"");
    strings.add(""ab"");
    strings.add(""aa"");

    String[] stringsArray = new String[strings.size()];
    strings.toArray(stringsArray);
    Arrays.sort(stringsArray);

    List&lt;String&gt; sorted = Arrays.asList(stringsArray);

    System.out.println(sorted);
</code></pre>
","2","5814791"
"<pre><code>/*InputStream class_InputStream = null;
I am reading class from DB 
class_InputStream = rs.getBinaryStream(1);
Your Input stream could be from any source
*/
int thisLine;
ByteArrayOutputStream bos = new ByteArrayOutputStream();
while ((thisLine = class_InputStream.read()) != -1) {
    bos.write(thisLine);
}
bos.flush();
byte [] yourBytes = bos.toByteArray();

/*Don't forget in the finally block to close ByteArrayOutputStream &amp; InputStream
 In my case the IS is from resultset so just closing the rs will do it*/

if (bos != null){
    bos.close();
}
</code></pre>
","-1","1264709"
"<p>@Adamski: You can avoid buffer entirely.</p>

<p>Code copied from <a href=""http://www.exampledepot.com/egs/java.io/File2ByteArray.html"">http://www.exampledepot.com/egs/java.io/File2ByteArray.html</a> (Yes, it is very verbose, but needs half the size of memory as the other solution.)</p>

<pre><code>// Returns the contents of the file in a byte array.
public static byte[] getBytesFromFile(File file) throws IOException {
    InputStream is = new FileInputStream(file);

    // Get the size of the file
    long length = file.length();

    // You cannot create an array using a long type.
    // It needs to be an int type.
    // Before converting to an int type, check
    // to ensure that file is not larger than Integer.MAX_VALUE.
    if (length &gt; Integer.MAX_VALUE) {
        // File is too large
    }

    // Create the byte array to hold the data
    byte[] bytes = new byte[(int)length];

    // Read in the bytes
    int offset = 0;
    int numRead = 0;
    while (offset &lt; bytes.length
           &amp;&amp; (numRead=is.read(bytes, offset, bytes.length-offset)) &gt;= 0) {
        offset += numRead;
    }

    // Ensure all the bytes have been read in
    if (offset &lt; bytes.length) {
        throw new IOException(""Could not completely read file ""+file.getName());
    }

    // Close the input stream and return bytes
    is.close();
    return bytes;
}
</code></pre>
","9","1264709"
"<p>No.</p>

<p>To do something like this, you have to use a Map.</p>

<pre><code>Map&lt;String, Integer&gt; aMap = new HashMap&lt;String, Integer&gt;();
aMap.put(""a"" , Integer.valueOf(1));
</code></pre>
","79","6943588"
"<p>No, that would be a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/Map.html"" rel=""noreferrer"">Map</a> in Java.</p>

<p>(The type would be <code>Map&lt;String,Integer&gt;</code>.)</p>
","15","6943588"
"<p>No - you want a map to do that:</p>

<pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();
map.put(""a"", 2);
</code></pre>

<p>Then to get it:</p>

<pre><code>int val = map.get(""a""); //2
</code></pre>

<p>You can only use the square bracket syntax for arrays, not for any of the collections. So something like:</p>

<pre><code>int val = map[""a""]; //Compile error
</code></pre>

<p>Will always be illegal. You have to use the <code>get()</code> method.</p>
","41","6943588"
"<p>Use a <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow"">List</a>. The size does not need to be declared on creation of the List. The toArray() method will return an array representation of the list. There are multiple implementations you can use but the most popular tends to be ArrayList (though it is best to map the implementation to your particular situation).</p>
","11","7584467"
"<p>Arrays have a fixed size after creation. The size doesn't need to be known at <em>compile-time</em>, but it <em>does</em> need to be known at creation time. For example:</p>

<pre><code>public String[] createArray(int size) {
    // Not hard-coded, but array is not expandable
    return new String[size];
}
</code></pre>

<p>If you want a collection which can grow an shrink over time, look at the various <a href=""http://download.oracle.com/javase/6/docs/api/java/util/List.html"" rel=""nofollow""><code>List&lt;E&gt;</code></a> implementations, such as <a href=""http://download.oracle.com/javase/6/docs/api/java/util/ArrayList.html"" rel=""nofollow""><code>ArrayList&lt;E&gt;</code></a>.</p>
","10","7584467"
"<p>Object[] will always be fixed size.  If you need a variable length collection, try ArrayList, LinkedList, or one of the many others.</p>

<p>Pick the collection carefully, since they all have different performance aspects.</p>
","1","7584467"
"<p>You can create a new array and initialize it like this.</p>

<pre><code>String[] strArray = {""Initialize"",""Array"",""Like"",""This""};
</code></pre>

<p>If you want an array with a dynamic size I would recommend using an ArrayList.</p>
","0","7584467"
"<p>For mutable arrays other container objects are used.</p>

<p>When using a set of objects, an ArrayList or Vector object is used.
You can also store objects with an object key e.g. ""Name"" = ""Ben"" instead of [0] = ""Ben"".</p>

<pre><code>Vector v = new Vector();
for(int i = 0; i &lt; 100; i++){
 Object o = new Object();
 // init object
 v.addElement(o);
}

for(int i = 0; i &lt; 100; i++){
 Object o = v.elementAt(i);
 // manipulate object
}
</code></pre>

<p>Now you have an arbritairy list of object of undefined length.
Size found by using vector.size() method.</p>

<p>java.util package is required and part of J2SE 1.3 and higher.</p>
","1","7584467"
"<p>As noted elsewhere, an array object has a fixed size.  If there's some reason you <em>must</em> use an array, you can use one or both of these techniques:</p>

<ul>
<li><p>Make it the larger than you need, leaving the unused
entries null.  You may want to keep a ""slotsUsed"" variable.</p></li>
<li><p>When the array gets too small, make a bigger one and copy the
contents into it.</p></li>
</ul>

<p>These are both used inside ArrayList.</p>
","1","7584467"
"<p>Arrays are fixed in length. I would recommend using a Collection.</p>

<p>Here is an article on collections:</p>

<p><a href=""http://en.wikipedia.org/wiki/Java_collections_framework"" rel=""nofollow"">http://en.wikipedia.org/wiki/Java_collections_framework</a></p>

<p>With these, you can add elements by using an Add() command or something similar.</p>

<p>As mentioned in the previous answers, an ArrayList or List are collections.</p>
","3","7584467"
"<p>If you want an array of primitive instead of objects, you can use Trove4j. Otherwise use an ArrayList, or CopyOnWriteArrayList to wrap an array. There are other List implementations but these do not act like arrays for access time.</p>
","0","7584467"
"<p>I just wrote a class to do the same thing, but is more flexible as it will accept Objects accordingly. </p>

<pre><code>public class ExteriorCastor {
    public static  ArrayList vectorToArrayList(Vector vector){
        if (vector == null){return null;}
        return new ArrayList&lt;Object&gt;(vector);
    }
}
</code></pre>
","2","3440082"
"<p>The performance benefit is realised in cases where you are about to add multiple elements to the list and know how many you're going to be adding.  By calling <code>ensureCapacity(int)</code> you cause the underlying array to be resized once instead of potentially many times.</p>

<p>Note however, that in reality you should rarely need to call this method; typically you will either instantiate the <code>ArrayList</code> with a known capacity, or in cases where the list size is unknown you should probably be considering using a <code>LinkedList</code> instead.</p>

<p>Also note that the resize strategy of <code>ArrayList</code> is typically implemented in such a way that array copies are a rare operation (e.g. the capacity may increase by 50% every time the array becomes full).  In other words, even if you do not call <code>ensureCapacity</code> in advance you are unlikely to notice any slow-down within your code.</p>
","6","7952700"
"<p>An application can increase the capacity of an ArrayList instance before adding a large number of elements using the ensureCapacity operation. This may reduce the amount of incremental reallocation.<br>
<code>ArrayList.ensureCapacity()</code> Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.</p>
","1","7952700"
"<p>Convert string to ascii values.</p>

<pre><code>   String test = ""ABCD"";

   for ( int i = 0; i &lt; test.length(); ++i ) {
   char c = test.charAt( i );
   int j = (int) c;
   System.out.println(j);
   }
</code></pre>
","0","5688042"
"<p>This is (of course) totally VM-dependent.</p>

<p>Browsing through the source code of OpenJDK 7 and 8 <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/util/ArrayList.java#l190"" rel=""noreferrer""><code>java.util.ArrayList</code></a>, <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/util/Hashtable.java#l367"" rel=""noreferrer""><code>.Hashtable</code></a>, <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/util/AbstractCollection.java#l193"" rel=""noreferrer""><code>.AbstractCollection</code></a>,  <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/util/PriorityQueue.java#l263"" rel=""noreferrer""><code>.PriorityQueue</code></a>, and <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/util/Vector.java#l245"" rel=""noreferrer""><code>.Vector</code></a>, you can see this <strong>claim</strong> being repeated:</p>

<blockquote>
<pre><code>/**
 * Some VMs reserve some header words in an array.
 * Attempts to allocate larger arrays may result in
 * OutOfMemoryError: Requested array size exceeds VM limit
 */
private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
</code></pre>
</blockquote>

<p>which is added by Martin Buchholz (Google) <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/ec45423a4700#l3.1"" rel=""noreferrer"">on 2010-05-09</a>; reviewed by Chris Hegarty (Oracle).</p>

<p>So,  <em>probably</em>  we can say that the maximum ""safe"" number would be  <strong>2 147 483 639</strong> (<code>Integer.MAX_VALUE - 8</code>) and ""attempts to allocate larger arrays may result in <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/OutOfMemoryError.html"" rel=""noreferrer"">OutOfMemoryError</a>"".</p>

<p>(Yes, Buchholz's standalone claim does not include backing evidence, so this is a calculated <a href=""https://yourlogicalfallacyis.com/appeal-to-authority"" rel=""noreferrer"">appeal to authority.</a> Even within OpenJDK itself, we can see code like <a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/ec45423a4700#l4.50"" rel=""noreferrer""><code>return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;</code></a> which shows that <code>MAX_ARRAY_SIZE</code> does not yet have a <em>real</em> use.)</p>
","131","3038392"
"<p>The problem with other proposed solutions is that they will either drop characters that cannot be directly mapped to ASCII, or replace them with a marker character like <code>?</code>. </p>

<p>You might desire to have for example accented characters converted to that same character without the accent. There are a couple of tricks to do this (including building a static mapping table yourself or leveraging existing 'normalization' defined for unicode), but those methods are far from complete.</p>

<p>Your best bet is using the <a href=""http://www.ippatsuman.com/projects/junidecode/index.html"" rel=""noreferrer"">junidecode</a> library, which cannot be complete either but incorporates a lot of experience in the most sane way of transliterating Unicode to ASCII.</p>
","5","5688042"
"<p>If you happen to need this in Android and want to make it work with anything older than FroYo, you can also use <a href=""http://developer.android.com/reference/org/apache/http/util/EncodingUtils.html#getAsciiBytes%28java.lang.String%29"" rel=""nofollow"">EncodingUtils.getAsciiBytes()</a>:</p>

<pre><code>byte[] bytes = EncodingUtils.getAsciiBytes(""ASCII Text"");
</code></pre>
","4","5688042"
"<p>Use vanilla Java's <code>DataInputStream</code> and its <code>readFully</code> Method (exists since at least Java 1.4):</p>

<pre><code>...
byte[] bytes = new byte[(int) file.length()];
DataInputStream dis = new DataInputStream(new FileInputStream(file));
dis.readFully(bytes);
...
</code></pre>

<p>There are some other flavors of this method, but I use this all the time for this use case.</p>
","136","1264709"
"<p>Sometimes it is useful, in case you know an upper bound of the objects your application needs,
to declare the size of an array as</p>

<pre><code>static final int ARRAY_SIZE = 1000;
</code></pre>

<p>This goes near the beginning of the class so it can be easily changed.
In the main code instantiate the array with</p>

<pre><code>Object[] objects = new Object[ARRAY_SIZE];
</code></pre>

<p>Also in case the array you want to use has the same size as another array consider using</p>

<pre><code>Object[] objects = new Object[other_objects.length];
</code></pre>
","0","7584467"
"<p>If you are a <a href=""/questions/tagged/guava"" class=""post-tag"" title=""show questions tagged &#39;guava&#39;"" rel=""tag"">guava</a> user there is a handy <a href=""https://google.github.io/guava/releases/19.0/api/docs/com/google/common/base/Charsets.html"" rel=""nofollow noreferrer""><code>Charsets</code></a> class:</p>

<pre><code>String s = ""Hello, world!"";
byte[] b = s.getBytes(Charsets.US_ASCII);
</code></pre>

<p>Apart from not hard-coding arbitrary charset name in your source code it has a much bigger advantage: <a href=""http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Charsets.html#US_ASCII"" rel=""nofollow noreferrer""><code>Charsets.US_ASCII</code></a> is of <code>Charset</code> type (not <code>String</code>) so you avoid checked <a href=""http://docs.oracle.com/javase/7/docs/api/java/io/UnsupportedEncodingException.html"" rel=""nofollow noreferrer""><code>UnsupportedEncodingException</code></a> thrown only from <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#getBytes(java.lang.String)"" rel=""nofollow noreferrer""><code>String.getBytes(String)</code></a>, but not from <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#getBytes(java.nio.charset.Charset)"" rel=""nofollow noreferrer""><code>String.getBytes(Charset)</code></a>.</p>

<p>In Java 7 there is equivalent <a href=""http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html"" rel=""nofollow noreferrer""><code>StandardCharsets</code></a> class.</p>
","23","5688042"
"<p>Try this:</p>

<pre><code>/**
 * @(#)demo1.java
 *
 *
 * @author 
 * @version 1.00 2012/8/30
 */

import java.util.*;

public class demo1 
{
    Scanner s=new Scanner(System.in);

    String str;
    int key;

    void getdata()
    {
        System.out.println (""plase enter a string"");
        str=s.next();
        System.out.println (""plase enter a key"");
        key=s.nextInt();
    }

    void display()
    {
        char a;
        int j;
        for ( int i = 0; i &lt; str.length(); ++i )
        {

            char c = str.charAt( i );
            j = (int) c + key;
            a= (char) j;

            System.out.print(a);  
        }

        public static void main(String[] args)
        {
            demo1 obj=new demo1();
            obj.getdata();
            obj.display();
        }
    }
}
</code></pre>
","-2","5688042"
"<p>i´m not sure if it is <code>length()</code> or <code>size()</code>.... but the idea is the next:</p>

<pre><code>ArrayList&lt;Object&gt; a;

for(int i = 0;i &lt; Vector.length() ; i++)

    a.add(Vector.elementAt(i); // Again... i´m not sure if this is elementAt() or get()

Vector.finalize();
</code></pre>
","0","3440082"
"<p>If you don't use a fancy encoding all uppercase letters will have values from 65 to 90 and all lowercase letters are between 97 and 122. (See <a href=""http://www.asciitable.com/"" rel=""nofollow"">ASCII Encoding</a>). All bytes with other values are not letters of the alphabet.</p>
","0","13210293"
"<p>If you wanna maintain the same order in your list, say:
your Map looks like:</p>

<pre><code>map.put(1, ""msg1"")
map.put(2, ""msg2"")
map.put(3, ""msg3"")
</code></pre>

<p>and you want your list looks like</p>

<pre><code>[""msg1"", ""msg2"", ""msg3""]   // same order as the map
</code></pre>

<p>you will have to iterate through the Map:</p>

<pre><code>// sort your map based on key, otherwise you will get IndexOutofBoundException
Map&lt;String, String&gt; treeMap = new TreeMap&lt;String, String&gt;(map)

List&lt;String&gt; list = new List&lt;String&gt;();
for (treeMap.Entry&lt;Integer, String&gt; entry : treeMap.entrySet()) {
    list.add(entry.getKey(), entry.getValue());
}  
</code></pre>
","1","5483330"
"<p>I tried to edit @numan's answer with a fix for writing garbage data but edit was rejected. While this short piece of code is nothing brilliant I can't see any other better answer. Here's what makes most sense to me:</p>

<pre><code>ByteArrayOutputStream out = new ByteArrayOutputStream();
byte[] buffer = new byte[1024]; // you can configure the buffer size
int length;

while ((length = in.read(buffer)) != -1) out.write(buffer, 0, length); //copy streams
in.close(); // call this in a finally block

byte[] result = out.toByteArray();
</code></pre>

<p>btw ByteArrayOutputStream need not be closed. try/finally constructs omitted for readability</p>
","1","1264709"
"<p>No, you need to use <code>Collections</code> to use binary search, usually after sorting it.  An <code>ArrayList</code> doesn't know anything about its ordering, and you have to know a list is sorted before you can use binary search.</p>

<p>Alternately, you could use <code>TreeSet</code>, which is as efficient as using a binary search.</p>
","9","16109517"
"<p>No, it doesn't use binary search as lists don't have to be sorted.</p>

<p>Use the utility methods of the Collections class to first sort the list and then to perform a binary search.</p>
","1","16109517"
"<p>No, it would mean adding a overhead at each insertion so it's not included.</p>

<p>Here's the source code : it just tests all values :</p>

<pre><code>218     public boolean contains(Object o) {
219         return indexOf(o) &gt;= 0;
220     }

229     public int indexOf(Object o) {
230         if (o == null) {
231             for (int i = 0; i &lt; size; i++)
232                 if (elementData[i]==null)
233                     return i;
234         } else {
235             for (int i = 0; i &lt; size; i++)
236                 if (o.equals(elementData[i]))
237                     return i;
238         }
239         return -1;
240     }
</code></pre>
","1","16109517"
"<p>No, you need to use Collections to use binary search, usually after sorting it. </p>
","-2","16109517"
"<p>Try the <a href=""http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Arrays.html#deepToString%28java.lang.Object%5B%5D%29"">Arrays.deepToString</a> method.</p>

<p>Returns a string representation of the ""deep contents"" of the specified
     array.  If the array contains other arrays as elements, the string
     representation contains their contents and so on.  This method is
     designed for converting multidimensional arrays to strings</p>
","10","5283444"
"<p>If you know how much elements the array has, a simple way is doing this:</p>

<pre><code>String appendedString = """" + array[0] + """" + array[1] + """" + array[2] + """" + array[3]; 
</code></pre>
","-21","5283444"
"<pre><code>public static byte[] getBytesFromInputStream(InputStream is) throws IOException {
    ByteArrayOutputStream os = new ByteArrayOutputStream(); 
    byte[] buffer = new byte[0xFFFF];
    for (int len = is.read(buffer); len != -1; len = is.read(buffer)) { 
        os.write(buffer, 0, len);
    }
    return os.toByteArray();
}
</code></pre>
","44","1264709"
"<p>Try this:</p>

<pre><code>String arr[] = ""George\nWashington"".split(""\\n""));
</code></pre>
","3","18285340"
"<pre><code>String[] array = arr.split(""\\n"");
</code></pre>
","4","18285340"
"<p>In my string I have Thai characters (TIS620 encoded) and German umlauts. The answer from agiles put me on the right path. Instead of .getBytes() I use now</p>

<pre><code>  int len = mString.length(); // Length of the string
  byte[] dataset = new byte[len];
  for (int i = 0; i &lt; len; ++i) {
     char c = mString.charAt(i);
     dataset[i]= (byte) c;
  }
</code></pre>
","3","5688042"
"<pre><code>ByteArrayOutputStream out = new ByteArrayOutputStream();
byte[] buffer = new byte[1024];
while (true) {
    int r = in.read(buffer);
    if (r == -1) break;
    out.write(buffer, 0, r);
}

byte[] ret = out.toByteArray();
</code></pre>
","12","1264709"
"<p>Maximum number of elements of an <code>array</code> is <code>(2^31)−1</code> or <code>2 147 483 647</code> </p>
","2","3038392"
"<p>It's because arrays generally don't go well with generic types. The most common way people handle data structures with generic types is to use Lists. </p>

<p>So for example, you would create a <code>List&lt;T&gt;</code> object rather than an array. One reason why arrays don't go well with generics and gives you the type safety warning is because arrays are <strong>co-variant</strong>: meaning that they can contain sub-types. </p>

<p>For example, an array of objects can contain longs and ints, which would fail at run-time when you tried to call items from the array. With Lists, it prevents you from inserting subtypes at compile time that could cause your code to fail at run-time. </p>

<p>So a rule of thumb would be to use a List instead of an array, but if you're really intent on using arrays and are sure that you will not be inserting any sub-types into the array, then you can add the line <code>@SuppressWarnings(""unchecked"")</code> above the line that you gave.</p>
","0","22123606"
"<p>Going by this article <a href=""http://en.wikipedia.org/wiki/Criticism_of_Java#Large_arrays"">http://en.wikipedia.org/wiki/Criticism_of_Java#Large_arrays</a>:</p>

<blockquote>
  <p>Java has been criticized for not supporting arrays of more than 2<sup>31</sup>−1 (about 2.1 billion) elements. This is a limitation of the language; the Java Language Specification, Section 10.4, states that:</p>
  
  <blockquote>
    <p>Arrays must be indexed by int values... An attempt to access an array
    component with a long index value results in a compile-time error.</p>
  </blockquote>
</blockquote>

<p>Supporting large arrays would also require changes to the JVM. This limitation manifests itself in areas such as collections being limited to 2 billion elements and the inability to memory map files larger than 2 GiB. Java also lacks true multidimensional arrays (contiguously allocated single blocks of memory accessed by a single indirection), which limits performance for scientific and technical computing.</p>
","29","3038392"
"<p>If you happen to use <a href=""https://github.com/google/guava"">google guava</a>, it'll be as simple as :</p>

<pre><code>byte[] bytes = ByteStreams.toByteArray(inputStream);
</code></pre>
","119","1264709"
"<p>This will not compile since the element type cannot be a primitive. Use <code>Integer</code> instead.</p>

<p><code>new ArrayList&lt;Integer&gt;(20);</code> will create a list backed by an array with an initial capacity of 20.</p>
","5","24776970"
"<p><code>ArrayList&lt;int&gt;(20);</code> is illegal, since you can't use primitives as generic types nor put them into the standard collections.</p>

<p><code>ArrayList&lt;Integer&gt;(20);</code> would create a list with a <em>basic capacity</em> of 20 integer objects but it can be resized as needed.</p>
","1","24776970"
"<p>Assuming that you change <code>int</code> to <code>Integer</code> (You can't use generics with primitives), that will create an <code>ArrayList</code> of initial size 20. </p>

<p>It can still grow past that limit, as per the JavaDocs at  <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList(int)"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html#ArrayList(int)</a>:</p>

<pre><code>Constructs an empty list with the specified initial capacity.
</code></pre>
","1","24776970"
"<p>Perhaps you should read <a href=""http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html"" rel=""nofollow noreferrer"">API documentation for <code>ArrayList</code></a> first.</p>

<p>You can create an <code>ArrayList</code> instance like this:</p>

<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(20);
</code></pre>

<p>In this case, <code>20</code> is initial capacity.</p>

<p>From Java7, you can omit the parameterized type.</p>

<pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;(20);
</code></pre>

<p>You can't use primitive type as type parameter. <a href=""https://stackoverflow.com/questions/2721546/why-dont-java-generics-support-primitive-types"">Why don&#39;t Java Generics support primitive types?</a> also helpful.</p>
","2","24776970"
"<p>If your question is about the memory allocation part and considering you use a syntax like:</p>

<pre><code>ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(20);
</code></pre>

<p>It just allocates memory for 20 <code>Integer</code>. It still an empty <code>ArrayList</code> though.
This is intended to be used for performance reasons but for most common situation there isn't a big difference (without the memory preallocation that is).</p>
","1","24776970"
"<p>Generally we should use the default constructor for any Collection object If we don't know the required size. Because think about the situation you are creating an ArrayList of size 500 but actually you are adding only 5 items into it. That is not recommended. 
We can not use primitives in Generics for type safety in Collections. This restriction is for providing backward compatibility to older version java codes(Older than 1.5). </p>

<p>For more details kindly have a look here: <a href=""https://www.java.net/node/643733"" rel=""nofollow noreferrer"">Link 1</a>, <a href=""http://codethataint.com/blog/why-dont-java-allows-primitive-types-in-generics/"" rel=""nofollow noreferrer"">Link 2</a>, <a href=""https://stackoverflow.com/questions/2721546/why-dont-java-generics-support-primitive-types"">Link 3</a>, <a href=""https://stackoverflow.com/questions/7036552/why-not-auto-box-java-primitive-types-for-generics"">Link 5</a></p>
","0","24776970"
"<p>If you don't want to use the Apache commons-io library, this snippet is taken from the sun.misc.IOUtils class. It's nearly twice as fast as the common implementation using ByteBuffers:</p>

<pre><code>public static byte[] readFully(InputStream is, int length, boolean readAll)
        throws IOException {
    byte[] output = {};
    if (length == -1) length = Integer.MAX_VALUE;
    int pos = 0;
    while (pos &lt; length) {
        int bytesToRead;
        if (pos &gt;= output.length) { // Only expand when there's no room
            bytesToRead = Math.min(length - pos, output.length + 1024);
            if (output.length &lt; pos + bytesToRead) {
                output = Arrays.copyOf(output, pos + bytesToRead);
            }
        } else {
            bytesToRead = output.length - pos;
        }
        int cc = is.read(output, pos, bytesToRead);
        if (cc &lt; 0) {
            if (readAll &amp;&amp; length != Integer.MAX_VALUE) {
                throw new EOFException(""Detect premature EOF"");
            } else {
                if (output.length != pos) {
                    output = Arrays.copyOf(output, pos);
                }
                break;
            }
        }
        pos += cc;
    }
    return output;
}
</code></pre>
","14","1264709"
"<p>yes, you can use <a href=""http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html#toByteArray%28java.io.InputStream%29"" rel=""nofollow""><code>IOUtils.toByteArray(InputStream input)</code></a>
 to store it. </p>

<p>also, if its a big file, you can increase java heap space by executing it with vm arguments:</p>

<pre><code>java -Xmx6g myprogram
</code></pre>

<p>or</p>

<pre><code>java -jar -Xmx6g myprogram.jar
</code></pre>

<p>the <code>6g</code> means 6 Gigabytes of heap</p>
","1","26403523"
"<p>In C++:</p>

<pre><code>int **a  = new int*[2];
a[0] = new int[4];
a[1] = a[0];
</code></pre>

<p>In C:</p>

<pre><code>int **a  = malloc(2*sizeof(*a));
a[0] = malloc(4*sizeof(*a[0])];
a[1] = a[0];
</code></pre>
","0","26622344"
"<p>In C/C++, one declares a two dimensional array the same as in JAVA, but the memory allocation by the compiler is different.  E.g., in C one declares a two-dimensional array of int as a contiguous block of memory.</p>

<pre><code>int a[][]=new int[2][4]  
</code></pre>

<p>is allocated as contiguous block of 32(2*4*4)bytes. It has only only one reference pointing to the block beginning. If you want to access an element at (i,j) then it returns the value at reference a+(i*2+j).</p>

<p>But in java it allocates a array of 2 pointers and allocates each row again.</p>

<pre><code>a= new int[2][];
a[0] = new int[4];
a[1] = new int[4];
</code></pre>

<p>So you can modify the references for each row.</p>

<p>But in C++ also you can achieve the JAVA behavior by using the following code.</p>

<pre><code>int **a = new int*[2];
a[0] = new int[4];
a[1] = new int[4];
a[0] = a[1];
</code></pre>

<p>If you need in C you should be able to do the same thing with malloc.</p>
","1","26622344"
"<pre><code>String[] strings = new String[25000];
for (int i = 0; i &lt; 25000; i++) strings[i] = '1234567';

String result;
result = """";
for (String s : strings) result += s;
//linear +: 5s

result = """";
for (String s : strings) result = result.concat(s);
//linear .concat: 2.5s

result = String.join("""", strings);
//Java 8 .join: 3ms

Public String join(String delimiter, String[] s)
{
    int ls = s.length;
    switch (ls)
    {
        case 0: return """";
        case 1: return s[0];
        case 2: return s[0].concat(delimiter).concat(s[1]);
        default:
            int l1 = ls / 2;
            String[] s1 = Arrays.copyOfRange(s, 0, l1); 
            String[] s2 = Arrays.copyOfRange(s, l1, ls); 
            return join(delimiter, s1).concat(delimiter).concat(join(delimiter, s2));
    }
}
result = join("""", strings);
// Divide&amp;Conquer join: 7ms
</code></pre>

<p>If you don't have the choise but to use Java 6 or 7 then you should use Divide&amp;Conquer join.</p>
","1","5283444"
"<p><h2>Following is an example of Array to String conversion.</h2>
    <pre>
    public class ArrayToString
    {<br>
        public static void main(String[] args)
        {
            String[] strArray = new String[]{""Java"", ""PHP"", "".NET"", ""PERL"", ""C"", ""COBOL""};</p>

<pre><code>        String newString = Arrays.toString(strArray);

        newString = newString.substring(1, newString.length()-1);

        System.out.println(""New New String: "" + newString);
    }
}
</code></pre>

<p></pre></p>
","3","5283444"
"<p>If I understood question correctly, this is it</p>

<pre><code>    int a[][] = {{1,1,1},{2,2,2}, {3,3,3}};
    int[] a2 = a[2];
</code></pre>

<p>,</p>
","1","28646889"
"<p>Just assign the blank space to the position of the character you want to <em>replace</em> - it's not a real deletion, an array in Java is of fixed length (it can't be resized):</p>

<pre><code>array[index] = ' ';
</code></pre>
","1","28666715"
"<p>You cannot delete an index from an array. This is because arrays have a fixed length that cannot be changed. If you want a list which you <strong>can</strong> delete elements, check out the ArrayList class. Here is the documentation: <a href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html</a></p>
","1","28666715"
"<p>These two statements are technically grammatically different but have identical effects.</p>

<p>An <a href=""http://docs.oracle.com/javase/specs/jls/se8/html/jls-10.html#jls-10.6"" rel=""nofollow"">array initializer</a> can appear as part of a local variable declaration initializer as in:</p>

<pre><code>int[] X = {1,2,3};
</code></pre>

<p>and also an array creation expression as in:</p>

<pre><code>new int[] {1,2,3}
</code></pre>

<p>And yes, <code>X</code> will be on the heap. All objects in Java are on the heap and since arrays are objects, all arrays are on the heap.</p>
","0","29294113"
"<p>The only difference is that the first statement works only when the array variable is declared, while the second can be written separately from the declaration :</p>

<pre><code>int[] X;
int[] Y;
X = {1,2,3}; // doesn't work
Y = new int[] {1,2,3}; // works
</code></pre>
","4","29294113"
"<p>Java provides a ease of initializing arrays. So with out new operator you can directly assign value. Like</p>

<pre><code> int[] X={1,2,3};
</code></pre>

<p>Here the size of array is know by no.of elements in the initialization block. </p>

<p>Another way of initializing is using new operator.</p>

<pre><code>int[] y=new int[]{1,2,3};
</code></pre>

<p>String variable also uses the both the way of initialization. But in Strings these two types have different meaning.</p>
","0","29294113"
"<p>From <a href=""http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html"" rel=""nofollow"">Oracle Java documentation</a></p>

<p><strong>Declaring a Variable to Refer to an Array</strong></p>

<p>Declare an array (named anArray) with the following line of code:</p>

<pre><code>// declares an array of integers
int[] anArray;
</code></pre>

<p>Like declarations for variables of other types, an array declaration has two components: the array's type and the array's name. An array's type is written as type[], where type is the data type of the contained elements; the brackets are special symbols indicating that this variable holds an array. The size of the array is not part of its type (which is why the brackets are empty). An array's name can be anything you want, provided that it follows the rules and conventions as previously discussed in the naming section. As with variables of other types, the declaration does not actually create an array; it simply tells the compiler that this variable will hold an array of the specified type.</p>

<p>Similarly, you can declare arrays of other types:</p>

<pre><code>byte[] anArrayOfBytes;
short[] anArrayOfShorts;
long[] anArrayOfLongs;
float[] anArrayOfFloats;
double[] anArrayOfDoubles;
boolean[] anArrayOfBooleans;
char[] anArrayOfChars;
String[] anArrayOfStrings;
</code></pre>

<p>You can also place the brackets after the array's name:</p>

<pre><code>// this form is discouraged
float anArrayOfFloats[];
</code></pre>

<p>However, convention discourages this form; the brackets identify the array type and should appear with the type designation.</p>

<p>So, there is no difference between using these two type of declarations.</p>
","1","29390471"
"<p>You have to use nested loops. Suppose you have an array of arrays of <code>Integer</code>, and you want to check if a specific number is inside the array:</p>

<pre><code>static boolean contains(Integer[][] array, Integer wantedInt) {
    // For each sub-array
    for (int i = 0; i &lt; array.length; i++) {
        // For each element in the sub-array
        for (int j = 0; j &lt; array[i].length; j++) {
            // If the element is the wanted one
            if (array[i][j].equals(wantedInt)) {
                // We've found it
                return true;
            }
        }
    }
    // We didn't find the wanted number
    return false;
}
</code></pre>

<p>You could use the same logic to search for any object type by using generics:</p>

<pre><code>static &lt;T&gt; boolean contains(T[][] array, T wantedObj) {
    for (int i = 0; i &lt; array.length; i++) {
        for (int j = 0; j &lt; array[i].length; j++) {
            if (array[i][j].equals(wantedObj)) {
                return true;
            }
        }
    }
    return false;
}
</code></pre>
","2","29441807"
"<pre><code> Object objects[][] = new Object[100][];
 Object objectToLocate = null;
     outerloop:
     for (Object[] object : objects) {
        for (Object o : objects) {
            if (o == objectToLocate) {
                System.out.println(""Found it!"");
                break outerloop;
            }
        }
    }
</code></pre>
","0","29441807"
"<p>Here is a solution for objects:</p>

<pre><code>    Object[][] twoDArray = new Object[x][y];

    // Fill array

    for (int i = 0; i &lt; twoDArray.length; ++i)
    {
        for (int j = 0; j &lt; twoDArray[i].length; ++j)
        {
            if (twoDArray[i][j].equals(someObject))
            {
                // do something
            }
        }
    }
</code></pre>
","0","29441807"
"<p>Here is an optimized version, that tries to avoid copying data bytes as much as possible:</p>

<pre><code>private static byte[] loadStream (InputStream stream) throws IOException {
   int available = stream.available();
   int expectedSize = available &gt; 0 ? available : -1;
   return loadStream(stream, expectedSize);
}

private static byte[] loadStream (InputStream stream, int expectedSize) throws IOException {
   int basicBufferSize = 0x4000;
   int initialBufferSize = (expectedSize &gt;= 0) ? expectedSize : basicBufferSize;
   byte[] buf = new byte[initialBufferSize];
   int pos = 0;
   while (true) {
      if (pos == buf.length) {
         int readAhead = -1;
         if (pos == expectedSize) {
            readAhead = stream.read();       // test whether EOF is at expectedSize
            if (readAhead == -1) {
               return buf;
            }
         }
         int newBufferSize = Math.max(2 * buf.length, basicBufferSize);
         buf = Arrays.copyOf(buf, newBufferSize);
         if (readAhead != -1) {
            buf[pos++] = (byte)readAhead;
         }
      }
      int len = stream.read(buf, pos, buf.length - pos);
      if (len &lt; 0) {
         return Arrays.copyOf(buf, pos);
      }
      pos += len;
   }
}
</code></pre>
","0","1264709"
"<p>I think this is what you are looking for</p>

<pre><code>   ----------------------- Main Class File --------------------
   public class TestingClass {
      public static void main(String[] args) {

        Scanner input = new Scanner(System.in);
        System.out.println(""Please enter the number of students detail : "");
        int numberOfInputs = input.nextInt();

        ArrayList&lt;Student&gt; StudentList = new ArrayList&lt;Student&gt;();


        for( int i=0;  i &lt; numberOfInputs ; i++){
            System.out.println(""Please enter Name : "");
            String name = input.next();
            System.out.println(""Please enter Address : "");
            String address = input.next();

            Student std = new Student(name, address);
            StudentList.add(std);
        }

        for(Student std : StudentList){
            System.out.println(std.toString());
        }
     }
    }


   -------------------- Student Java File ----------------------
     public class Student {

       public String    name    = """";
       public String    address = """";

       public Student(String name2, String address2) {

           this.name = name2;
           this.address = address2;
       }

     @Override
     public String toString() {

         return ""Student [name="" + this.name + "", address="" + this.address + ""]"";
        }

     }
</code></pre>
","0","29535572"
"<p>I know it's too late but here I think is cleaner solution that's more readable...</p>

<pre><code>/**
 * method converts {@link InputStream} Object into byte[] array.
 * 
 * @param stream the {@link InputStream} Object.
 * @return the byte[] array representation of received {@link InputStream} Object.
 * @throws IOException if an error occurs.
 */
public static byte[] streamToByteArray(InputStream stream) throws IOException {

    byte[] buffer = new byte[1024];
    ByteArrayOutputStream os = new ByteArrayOutputStream();

    int line = 0;
    // read bytes from stream, and store them in buffer
    while ((line = stream.read(buffer)) != -1) {
        // Writes bytes from byte array (buffer) into output stream.
        os.write(buffer, 0, line);
    }
    stream.close();
    os.flush();
    os.close();
    return os.toByteArray();
}
</code></pre>
","2","1264709"
"<p>Arrays are non-negative integer indexed , so maximum array size you can access would be <code>Integer.MAX_VALUE</code>. The other thing is how big array you can create. It depends on the maximum memory available to your <code>JVM</code> and the content type of the array. Each array element has it's size, example. <code>byte = 1 byte</code>, <code>int = 4 bytes</code>, <code>Object reference = 4 bytes (on a 32 bit system)</code> </p>

<p>So if you have <code>1 MB</code> memory available on your machine, you could allocate an array of <code>byte[1024 * 1024]</code> or <code>Object[256 * 1024]</code>. </p>

<p><em>Answering your question</em> - You can allocate an array of size (maximum available memory / size of array item).   </p>

<p><em>Summary</em> - Theoretically the maximum size of an array will be <code>Integer.MAX_VALUE</code>. Practically it depends on how much memory your <code>JVM</code> has and how much of that has already been allocated to other objects.</p>
","14","3038392"
"<p>The other case to get correct byte array via stream, after send request to server and waiting for the response.</p>

<pre><code>/**
         * Begin setup TCP connection to PC app
         * to open integrate connection between mobile app and pc app (or mobile app)
         */
        mSocket = new Socket(IP, port);
       // mSocket.setSoTimeout(30000);

        DataOutputStream mDos = new DataOutputStream(mSocket.getOutputStream());

        String str = ""MobileRequest#"" + params[0] + ""#&lt;EOF&gt;"";

        mDos.write(str.getBytes());

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        /* Since data are accepted as byte, all of them will be collected in the
        following byte array which initialised with accepted data length. */
        DataInputStream mDis = new DataInputStream(mSocket.getInputStream());
        byte[] data = new byte[mDis.available()];

        // Collecting data into byte array
        for (int i = 0; i &lt; data.length; i++)
            data[i] = mDis.readByte();

        // Converting collected data in byte array into String.
        String RESPONSE = new String(data);
</code></pre>
","0","1264709"
"<p>You're doing an extra copy if you use ByteArrayOutputStream. If you know the length of the stream before you start reading it (e.g. the InputStream is actually a FileInputStream, and you can call file.length() on the file, or the InputStream is a zipfile entry InputStream, and you can call zipEntry.length()), then it's far better to write directly into the byte[] array -- it uses half the memory, and saves time.</p>

<pre><code>// Read the file contents into a byte[] array
byte[] buf = new byte[inputStreamLength];
int bytesRead = Math.max(0, inputStream.read(buf));

// If needed: for safety, truncate the array if the file may somehow get
// truncated during the read operation
byte[] contents = bytesRead == inputStreamLength ? buf
                  : Arrays.copyOf(buf, bytesRead);
</code></pre>

<p>N.B. the last line above deals with files getting truncated while the stream is being read, if you need to handle that possibility, but if the file gets <em>longer</em> while the stream is being read, the contents in the byte[] array will not be lengthened to include the new file content, the array will simply be truncated to the old length <em>inputStreamLength</em>.</p>
","0","1264709"
"<p>This works for me,</p>

<pre><code>if(inputStream != null){
                ByteArrayOutputStream contentStream = readSourceContent(inputStream);
                String stringContent = contentStream.toString();
                byte[] byteArr = encodeString(stringContent);
            }
</code></pre>

<p>readSourceContent()</p>

<pre><code>public static ByteArrayOutputStream readSourceContent(InputStream inputStream) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        int nextChar;
        try {
            while ((nextChar = inputStream.read()) != -1) {
                outputStream.write(nextChar);
            }
            outputStream.flush();
        } catch (IOException e) {
            throw new IOException(""Exception occurred while reading content"", e);
        }

        return outputStream;
    }
</code></pre>

<p>encodeString()</p>

<pre><code>public static byte[] encodeString(String content) throws UnsupportedEncodingException {
        byte[] bytes;
        try {
            bytes = content.getBytes();

        } catch (UnsupportedEncodingException e) {
            String msg = ENCODING + "" is unsupported encoding type"";
            log.error(msg,e);
            throw new UnsupportedEncodingException(msg, e);
        }
        return bytes;
    }
</code></pre>
","-1","1264709"
"<p>See the <code>InputStream.available()</code> documentation:</p>

<blockquote>
  <p>It is particularly important to realize that you must not use this
  method to size a container and assume that you can read the entirety
  of the stream without needing to resize the container. Such callers
  should probably write everything they read to a ByteArrayOutputStream
  and convert that to a byte array. Alternatively, if you're reading
  from a file, File.length returns the current length of the file
  (though assuming the file's length can't change may be incorrect,
  reading a file is inherently racy).</p>
</blockquote>
","1","1264709"
"<blockquote>
  <p>Collection Interface has 3 views</p>
</blockquote>

<ul>
<li>keySet</li>
<li>values</li>
<li>entrySet</li>
</ul>

<p><strong>Other have answered to to convert Hashmap into two lists of key and value. Its perfectly correct</strong></p>

<blockquote>
  <p><strong>My addition:</strong> How to convert ""key-value pair"" (aka entrySet)into list.</p>
</blockquote>

<pre><code>      Map m=new HashMap();
          m.put(3, ""dev2"");
          m.put(4, ""dev3"");

      List&lt;Entry&gt; entryList = new ArrayList&lt;Entry&gt;(m.entrySet());

      for (Entry s : entryList) {
        System.out.println(s);
      }
</code></pre>

<p>ArrayList has this constructor. </p>
","7","5483330"
"<p>From Java 8, the simplest way I think is:</p>

<pre><code>    String[] array = { ""cat"", ""mouse"" };
    String delimiter = """";
    String result = String.join(delimiter, array);
</code></pre>

<p>This way you can choose an arbitrary delimiter.</p>
","14","5283444"
"<p>Are you looking for something like this?</p>

<pre><code>// Your array of Char with the length of 5 by 5
char[][] arrayOfChar = new char[5][5];

// Generating a radom number with min being 0 and max being length - 1
Random rand = new Random();
int x = rand.nextInt(arrayOfChar[0].length);
int y = rand.nextInt(arrayOfChar[1].length);

// Random position in array assigned M
arrayOfChar[x][y] = 'M' ;
</code></pre>

<p>If you wanted an <code>int</code> array</p>

<pre><code>// Your array of int with the length of 5 by 5
int[][] arrayOfInt = new int[5][5];

// Generating a radom number with min being 0 and max being length - 1
Random rand = new Random();
int x = rand.nextInt(arrayOfInt[0].length);
int y = rand.nextInt(arrayOfInt[1].length);

// Random position in array assigned number 8
arrayOfInt[x][y] = 8 ;
</code></pre>
","1","34600833"
"<p>Maybe something like this?</p>

<pre><code>public class random2DChar {
    public static void main(String args[]) {
        char[][] char2DArr = new char[10][10];
        Random random = new Random();
        int x = random.nextInt(char2DArr.length);
        char2DArr[x][x] = 'M';
        System.out.println(Arrays.deepToString(char2DArr));
    }
}
</code></pre>
","-2","34600833"
"<p>I use this.</p>

<pre><code>public static byte[] toByteArray(InputStream is) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        try {
            byte[] b = new byte[4096];
            int n = 0;
            while ((n = is.read(b)) != -1) {
                output.write(b, 0, n);
            }
            return output.toByteArray();
        } finally {
            output.close();
        }
    }
</code></pre>
","0","1264709"
"<p>Solution using Java 8 and Stream Api:</p>

<pre><code>private static &lt;K, V&gt;  List&lt;V&gt; createListFromMapEntries (Map&lt;K, V&gt; map){
        return map.values().stream().collect(Collectors.toList());
    }
</code></pre>

<p>Usage: </p>

<pre><code>  public static void main (String[] args)
    {
        Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();
        map.put(1, ""one"");
        map.put(2, ""two"");
        map.put(3, ""three"");

        List&lt;String&gt; result = createListFromMapEntries(map);
        result.forEach(System.out :: println);
    }
</code></pre>
","6","5483330"
"<p>This is my copy-paste version:</p>

<pre><code>@SuppressWarnings(""empty-statement"")
public static byte[] inputStreamToByte(InputStream is) throws IOException {
    if (is == null) {
        return null;
    }
    // Define a size if you have an idea of it.
    ByteArrayOutputStream r = new ByteArrayOutputStream(2048);
    byte[] read = new byte[512]; // Your buffer size.
    for (int i; -1 != (i = is.read(read)); r.write(read, 0, i));
    is.close();
    return r.toByteArray();
}
</code></pre>
","0","1264709"
"<p>Java 7 and later:</p>

<pre><code>import sun.misc.IOUtils;
...
InputStream in = ...;
byte[] buf = IOUtils.readFully(in, -1, false);
</code></pre>
","0","1264709"
"<p>No they can't. But they can use chars the ASCII value of the alphabet will be used as the key index</p>

<p>Consider</p>

<pre><code>    String[] a = new String['a' + 1];
    a['a'] = ""Hello"";
    int[] b = new int['a' + 3];
    b['c'] = 5;

    System.out.println(a[97]);
    System.out.print(b[99]);
</code></pre>

<p>This will output</p>

<pre><code>Hello
5
</code></pre>
","6","6943588"
"<p>Finally, after twenty years, there’s a simple solution without the need for a 3rd party library, thanks to <a href=""https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#readAllBytes--"" rel=""noreferrer"">Java 9</a>:</p>

<pre><code>InputStream is;
…
byte[] array = is.readAllBytes();
</code></pre>

<p>Note also the convenience methods <a href=""https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#readNBytes-byte:A-int-int-"" rel=""noreferrer""><code>readNBytes(byte[] b, int off, int len)</code></a> and <a href=""https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#transferTo-java.io.OutputStream-"" rel=""noreferrer""><code>transferTo(OutputStream)</code></a> addressing recurring needs.</p>
","340","1264709"
"<p>If you don't want the 'null' image to appear on a list, just do something like:</p>

<pre><code>for each item on a list
    if item == null then continue
    else 
        add an item to &lt;List&gt;Images
</code></pre>

<p>If you pass a null object to the List of Images, it still does occupy the place in the list, even though this place is technically uninitialized.</p>
","1","38733640"
"<p>you can't say <code>null</code> value means the object is not exist, even <code>null</code> isn't an object in java. </p>

<p><code>String s = null</code> means the reference of <code>String s</code> is unset, but the declare is done, an object with String type and called s.</p>

<p>see more detail about it, <a href=""http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.1"" rel=""nofollow"">oracle doc: The Kinds of Types and Values</a></p>

<pre><code>public static void main(String[] args)
{
    ArrayList al = new ArrayList();
    al.add(null);
    al.add(""not null"");
    System.out.println(al.size()); //output 2

    //if you wanna know how many objects inside of list and isn't null
    int count=0;
    for(Object obj:al)
        if(!(obj==null)) 
            count++;
    System.out.println(count); //output 1

    System.out.println(al); //output [null, not null] ← null is exist.
}
</code></pre>

<p>so in you case, the return of size() should be 20.</p>
","1","38733640"
"<p>I use the <a href=""https://stackoverflow.com/a/4819668/1879661"">solution</a> from @Lithium after some days researching</p>

<p><code>tourists.removeAll(Collections.singleton(null));</code></p>

<p>This code remove all null values from an list.</p>
","1","38733640"
"<pre><code>public static void main(String[] args) {
    int value = 1234;
    List&lt;Integer&gt; output = new ArrayList&lt;Integer&gt;();
    while (value &gt; 0) {
        output.add(value % 10);
        value /= 10;
    }
    Collections.sort(output);
    System.out.println(""Min:"" + output.get(0));
    System.out.println(""Max:"" + output.get(output.size() - 1));
}
</code></pre>
","0","40415608"
"<p>Almost there. You are missing an important piece though. You need to call <code>sort()</code> on <code>Arrays</code></p>

<pre><code>public static void main(String[] args) {
    int value = 1234;
    char[] arr = String.valueOf(value).toCharArray();
    Arrays.sort(arr);
    System.out.println(arr[0] + "" "" + arr[arr.length - 1]);
}
</code></pre>

<p>O/P :</p>

<pre><code>1 4 // arr[0] is min and arr[arr.length-1] is max
</code></pre>
","0","40415608"
"<p>You can do this using for loop ,only if you want to display these numbers seperately.I suggest you want to display all four digits in seperate four lines.it will be done by bellow code.</p>

<pre><code> int value = 1234;
 char [] chars = String.valueOf(value).toCharArray();     
 for(int i=0; i &lt; chars.length ; i++ )
 System.out.println(chars[i]);
</code></pre>
","0","40415608"
"<p>You will need a loop to pull of each individual digit and compare it to the current min/max :</p>

<pre><code>int n = 36348;
    int min = Integer.MAX_VALUE;
    int max = Integer.MIN_VALUE;

    if (n &gt; 0) {


        while (n &gt; 0) {
            int digit = n % 10;

            max = Math.max(max, digit);
            min = Math.min(min, digit);

            n /= 10;
        }


    }

    System.out.println(min);
    System.out.println(max);
</code></pre>
","0","40415608"
"<p>You can't do that in Java 8. You could use an <code>Exception</code> to break from code. It's not pretty, but it's doable if you need to.</p>

<p>Like this:</p>

<pre><code>try {
    Array.forEach((x) -&gt; {
       if (condition) {
          throw new MyException();
       }
    });
} catch (MyException e) {
    // broke from loop
}
</code></pre>
","2","40634679"
"<pre><code>String array[]={""one"",""two""};
String s="""";

for(int i=0;i&lt;array.length;i++)
{
  s=s+array[i];
}

System.out.print(s);
</code></pre>
","-1","5283444"
"<p>Java 9 will give you finally a nice method:</p>

<pre><code>InputStream in = ...;
ByteArrayOutputStream bos = new ByteArrayOutputStream();
in.transferTo( bos );
byte[] bytes = bos.toByteArray();
</code></pre>
","4","1264709"
"<p>As always, also <a href=""https://projects.spring.io/spring-framework/"" rel=""noreferrer"">Spring framework</a> (spring-core since 3.2.2) has something for you: <code>StreamUtils.copyToByteArray()</code></p>
","54","1264709"
"<p>In-case someone is still looking for a solution without dependency and <strong>If you have a file</strong>.</p>
<blockquote>
<p>DataInputStream</p>
</blockquote>
<pre><code> byte[] data = new byte[(int) file.length()];
 DataInputStream dis = new DataInputStream(new FileInputStream(file));
 dis.readFully(data);
 dis.close();
</code></pre>
<blockquote>
<p>ByteArrayOutputStream</p>
</blockquote>
<pre><code> InputStream is = new FileInputStream(file);
 ByteArrayOutputStream buffer = new ByteArrayOutputStream();
 int nRead;
 byte[] data = new byte[(int) file.length()];
 while ((nRead = is.read(data, 0, data.length)) != -1) {
     buffer.write(data, 0, nRead);
 }
</code></pre>
<blockquote>
<p>RandomAccessFile</p>
</blockquote>
<pre><code> RandomAccessFile raf = new RandomAccessFile(file, &quot;r&quot;);
 byte[] data = new byte[(int) raf.length()];
 raf.readFully(data);
</code></pre>
","18","1264709"
"<p>Java 8 way (thanks to <strong>BufferedReader</strong> and <a href=""http://www.adam-bien.com/roller/abien/entry/reading_inputstream_into_string_with"" rel=""nofollow noreferrer"">Adam Bien</a>)</p>

<pre><code>private static byte[] readFully(InputStream input) throws IOException {
    try (BufferedReader buffer = new BufferedReader(new InputStreamReader(input))) {
        return buffer.lines().collect(Collectors.joining(""\n"")).getBytes(&lt;charset_can_be_specified&gt;);
    }
}
</code></pre>

<p><strong>Note</strong> that this solution wipes <strong>carriage return</strong> ('\r') and can be inappropriate.</p>
","2","1264709"
"<p>I tried to create a byte array like this</p>

<pre><code>byte[] bytes = new byte[Integer.MAX_VALUE-x];
System.out.println(bytes.length);
</code></pre>

<p>With this run configuration:</p>

<pre><code>-Xms4G -Xmx4G
</code></pre>

<p>And java version:</p>

<blockquote>
  <p>Openjdk version ""1.8.0_141"" </p>
  
  <p>OpenJDK Runtime Environment (build 1.8.0_141-b16) </p>
  
  <p>OpenJDK 64-Bit Server VM (build 25.141-b16, mixed mode)</p>
</blockquote>

<p>It only works for x >= 2 which means the maximum size of an array is Integer.MAX_VALUE-2</p>

<p>Values above that give</p>

<blockquote>
  <p>Exception in thread ""main"" java.lang.OutOfMemoryError: Requested array size exceeds VM limit
      at Main.main(Main.java:6)</p>
</blockquote>
","3","3038392"
"<p>You can try <a href=""http://www.cactoos.org"" rel=""nofollow noreferrer"">Cactoos</a>:</p>

<pre><code>byte[] array = new BytesOf(stream).bytes();
</code></pre>
","0","1264709"
"<p>If you like me were trying to get the number of dimensions and the size of them then:</p>

<pre><code>private static int[] getDimentionsOf(final Object expectedArray) {
    if (!expectedArray.getClass().isArray()) {
        return new int[0];
    }
    final int dimensionSize = Array.getLength(expectedArray);
    final int[] innerDimensions =
                    (expectedArray.getClass().getComponentType().isArray())
                                    ? getDimentionsOf(Array.get(expectedArray, 0))
                                    : new int[0];
    final int lenghtPlusOne = innerDimensions.length + 1;
    final int[] newDimensions = new int[lenghtPlusOne];
    System.arraycopy(innerDimensions, 0, newDimensions, 1, innerDimensions.length);
    newDimensions[0] = dimensionSize;
    return newDimensions;
} 
</code></pre>
","-1","1764339"
"<p>No, Java arrays have a <code>length</code> property that stores their length (i.e. every arrays knows its own length). No counting is necessary.</p>
","7","46865652"
"<p>Consider if you were writing a programming language, and you have to implement an array type. How would you do that?</p>

<p>Clearly, you would need to know how much memory you need to store the array. It follows that you would probably like to keep track of that somehow.</p>

<p>Thus, in all languages that have arrays, the number of elements in the array is also stored as part of the array. Knowing the length of the array is nothing more than looking at the length value, an O(1) operation.</p>

<p><strong>C and C++ are special.</strong></p>

<p>They treat pointers and arrays with near-identical syntax. What this means is that if you treat an actual array as a pointer, you <em>lose</em> the size information.</p>

<p>But even if you don’t, it is convenient for storing things like character strings, which can vary in length. The old C-style way to mark the end of a string is to use the character with zero value, the <em>null character</em>. </p>

<p>So to find the end of a C-string, no matter how large the array containing it is, you must count through all the characters until you find the one with a value of zero, an O(n) operation.</p>

<p><strong>This is not the same as not knowing the length of the containing array.</strong></p>

<p>It can be, and often is when dealing with C-strings, that access to a string array does not come with knowledge of the size of the array containing the string, because of the already-mentioned issue where arrays degenerate into pointers so easily.</p>

<p><br>
<strong>So to answer your question</strong>, it kind of depends on what you mean by “array”. If you are talking about some open sequence, such as a character device or pipe, then yes, you must have some way of determining when you have encountered the last element or not. But for arrays proper, then no, the size of the array is an integral part of its type.</p>
","1","46865652"
"<p>Hm..? Are you a C developer?</p>

<pre><code>int[] arr = new int[500];
System.out.println(arr.length); //Prints 500
</code></pre>
","0","46865652"
"<p>Creating matrices in Java is not as friendly as say R, or Matlab, or even C.  The very strong Typing paradigm of Java means that everything has to be defined or initialized.  So you cant simply do Integers[x][y][z].  Beyond an array of arrays, things get hairy.</p>

<p>The difference is in a regular matrix moving in +x, -x, +y, -y, +z, -z are all essentially equivalent.  However in Java, if you want to think of three dimensions of a matrix, they are directional.  Meaning you have to traverse X, then traverse Y, then traverse Z, always in that order.  And to move say x+1, you have to go back down z, back down y, and then move your x position, then turn around and traverse y again and z again. 
I am not sure that made sense. but that is how I have to think about matrices in Java or else I start making coding errors.</p>

<p>There are libraries for java that focus on creating a matrix.  You could look there.  <a href=""http://ejml.org/wiki/index.php?title=Main_Page"" rel=""nofollow noreferrer"">http://ejml.org/wiki/index.php?title=Main_Page</a></p>

<p>Just creating a random array of arrays (a psuedomatrix as described above) doesn't seem hard overall.</p>

<pre><code>import java.util.Random;

public class Rand
{
   public static void main(String[] args)
   {
      Random random = new Random();
     int dim1 = random.nextInt( 10 );
      int dim2 = random.nextInt( 10 );
      int dim3 = random.nextInt( 10 );

      int[][][] matrix = new int[dim1][dim2][];

      //use dim 3 when you do the specific the declaration for the 3rd dimension

   }

}
</code></pre>

<p>Running quickly through some examples- 
      Int myIntArray = new int[15]; 
Creates a 15 member int array, initialized to the Default value for that type, which is 0 for <br>
      //--Assigning values
      myIntArray[2] = 5; 
      //=  0 0 5 0 0
      myInt = myIntArray[2];
      myInt = 5;</p>

<pre><code>// @Initializing with values

   int[5] myIntArray = { 5, 10, 15, 20, 25 };
   int[] myIntArray = { 5, 10, 15, 20, 25 };
</code></pre>

<p>Multidimensional array are not like a matrix in C. All dimensions are the same type.Each element is an independent array. Each array element of an earlier dimension is an array.All dimensions are of the same type and each element is an independent array.
In Java, each array element of a multidimensional array except the
last dimension is an array, not an individual element
       //    Two dim array</p>

<pre><code>  int[][] myIntArray2;
  //Or
  int myIntArray[][];
</code></pre>

<p>Use the new operator to allocate.Allocation initializes to the DEFault
type.In this case you are initializing an array of arrays, so the DEFault
type is null.</p>

<pre><code>  int[][] myIntArray2d = new int[5][];
  myIntArray2d[3] = new int[5];
</code></pre>

<p>So assigning the array above, you get</p>

<pre><code>  null Null 0 Null Null
  []    []  0 []   [] 
  []    []  0 []   [] 
  []    []  0 []   [] 
  []    []  0 []   [] 
</code></pre>

<p>The empty, Defaults in the 1st dim are null - the Default array type.The second dimension has to be initialized before accessing.</p>

<pre><code>  char[][] charArray = new char[36][];

  //But I cant save anything into  

 charArray[4][0]; 

  //because it has not been initialized with a separate new statement.
  //This is why you leave the 3rd dim off until later.

 char[5]  = new char[5]; // WRONG
  char[] f = new char[5];
  //Now I can follow that with
  charArray[5][5] = 'a';  
  //or from about
  intArray[5][5][5]= 3;
  // But you cant declare the final dimension until later.

  int[3][] arr =  ( { 1, 2, 3 }, { 1, 2 }, { 5, 10, 15, 20 });
  //is an array[2] with 3 arrays
  int[][] arr =   { 1, 2, 3 }, { 1, 2 }, { 5, 10, 15, 20 }; 
  //is an array[2] with 3 arrays
</code></pre>

<p>This is why you cant really do matrixes in Java.  Because each final dimension can technically vary.</p>

<p>When copying an array into a variable - i.e.</p>

<pre><code>  charArrayvars = charArray[5]
  int[] Copies= { 0, 0, 0, 0, 0  } //as a pointer not the data.

  // This means that
  int[3] ArrayA = { 1, 2, 3 };
  Int[3] ArrayB = { 4, 5, 6 };
  ArrayB = Array A;

  //So ArrayB now references Array A.
   //Now if I set

  ArrayA[0] = 0; //then
   if( ArrayB[0] = 0 &amp;&amp;  ArrayA==ArrayB.){}
  //  The logic comparator really just shows they use the same reference.
</code></pre>

<p>I  think though I would evaluate your objectives and see if there is another way.  Or maybe use a library.  Because a matrix like you are thinking is not native to Java.  There are lots of strange behaviors which I have done a terrible job explaining.</p>
","1","49313051"
"<p>Use Apache Commons' <a href=""https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html"" rel=""nofollow noreferrer"">StringUtils library</a>'s join method.</p>

<pre><code>String[] stringArray = {""a"",""b"",""c""};
StringUtils.join(stringArray, "","");
</code></pre>
","1","5283444"
"<p>As others said, extending java lang data structures is a very bad idea.
However, if you have some logic you want to isolate in a collection class, I would suggest bellow solution:</p>

<pre><code>public class ProductCollection{

    ArrayList&lt;Product&gt; products;

    public Product getByCode(String code) {
       // ... your logic goes here.
    }
}
</code></pre>
","0","4779173"
"<p>We are seeing some delay for few AWS transaction, while converting S3 object to ByteArray.</p>

<p>Note: S3 Object is PDF document (max size is 3 mb).</p>

<p>We are using the option #1 (org.apache.commons.io.IOUtils) to convert the S3 object to ByteArray. We have noticed S3 provide the inbuild IOUtils method to convert the S3 object to ByteArray, we are request you to confirm what is the best way to convert the S3 object to ByteArray to avoid the delay.</p>

<p>Option #1:</p>

<pre><code>import org.apache.commons.io.IOUtils;
is = s3object.getObjectContent();
content =IOUtils.toByteArray(is);
</code></pre>

<p>Option #2:</p>

<pre><code>import com.amazonaws.util.IOUtils;
is = s3object.getObjectContent();
content =IOUtils.toByteArray(is);
</code></pre>

<p>Also let me know if we have any other better way to convert the s3 object to bytearray</p>
","1","1264709"
"<p><strong><em>Safe</em> solution</strong> (with capability of <code>close</code> streams correctly):</p>
<ul>
<li><p><strong>Java 9+</strong>:</p>
<pre><code> final byte[] bytes;
 try (inputStream) {
     bytes = inputStream.readAllBytes();
 }
</code></pre>
</li>
</ul>
<hr />
<ul>
<li><p><strong>Java 8</strong>:</p>
<pre><code> public static byte[] readAllBytes(InputStream inputStream) throws IOException {
     final int bufLen = 4 * 0x400; // 4KB
     byte[] buf = new byte[bufLen];
     int readLen;
     IOException exception = null;

     try {
         try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
             while ((readLen = inputStream.read(buf, 0, bufLen)) != -1)
                 outputStream.write(buf, 0, readLen);

             return outputStream.toByteArray();
         }
     } catch (IOException e) {
         exception = e;
         throw e;
     } finally {
         if (exception == null) inputStream.close();
         else try {
             inputStream.close();
         } catch (IOException e) {
             exception.addSuppressed(e);
         }
     }
 }
</code></pre>
</li>
</ul>
<hr />
<ul>
<li><p><em><strong>Kotlin</strong></em> (when Java 9+ isn't accessible):</p>
<pre><code> @Throws(IOException::class)
 fun InputStream.readAllBytes(): ByteArray {
     val bufLen = 4 * 0x400 // 4KB
     val buf = ByteArray(bufLen)
     var readLen: Int = 0

     ByteArrayOutputStream().use { o -&gt;
         this.use { i -&gt;
             while (i.read(buf, 0, bufLen).also { readLen = it } != -1)
                 o.write(buf, 0, readLen)
         }

         return o.toByteArray()
     }
 }
</code></pre>
<p><em>To avoid nested <code>use</code> see <a href=""https://stackoverflow.com/a/53348190/5318303"">here</a>.</em></p>
</li>
</ul>
<hr />
<ul>
<li><p><em><strong>Scala</strong></em> (when Java 9+ isn't accessible) (By <a href=""https://stackoverflow.com/users/599728/joan"">@Joan</a>. Thx):</p>
<pre><code>def readAllBytes(inputStream: InputStream): Array[Byte] =
  Stream.continually(inputStream.read).takeWhile(_ != -1).map(_.toByte).toArray
</code></pre>
</li>
</ul>
","31","1264709"
"<p>As suggested by assylias, the 100% Java way to do this is with <code>Files.readAllBytes(path)</code>.</p>

<p>Heap space errors depend on the file size and the amount of free memory in the JVM heap; you need to verify that the first is lower than the second before reading it:</p>

<pre><code>File file = new File(path);
bytes[] bytes;
if (file.length &gt; Runtime.getRuntime().freeMemory()) {
    // warn about reading
} else {
    bytes = Files.readAllBytes(path)
    // do stuff with 'bytes'
}
</code></pre>
","0","26403523"
"<p>Actually it's java limitation caping it at 2^30-4 being 1073741820. Not 2^31-1. Dunno why but i tested it manually on jdk. <a href=""https://i.stack.imgur.com/zRGQy.jpg"" rel=""nofollow noreferrer"">2^30-3 still throwing vm except</a></p>

<p>Edit: fixed -1 to -4, checked on windows jvm</p>
","0","3038392"
"<p>Little test with <code>jshell</code> (comes with OpenJDK 13):</p>

<pre class=""lang-java prettyprint-override""><code>var map = new HashMap&lt;String, List&lt;String&gt;&gt;();
map.put(""first"", new ArrayList&lt;String&gt;());
map.get(""first"").add(""one"");
</code></pre>
","0","58669437"
"<pre><code>     Map&lt;Integer, List&lt;Integer&gt;&gt; m_Map1 = new 
      HashMap&lt;Integer, List&lt;Integer&gt;&gt;();
       // Add values
        m_Map1.put(1, new ArrayList&lt;Integer&gt;(list1));
         m_Map1.put(2, new ArrayList&lt;Integer&gt;(list2));
</code></pre>
","0","58669437"
"<p>No, java.util.Arrays is not imported by default.</p>

<pre><code>class Test {
    public static void main(String[] args) {
        int[] a = {1,2};
        int[] b = {1,3};

        System.out.println(Arrays.equals(a,b));
    }
}
</code></pre>

<p>Trying to compile this class will fail, due to Arrays being unknown. You will need to prepend the file with <code>import java.util.Arrays;</code> for it to compile.</p>

<p>If you're talking about arrays generally, as in how <code>int[]</code> is supported by default, that's a different question, and you'll need to clarify and reword what you mean. Simply, arrays are supported in C, the language Java is built upon.</p>

<p>EDIT: Further reading <a href=""https://stackoverflow.com/questions/19370231/how-do-arrays-work-internally-in-c-c"">here</a></p>
","1","60664693"
"<p>If you want to add element in List then simply do:</p>

<pre><code>listObject.add(new Object[]{});
</code></pre>

<p>Or if you want to add to Object array inside list then use (Which is quite a long root due to restrictive behavior of array data structure, <strong>Thats why ArrayList is alternative to achieve this.</strong> ):</p>

<pre><code>    @Test
    public void testArray()  {


        List&lt;Object[]&gt; listObjects =  new ArrayList&lt;&gt;();
        listObjects.add(new Object[]{1,2});
         addX( listObjects.get(0).length , listObjects.get(0) , 3);

        listObjects.set(0,addX( listObjects.get(0).length , listObjects.get(0) , 3));

        System.out.println(listObjects.get(0));
    }

    public Object[] addX(int n, Object arr[], Object x)
    {
        int i;

        // create a new array of size n+1
        Object newarr[] = new Object[n + 1];

        // insert the elements from
        // the old array into the new array
        // insert all elements till n
        // then insert x at n+1
        for (i = 0; i &lt; n; i++)
            newarr[i] = arr[i];

        newarr[n] = x;

        return newarr;


    }
</code></pre>
","0","61356865"
"<p>Problem with this code is that it doesn't swap numbers. Instead, it replaces <code>array[i]</code> with the minimum number found.<br> You can modify your loop like this to do the swapping.</p>

<pre><code>        for (int i = 0; i &lt; array.length; i++) {

          int minIndex = i;
          for (int j = i; j &lt; array.length; j++) {

              if (array[j] &lt; array[minIndex]) {
                  minIndex = j;
              }

          }
          if (array[minIndex] != array[i]) {
            int wert = array[minIndex];
            array[minIndex] = array[i];
            array[i] = wert;

          }
        }
</code></pre>
","2","61390237"
"<p>For selection sort use this method</p>

<pre><code>public static void selectionSort(int[] arr) {

    for (int i = 0; i &lt; arr.length - 1; i++) {
        int index = i;
        for (int j = i + 1; j &lt; arr.length; j++) {
            if (arr[j] &lt; arr[index]) {
                index = j;//searching for lowest index
            }
        }
        int smallerNumber = arr[index];
        arr[index] = arr[i];
        arr[i] = smallerNumber;
    }

}
</code></pre>
","1","61390237"
"<p>If you need an ascend order just use:</p>

<p>Arrays.sort(array) from java.util library</p>

<p>But if you need to sort descending I'd suggested to reffer to:</p>

<p><a href=""https://www.baeldung.com/java-sorting-arrays"" rel=""nofollow noreferrer"">https://www.baeldung.com/java-sorting-arrays</a></p>
","0","61390237"
"<p>Solution in Kotlin (will work in Java too, of course), which includes both cases of when you know the size or not:</p>

<pre><code>    fun InputStream.readBytesWithSize(size: Long): ByteArray? {
        return when {
            size &lt; 0L -&gt; this.readBytes()
            size == 0L -&gt; ByteArray(0)
            size &gt; Int.MAX_VALUE -&gt; null
            else -&gt; {
                val sizeInt = size.toInt()
                val result = ByteArray(sizeInt)
                readBytesIntoByteArray(result, sizeInt)
                result
            }
        }
    }

    fun InputStream.readBytesIntoByteArray(byteArray: ByteArray,bytesToRead:Int=byteArray.size) {
        var offset = 0
        while (true) {
            val read = this.read(byteArray, offset, bytesToRead - offset)
            if (read == -1)
                break
            offset += read
            if (offset &gt;= bytesToRead)
                break
        }
    }
</code></pre>

<p>If you know the size, it saves you on having double the memory used compared to the other solutions (in a brief moment, but still could be useful). That's because you have to read the entire stream to the end, and then convert it to a byte array (similar to ArrayList which you convert to just an array).</p>

<p>So, if you are on Android, for example, and you got some Uri to handle, you can try to get the size using this:</p>

<pre><code>    fun getStreamLengthFromUri(context: Context, uri: Uri): Long {
        context.contentResolver.query(uri, arrayOf(MediaStore.MediaColumns.SIZE), null, null, null)?.use {
            if (!it.moveToNext())
                return@use
            val fileSize = it.getLong(it.getColumnIndex(MediaStore.MediaColumns.SIZE))
            if (fileSize &gt; 0)
                return fileSize
        }
        //if you wish, you can also get the file-path from the uri here, and then try to get its size, using this: https://stackoverflow.com/a/61835665/878126
        FileUtilEx.getFilePathFromUri(context, uri, false)?.use {
            val file = it.file
            val fileSize = file.length()
            if (fileSize &gt; 0)
                return fileSize
        }
        context.contentResolver.openInputStream(uri)?.use { inputStream -&gt;
            if (inputStream is FileInputStream)
                return inputStream.channel.size()
            else {
                var bytesCount = 0L
                while (true) {
                    val available = inputStream.available()
                    if (available == 0)
                        break
                    val skip = inputStream.skip(available.toLong())
                    if (skip &lt; 0)
                        break
                    bytesCount += skip
                }
                if (bytesCount &gt; 0L)
                    return bytesCount
            }
        }
        return -1L
    }
</code></pre>
","0","1264709"
"<p>You can use <a href=""https://github.com/yegor256/cactoos/"" rel=""nofollow noreferrer"">cactoos</a> library with provides reusable <a href=""https://www.elegantobjects.org/#principles"" rel=""nofollow noreferrer"">object-oriented</a> Java components.
OOP is emphasized by this library, so no static methods, NULLs, and so on, only <a href=""https://www.yegor256.com/2014/11/20/seven-virtues-of-good-object.html"" rel=""nofollow noreferrer"">real objects</a> and their contracts (interfaces).
A simple operation like reading InputStream, can be performed like that</p>
<pre><code>final InputStream input = ...;
final Bytes bytes = new BytesOf(input);
final byte[] array = bytes.asBytes();
Assert.assertArrayEquals(
    array,
    new byte[]{65, 66, 67}
);
</code></pre>
<p>Having a dedicated type <code>Bytes</code> for working with data structure <code>byte[]</code> enables us to use OOP tactics for solving tasks at hand.
Something that a procedural &quot;utility&quot; method will forbid us to do.
For example, you need to enconde bytes you've read from this <code>InputStream</code> to Base64.
In this case you will use <a href=""https://www.yegor256.com/2015/02/26/composable-decorators.html"" rel=""nofollow noreferrer"">Decorator pattern</a> and wrap Bytes object within implementation for Base64.
<a href=""https://github.com/yegor256/cactoos/"" rel=""nofollow noreferrer"">cactoos</a> already provides such implementation:</p>
<pre class=""lang-java prettyprint-override""><code>final Bytes encoded = new BytesBase64(
    new BytesOf(
        new InputStreamOf(&quot;XYZ&quot;)
    )
);
Assert.assertEquals(new TextOf(encoded).asString(), &quot;WFla&quot;);
</code></pre>
<p>You can decode them in the same manner, by using Decorator pattern</p>
<pre><code>final Bytes decoded = new Base64Bytes(
    new BytesBase64(
        new BytesOf(
            new InputStreamOf(&quot;XYZ&quot;)
        )
    )
);
Assert.assertEquals(new TextOf(decoded).asString(), &quot;XYZ&quot;);
</code></pre>
<p>Whatever your task is you will be able to create own implementation of <code>Bytes</code> to solve it.</p>
","0","1264709"
"<p>In new version,</p>
<pre><code>IOUtils.readAllBytes(inputStream)
</code></pre>
","0","1264709"
"<p>I found the solution. Actually Base64 class is not available in Android. Link is given below for more information.</p>

<pre><code>byte[] byteArray;                                                  
     byteArray= json.getBytes(StandardCharsets.US_ASCII);
    String encoded=Base64.encodeBytes(byteArray);
    userLogin(encoded);
</code></pre>

<p>Here is the link for Base64 class: <a href=""http://androidcodemonkey.blogspot.com/2010/03/how-to-base64-encode-decode-android.html"" rel=""nofollow noreferrer"">http://androidcodemonkey.blogspot.com/2010/03/how-to-base64-encode-decode-android.html</a></p>
","0","5688042"
"<p>Wrap it in a DataInputStream if that is off the table for some reason, just use read to hammer on it until it gives you a -1 or the entire block you asked for.</p>

<pre><code>public int readFully(InputStream in, byte[] data) throws IOException {
    int offset = 0;
    int bytesRead;
    boolean read = false;
    while ((bytesRead = in.read(data, offset, data.length - offset)) != -1) {
        read = true;
        offset += bytesRead;
        if (offset &gt;= data.length) {
            break;
        }
    }
    return (read) ? offset : -1;
}
</code></pre>
","1","1264709"
"<p>Yes, there limit on java array. Java uses an integer as an index to the array and the maximum integer store by JVM is 2^32. so you can store 2,147,483,647 elements in the array. </p>

<p>In case you need more than max-length you can use two different arrays but the recommended method is store data into a file. because storing data in the file has no limit. because files stored in your storage drivers but array are stored in JVM. JVM provides limited space for program execution. </p>
","2","3038392"